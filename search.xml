<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>axios拦截器源码分析</title>
      <link href="/2021/01/12/axios-lan-jie-qi-yuan-ma-fen-xi/"/>
      <url>/2021/01/12/axios-lan-jie-qi-yuan-ma-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文主要分析 axios 模块中拦截器的使用和源码分析，文章分为如下几个部分：</p><ol><li>拦截器的作用以及使用场景</li><li>如何使用拦截器</li><li>拦截器的源码分析</li></ol><p>axios 源码仓库：<a href="https://github.com/axios/axios/blob/master/lib/core/Axios.js" target="_blank" rel="noopener">https://github.com/axios/axios/blob/master/lib/core/Axios.js</a></p><h3 id="拦截器的作用"><a href="#拦截器的作用" class="headerlink" title="拦截器的作用"></a>拦截器的作用</h3><p>axios 的拦截器可以分为请求拦截器和响应拦截器。请求拦截器可以在发出请求之前，按照拦截器添加顺序执行，再发送请求。而响应拦截器则是在收到响应之后，按照拦截器添加顺序执行后，再返回响应结果。</p><p>使用场景：</p><ol><li>数据转换</li><li>添加额外的数据，例如往 header 添加信息等</li><li>日志记录，输出请求响应时间和失败率等</li></ol><a id="more"></a><h3 id="如何使用拦截器"><a href="#如何使用拦截器" class="headerlink" title="如何使用拦截器"></a>如何使用拦截器</h3><p>下面简单代码实现请求响应时间</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> reportCgi <span class="token operator">=</span> <span class="token punctuation">(</span>res<span class="token punctuation">,</span> config<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> config<span class="token punctuation">:</span> conf <span class="token punctuation">}</span> <span class="token operator">=</span> res <span class="token operator">||</span> <span class="token punctuation">{</span> config <span class="token punctuation">}</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'response'</span><span class="token punctuation">,</span> conf<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> conf<span class="token punctuation">.</span>requestTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>config<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">{</span> requestTime<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">reportCgi</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> response<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">reportCgi</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">,</span> error<span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> error<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> main <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>    <span class="token string">'https://filfox.info/api/v1/message/bafy2bzacedotalbhs6nlsqdxbyu6yqajizqj3nch25m3svyx6tocd4732vzvi'</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p><a href="https://github.com/axios/axios/blob/master/lib/core/Axios.js" target="_blank" rel="noopener">https://github.com/axios/axios/blob/master/lib/core/Axios.js</a></p><p>axios 对象</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//...</span><span class="token keyword">function</span> <span class="token function">Axios</span><span class="token punctuation">(</span>instanceConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>defaults <span class="token operator">=</span> instanceConfig<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 构造中实现了2个拦截器，分别为请求拦截器和响应拦截器</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors <span class="token operator">=</span> <span class="token punctuation">{</span>    request<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">InterceptorManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    response<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">InterceptorManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// request 实现方式</span>Axios<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>request <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//...</span>  <span class="token keyword">var</span> chain <span class="token operator">=</span> <span class="token punctuation">[</span>dispatchRequest<span class="token punctuation">,</span> undefined<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将所有请求拦截器按照添加顺序添加到chain数组之前</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">unshiftRequestInterceptors</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    chain<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">.</span>fulfilled<span class="token punctuation">,</span> interceptor<span class="token punctuation">.</span>rejected<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将所有的响应拦截器都按照添加顺序添加到chain之后</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">pushResponseInterceptors</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    chain<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">.</span>fulfilled<span class="token punctuation">,</span> interceptor<span class="token punctuation">.</span>rejected<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 开始遍历chain执行请求，现在的数组结构类似与[request拦截器,请求,response拦截器]</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>chain<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    promise <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> chain<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用get 方式的请求复用配置文件，并且调用 Axios.prototype.request 方法</span>utils<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'delete'</span><span class="token punctuation">,</span> <span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'head'</span><span class="token punctuation">,</span> <span class="token string">'options'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">forEachMethodNoData</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*eslint func-names:0*/</span>  Axios<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>      <span class="token function">mergeConfig</span><span class="token punctuation">(</span>config <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        method<span class="token punctuation">:</span> method<span class="token punctuation">,</span>        url<span class="token punctuation">:</span> url<span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">(</span>config <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用 post 方式的请求复用配置文件，并且调用 Axios.prototype.request 方法</span>utils<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'put'</span><span class="token punctuation">,</span> <span class="token string">'patch'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">forEachMethodWithData</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*eslint func-names:0*/</span>  Axios<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>      <span class="token function">mergeConfig</span><span class="token punctuation">(</span>config <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        method<span class="token punctuation">:</span> method<span class="token punctuation">,</span>        url<span class="token punctuation">:</span> url<span class="token punctuation">,</span>        data<span class="token punctuation">:</span> data<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/axios/axios/blob/master/lib/core/InterceptorManager.js" target="_blank" rel="noopener">https://github.com/axios/axios/blob/master/lib/core/InterceptorManager.js</a></p><p>拦截器管理对象</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">InterceptorManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 内部保存一个处理数组</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>handlers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 拦截器添加方法分别接收2个方法：完成状态结果处理函数和失败状态结果处理函数</span>InterceptorManager<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>use <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">use</span><span class="token punctuation">(</span>fulfilled<span class="token punctuation">,</span> rejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    fulfilled<span class="token punctuation">:</span> fulfilled<span class="token punctuation">,</span>    rejected<span class="token punctuation">:</span> rejected<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单总结：</p><p>在内部实现了一个拦截器管理器，可以通过 use 往管理器中添加处理函数（包含一个成功状态处理函数和一个失败状态处理函数）</p><ol><li><p>axios 对象内部实例了 2 个拦截器管理器，分别为：请求拦截器和响应拦截器。</p></li><li><p>在调用 request 发送请求时会创建一个数组并且添加请求处理函数</p></li><li><p>首先遍历请求拦截器按照顺序将处理函数添加到数组前部，</p></li><li><p>然后遍历响应拦截器按照顺序将处理函数添加到数组末尾</p></li><li><p>最后遍历数组开始执行</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-workflows配置</title>
      <link href="/2020/10/17/git-workflows-pei-zhi/"/>
      <url>/2020/10/17/git-workflows-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>github 在近期提供了一个 workflows 功能，可以轻松实现定制化工作流任务，包括经常使用的包括了 ci和cd ，从此不再需要通过第三方服务来实现。</p><p>通过 workflows 我们可以实现以下功能：</p><ol><li>构建和测试 Node.js</li><li>构建和测试 Python</li><li>使用 Maven 构建和测试 Java</li><li>使用 Gradle 构建和测试 Java</li><li>使用 Ant 构建和测试 Java</li><li>发布 Node.js 模块包</li><li>使用 Maven 发布 Java 软件包</li><li>使用 Gradle 发布 Java 软件包</li><li>发布 Docker 镜像</li><li>缓存依赖文件</li></ol><p>workflows 执行结果配置推送：</p><ol><li>个人邮箱</li><li>如果您属于组织，则可以选择要将组织活动通知发送到的电子邮件帐户</li><li>选择仅接收失败的工作流通知</li><li>为移动设备启用推送通知</li></ol><a id="more"></a><p>参考文件：</p><ul><li><a href="https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-nodejs" target="_blank" rel="noopener">https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-nodejs</a></li></ul><p>点击 github 仓库 Actions 可以查看更多模板文件</p><p><img src="https://i.loli.net/2020/10/17/JKNk3oU9IPOd7RH.png" alt="image-20201017232346339"></p><h2 id="操作—node-js-ci-cd"><a href="#操作—node-js-ci-cd" class="headerlink" title="操作—node.js ci/cd"></a>操作—node.js ci/cd</h2><p>首先在项目下创建配置文件<code>.github/workflows/main.yml</code>，具体内容将在配置文件中解释</p><pre class="line-numbers language-yml"><code class="language-yml">name: back-end/.TENCETN_CLOUD_HOSTon:  push:    branches:    - master    - mainjobs:  build:    runs-on: ubuntu-latest    steps:      - uses: actions/checkout@v2      - uses: actions/setup-node@v1        with:          node-version: 12          registry-url: https://registry.npm.taobao.org      - run: npm ci      - run: npm test        env: # 注入环境变量，可选          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}  deploy: # 持久化部署方案为，将代码拷贝到服务器，然后进行docker 部署    runs-on: ubuntu-latest     steps:      # 切换分支，获取源码    - name: Checkout      uses: actions/checkout@master    - name: ssh deploy        uses: easingthemes/ssh-deploy@v2.1.4      env:    # Private Key  私钥        SSH_PRIVATE_KEY: ${{secrets.BA_K8S}} # ssh 登录密钥保存位置，可以在仓库 setting secret 中进行配置    # Remote host   远程主机地址        REMOTE_HOST: "127.0.0.1"     # Remote user  远程主机登录用户        REMOTE_USER: "root"    # Remote port  远程主机登录端口    #   REMOTE_PORT: 22    # optional, default is 22    # Source directory  拷贝源文件目录        SOURCE: "./*"    # optional, default is         ARGS: "-rltgoDzvO --delete"    # Target directory  目标目录        TARGET: "/opt/bin/back-end"    - name: docker build and docker run       uses: garygrossgarten/github-action-ssh@release      with:        command: cd /opt/bin/back-end && docker rmi -f back-end:1.0.0 && cd /opt/bin/back-end && docker build -t back-end:1.0.0 . &&  docker run -d --name back-end -p 5000:5000 back-end:1.0.0        host: "127.0.0.1"        username: "root"        privateKey: ${{ secrets.BA_K8S }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在仓库的 readme.md 中配置 job 运行结果图表，格式如：<img src="https://github.com/%E7%BB%84%E7%BB%87%E6%88%96%E4%B8%AA%E4%BA%BA/%E4%BB%93%E5%BA%93/workflows/%E6%89%A7%E8%A1%8CAction%E7%9A%84Name%E6%B3%A8%E6%84%8F%E8%BD%AC%E7%A0%81/badge.svg" alt></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> workflows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>consul的docker自动注册</title>
      <link href="/2020/10/12/consul-de-docker-zi-dong-zhu-ce/"/>
      <url>/2020/10/12/consul-de-docker-zi-dong-zhu-ce/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Registrator 通过检查容器在线来自动为任何Docker容器注册和注销服务，后端注册中心支持consul、etcd、skydns2、zookeeper等存储</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>必须先在本地部署内容：</p><ul><li>docker</li><li>consul</li><li>fabio (不使用则可以不安装)</li></ul><p>需要在每个docker engine上部署一个Registrator实例了，可以通过 docker 部署 registrator 服务，请修改命令中的 consul 地址</p><pre class="line-numbers language-shell"><code class="language-shell">docker run -d \    --name=registrator \    --net=host \    --volume=/var/run/docker.sock:/tmp/docker.sock \    gliderlabs/registrator:latest \      consul://localhost:8500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数解析：</p><ul><li>–net=host 帮助Registrator获取到主机级别的ip和主机名</li><li>–volume=/var/run/docker.sock:/tmp/docker.sock 允许Registrator访问docker的api接口</li></ul><a id="more"></a><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="Container-部署"><a href="#Container-部署" class="headerlink" title="Container 部署"></a>Container 部署</h3><p>运行一个 web 服务</p><pre class="line-numbers language-shell"><code class="language-shell">docker run -d -p 3002:3000 --name myapp codebill/myapp:v1.0.7 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查服务状态</p><pre class="line-numbers language-shell"><code class="language-shell">curl 127.0.0.1:3002{"version":"1.0.7","url":"/"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看consul endpoint 内容</p><pre class="line-numbers language-shell"><code class="language-shell">curl http://127.0.0.1:8500/v1/catalog/services{"consul":[],"consul-8500":[],"fabio":[],"fabio-9998":[],"fabio-9999":[],"myapp":[],"prometheus":[],"proxy-manager":["proxy-manager"]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看更详细的 endpoint 信息</p><pre class="line-numbers language-shell"><code class="language-shell">curl http://127.0.0.1:8500/v1/catalog/service/myapp[{"ID":"b66e8b6c-eb0e-8ac7-ed56-289fca4508cf","Node":"467c201ea1a1","Address":"172.23.0.2","Datacenter":"dc1","TaggedAddresses":{"lan":"172.23.0.2","lan_ipv4":"172.23.0.2","wan":"172.23.0.2","wan_ipv4":"172.23.0.2"},"NodeMeta":{"consul-network-segment":""},"ServiceKind":"","ServiceID":"ks-allinone:myapp:3000","ServiceName":"myapp","ServiceTags":[],"ServiceAddress":"","ServiceWeights":{"Passing":1,"Warning":1},"ServiceMeta":{},"ServicePort":3002,"ServiceEnableTagOverride":false,"ServiceProxy":{"MeshGateway":{},"Expose":{}},"ServiceConnect":{},"CreateIndex":1977,"ModifyIndex":1977}]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="服务模型"><a href="#服务模型" class="headerlink" title="服务模型"></a>服务模型</h2><p>container中监听的一个端口就是一个服务，如果监听多个端口就是多个服务。一个服务的创建，包括来自container的信息和用户在container上定义的元数据，这些信息被创建成一个服务对象。这个服务对象随后被传递给后端的注册中心，并尝试放置到一个特定的注册项。</p><h3 id="容器覆盖"><a href="#容器覆盖" class="headerlink" title="容器覆盖"></a>容器覆盖</h3><p>Name、Tags、Attrs、ID都是可以被用户定义的container元数据覆盖掉的，因为元数据被存储为环境变量或者标签，因此容器作者可以在Dockerfile中包含他们自己的元数据定义。</p><pre><code>SERVICE_NAME=customerdbSERVICE_80_NAME=apiSERVICE_REGION=us-east</code></pre><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><pre><code>docker run -d -p 3003:3000 --name myapp-2 \-e &quot;SERVICE_80_NAME=myapp&quot; \-e &quot;SERVICE_TAGS=proxy-koa&quot; \-e &quot;SERVICE_REGION=hz&quot; \codebill/myapp:v1.0.7 </code></pre><p>查看 consul 发现已经注册完成</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjkecne3vkj31c50e175m.jpg" alt="image-20201010180644521"></p><h3 id="结合-fabio-实现负载均衡"><a href="#结合-fabio-实现负载均衡" class="headerlink" title="结合 fabio 实现负载均衡"></a>结合 fabio 实现负载均衡</h3><p>删除之前创建的容器后，再创建2个新的容器</p><pre><code>docker run -d -p 3003:3000 --name myapp-2 \-e &quot;SERVICE_80_NAME=myapp&quot; \-e &quot;SERVICE_TAGS=urlprefix-a.com&quot; \-e &quot;SERVICE_REGION=hz&quot; \codebill/myapp:v1.0.7 docker run -d -p 3002:3000 --name myapp-1 \-e &quot;SERVICE_80_NAME=myapp&quot; \-e &quot;SERVICE_TAGS=urlprefix-a.com&quot; \-e &quot;SERVICE_REGION=hz&quot; \codebill/myapp:v1.0.7 </code></pre><p>查看 consul 检查是否注册成功</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjkeiyxetdj319d0crjsp.jpg" alt="image-20201010181251428"></p><p>查看 fabio 查看路由规则是否生成</p><p>发现请求检查是否实现代理和负载均衡</p><pre class="line-numbers language-shell"><code class="language-shell">curl -H "Host:a.com" http://127.0.0.1:9999<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务注册和发现 </tag>
            
            <tag> consul </tag>
            
            <tag> Registrator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>consul的负载均衡fabio</title>
      <link href="/2020/10/12/consul-de-fu-zai-jun-heng-fabio/"/>
      <url>/2020/10/12/consul-de-fu-zai-jun-heng-fabio/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>fabio 是 ebay 团队用 golang 开发的一个快速、简单零配置，能够让 consul 部署的应用快速支持 http(s) 的负载均衡路由器。</p><p>因为 consul 支持服务注册与健康检查，所以 fabio 能够零配置提供负载，升级部署从未如此简单。</p><p>根据项目的介绍，fabio 能提供每秒15000次请求。</p><p>fabio 的工作就很简单了！ 就是直接从consul 注册表里面取出健康的服务，根据服务注册时候的 tags 配置自动创建自己的路由表，然后当一个 http 请求过来的时候自动去做负载均衡</p><p>资料：</p><ul><li><a href="https://fabiolb.net/feature/docker/" target="_blank" rel="noopener">官网</a></li><li><a href="https://fabiolb.net/ref/" target="_blank" rel="noopener">配置</a></li></ul><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><pre><code>======    服务注册     =========         =========  A服务   &lt;------&gt;    consul集群  ----&gt;  健康的 A/不健康的 A 集群======    健康检查     =========         =========                          ^                          | 加入/移出路由表                          |                       ========                       fabio 集群                       ========                          |                          | A服务   如果找到则成功路由，否则返回错误                          V                        http 请求</code></pre><a id="more"></a><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>创建配置文件 fabio.properties，更多配置文件信息请参考</p><pre><code># 配置 consul 服务地址registry.consul.addr = 10.10.0.12:8500registry.consul.register.addr = 10.10.0.12:9998metrics.target = stdout</code></pre><p>docker 部署</p><pre class="line-numbers language-shell"><code class="language-shell">$ docker run -d --name fabio -p 9999:9999 -p 9998:9998 -v $PWD/fabio/fabio.properties:/etc/fabio/fabio.properties fabiolb/fabio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>docker-compose 部署 docker-compose.yml</p><pre class="line-numbers language-yml"><code class="language-yml">version: '3.6'services:  fabio:  image: "magiconair/fabio"  ports:  - "9998:9998"  - "9999:9999"  volumes:  - ./fabio.properties:/etc/fabio/fabio.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部署完成后打开ui管理界面 <code>127.0.0.1:9998</code> 如下，这里将显示所有注册完成的路有列表</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjk8ksputsj31y90dbdhk.jpg" alt="image-20201010144659162"></p><h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><p>nodejs 代码仓库: <a href="https://github.com/ddzyan/node-consul.git" target="_blank" rel="noopener">https://github.com/ddzyan/node-consul.git</a></p><p>核心逻辑：在 client 注册时需要添加上指定 tag 标签，类似于<code>urlprefix-</code>，如下</p><pre class="line-numbers language-js"><code class="language-js">consul<span class="token punctuation">.</span>agent<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'cmdWork'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 服务名称可以不唯一，可以通过 name 获取批量服务信息</span>  id<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`cmdWork-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>number<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 服务Id必须唯一</span>  tags<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'urlprefix-a.com'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 标签信息</span>  meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>    describe<span class="token punctuation">:</span> <span class="token string">'commP'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  address<span class="token punctuation">:</span> <span class="token string">'172.16.0.39'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 服务地址</span>  port<span class="token punctuation">:</span> <span class="token number">3001</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 服务端口号</span>  check<span class="token punctuation">:</span> <span class="token punctuation">{</span>    http<span class="token punctuation">:</span> <span class="token string">'http://172.16.0.39:3001/health'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 服务地址</span>    interval<span class="token punctuation">:</span> <span class="token string">'5s'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 健康检测轮询时间</span>    timeout<span class="token punctuation">:</span> <span class="token string">'10s'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 超时时间</span>    status<span class="token punctuation">:</span> <span class="token string">'critical'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 初始化服务状态</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加后在打开 fabio ui 管理界面，会发现路有已经完成注册，并且会根据服务数量自动进行轮询权限调整，可以通过一下命令测试请求请求转发</p><pre class="line-numbers language-shell"><code class="language-shell">$ curl -H "Host:a.com" http://127.0.0.1:9999/health<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务注册和发现 </tag>
            
            <tag> consul </tag>
            
            <tag> fabio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务注册和发现</title>
      <link href="/2020/10/12/fu-wu-zhu-ce-he-fa-xian/"/>
      <url>/2020/10/12/fu-wu-zhu-ce-he-fa-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="服务发现的特点"><a href="#服务发现的特点" class="headerlink" title="服务发现的特点"></a>服务发现的特点</h2><p>服务与服务之间的调用通常需要在配置文件中填写好主机和端口,但是这样不易于维护，且分布式环境中不易于部署与扩容。</p><p>那么此时就需要考虑服务启动的时候自己把主机和端口以及一些其他信息注册到注册中心，这样其他服务可以从中找到它。</p><p>甚至更为简单的，注册完毕后通过 DNS 的方式来『寻址』。比如 Zookeepr 可以很好的完成这个工作，但是其中还有一个弊端就是服务的健康检查，服务注册到注册中心之后如何保证这个服务一定可用？此时就需要自己来写逻辑，当服务不可用的时候自动从注册中心下线。 </p><h2 id="服务注册发现方案"><a href="#服务注册发现方案" class="headerlink" title="服务注册发现方案"></a>服务注册发现方案</h2><p>完整的服务注册与发现流程图</p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjj2y1r58dj312k0mygq3.jpg" alt="image-20201009144635533" style="zoom:50%;"><p>一个服务发现系统主要由三部分组成：</p><ul><li>注册器</li><li>注册表</li><li>发现机制</li></ul><p>第三方实现：</p><ul><li>zookeeper</li><li>etcd</li><li>consul</li></ul><a id="more"></a><p>特点比较</p><table><thead><tr><th align="left">Feature</th><th align="left">euerka</th><th align="left">Consul</th><th align="left">zookeeper</th><th align="left">etcd</th></tr></thead><tbody><tr><td align="left">服务健康检查</td><td align="left">可配支持</td><td align="left">服务状态，内存，硬盘等</td><td align="left">(弱)长连接，keepalive</td><td align="left">连接心跳</td></tr><tr><td align="left">多数据中心</td><td align="left">—</td><td align="left">支持</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">kv 存储服务</td><td align="left">—</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td></tr><tr><td align="left">一致性</td><td align="left">—</td><td align="left">raft</td><td align="left">paxos</td><td align="left">raft</td></tr><tr><td align="left">cap</td><td align="left">ap</td><td align="left">ca</td><td align="left">cp</td><td align="left">cp</td></tr><tr><td align="left">使用接口(多语言能力)</td><td align="left">http（sidecar）</td><td align="left">支持 http 和 dns</td><td align="left">客户端</td><td align="left">http/grpc</td></tr><tr><td align="left">watch 支持</td><td align="left">支持 long polling/大部分增量</td><td align="left">全量/支持long polling</td><td align="left">支持</td><td align="left">支持 long polling</td></tr><tr><td align="left">自身监控</td><td align="left">metrics</td><td align="left">metrics</td><td align="left">—</td><td align="left">metrics</td></tr><tr><td align="left">安全</td><td align="left">—</td><td align="left">acl /https</td><td align="left">acl</td><td align="left">https 支持（弱）</td></tr><tr><td align="left">spring cloud 集成</td><td align="left">已支持</td><td align="left">已支持</td><td align="left">已支持</td><td align="left">已支持</td></tr></tbody></table><h3 id="consul"><a href="#consul" class="headerlink" title="consul"></a>consul</h3><p>支持分布式，高可用，水平扩展的服务注册和发现工具，包含以下特点：</p><ul><li>服务发现：<code>Consul</code> 通过 <code>DNS</code> 或者 <code>HTTP</code> 接口使<strong>服务注册和服务发现</strong>变的很容易</li><li>健康检查：健康检测使 <code>consul</code> 可以快速的告警在集群中的操作。和服务发现的集成，可以防止服务转发到故障的服务上面</li><li>键/值存储</li><li>多数据中心：支持<strong>多数据中心</strong>以避免<strong>单点故障</strong>，内外网的服务采用不同的端口进行监听</li><li>一致性算法：采用 <code>Raft</code> 一致性协议算法，比<code>Paxos</code>算法好用</li><li>服务管理控制面板</li></ul>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务注册和发现 </tag>
            
            <tag> consul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建一个完整的docker生态</title>
      <link href="/2020/10/08/da-jian-yi-ge-wan-zheng-de-docker-sheng-tai/"/>
      <url>/2020/10/08/da-jian-yi-ge-wan-zheng-de-docker-sheng-tai/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>通过本文你可以学习到以下内容：</p><ol><li>快速安装 docker 和 docker-compose</li><li>如何使用 docker 可视化管理平台</li><li>如何对 docker 容器进行监控和报警</li></ol><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><h3 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h3><pre class="line-numbers language-shell"><code class="language-shell">apt-get updateapt-get -y install \    apt-transport-https \    ca-certificates \    curl \    gnupg-agent \    software-properties-commoncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -apt-key fingerprint 0EBFCD88add-apt-repository \   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \  $(lsb_release -cs) \  stable"apt-get updateapt-get -y install docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h3><pre class="line-numbers language-shell"><code class="language-shell">sudo yum install -y yum-utilssudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.reposudo yum install -y docker-ce docker-ce-cli containerd.iosudo systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改镜像源和默认资源存储位置"><a href="#修改镜像源和默认资源存储位置" class="headerlink" title="修改镜像源和默认资源存储位置"></a>修改镜像源和默认资源存储位置</h3><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/docker/daemon.json{  "registry-mirrors": ["https://7a1tnjfc.mirror.aliyuncs.com","http://hub-mirror.c.163.com"],  "data-root": "/media/nvme/docker_data"}# 重启service docker restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="docker-compose-部署"><a href="#docker-compose-部署" class="headerlink" title="docker-compose 部署"></a>docker-compose 部署</h3><p>要安装其他版本的 Compose，请替换 1.24.1。</p><pre class="line-numbers language-shell"><code class="language-shell">$ sudo curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose$ sudo chmod +x /usr/local/bin/docker-compose$ sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose$ docker-compose --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><p>一般的拉取镜像，构建容器，进入容器内部，查看容器日志等指令，这里就不再多提，分享一些不常用但是非常高效的指令</p><pre class="line-numbers language-shell"><code class="language-shell"># 删除那些已停止的容器、dangling 镜像、未被容器引用的 network 和构建过程中的 cache$ docker system prune# 删除所有未被引用的镜像文件$ docker images prune# 相当在 container 退出的时候运行 docker rm -v，删除容器匿名数据卷$ docker run --it --rm busybox# 和宿主机使用同一个 network 和 pid namespace$ docker run -d \  --net="host" \  --pid="host" \  -v "/:/host:ro,rslave" \  quay.io/prometheus/node-exporter \  --path.rootfs=/host# 查看docker和宿主机状态$ docker info# 查看容器运行状态和资源消耗$ docker stats# 查看docker 资源使用情况$ docker system df# 删除未被容器引用的数据卷$ docker system prune -a -f --volumes# 容器导出$ docker save -o myapp.tar codebill/myapp:latest# 容器导入$ docker import nginx-test.tar nginx:imp# 镜像导入$ docker save -o nginx.tar nginx:latest# 镜像导出$ docker load -i nginx.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="可视化管理平台搭建"><a href="#可视化管理平台搭建" class="headerlink" title="可视化管理平台搭建"></a>可视化管理平台搭建</h2><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><pre class="line-numbers language-shell"><code class="language-shell">$ docker pull portainer/portainer$ docker run -d -p 9000:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --name Prtainer portainer/portainer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>open url: <a href="http://localhost:9000/#/init/admin" target="_blank" rel="noopener">http://localhost:9000/#/init/admin</a> , 第一次登陆需要进行密码修改，以下为控制面板主要内容介绍，点击可查看详情</p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gji37l9gb5j31kg0u0don.jpg" alt="image-20201008181011358" style="zoom:50%;"><h3 id="操作案例：拉取镜像"><a href="#操作案例：拉取镜像" class="headerlink" title="操作案例：拉取镜像"></a>操作案例：拉取镜像</h3><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gji3a1bu3lj31ke0u0tij.jpg" alt="image-20201008181232548" style="zoom:50%;"><h3 id="操作案例：构建容器"><a href="#操作案例：构建容器" class="headerlink" title="操作案例：构建容器"></a>操作案例：构建容器</h3><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gji3cdyabej31kr0u0qax.jpg" alt="image-20201008181448647" style="zoom:50%;"><img src="/Users/bill/Library/Application Support/typora-user-images/image-20201008181827708.png" alt="image-20201008181827708" style="zoom:50%;"><h2 id="可视化性能监控平台搭建"><a href="#可视化性能监控平台搭建" class="headerlink" title="可视化性能监控平台搭建"></a>可视化性能监控平台搭建</h2><h3 id="prometheus-部署"><a href="#prometheus-部署" class="headerlink" title="prometheus 部署"></a>prometheus 部署</h3><p>配置 prometheus 从 cadvisor 抓取数据指标，创建 prometheus.yml</p><pre class="line-numbers language-yml"><code class="language-yml">scrape_configs:  - job_name: cadvisor    scrape_interval: 5s    static_configs:      - targets:          - cadvisor:8080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建 docker-compose.yml</p><pre class="line-numbers language-yml"><code class="language-yml">version: '3.2'services:  prometheus:    image: prom/prometheus:latest    container_name: prometheus    ports:      - 9090:9090    command:      - --config.file=/etc/prometheus/prometheus.yml    volumes:      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro    depends_on:      - cadvisor  cadvisor:    image: google/cadvisor:latest    container_name: cadvisor    ports:      - 8080:8080    volumes:      - /:/rootfs:ro      - /var/run:/var/run:rw      - /sys:/sys:ro      - /var/lib/docker/:/var/lib/docker:ro    depends_on:      - redis  redis:    image: redis:latest    container_name: redis    ports:      - 6379:6379<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此配置指示 Docker Compose 运行三个服务，每个服务对应一个 Docker 容器：</p><ol><li>prometheus 将使用本地 prometheus.yml configuration file (通过 volumes 参数导入到容器中)</li><li>cadvisor 服务公开端口 8080（cAdvisor 指标的默认端口），并依赖于各种本地卷（/，/ var / run 等）。</li><li>Redis 服务是标准的 Redis 服务器。cAdvisor 将自动从该容器收集容器指标，即无需任何进一步配置。</li></ol><pre class="line-numbers language-shell"><code class="language-shell"># 启动$ docker-compose up -d$ docker-compose ps   Name                 Command               State           Ports----------------------------------------------------------------------------cadvisor     /usr/bin/cadvisor -logtostderr   Up      0.0.0.0:8080->8080/tcpprometheus   /bin/prometheus --config.f ...   Up      0.0.0.0:9090->9090/tcpredis        docker-entrypoint.sh redis ...   Up      0.0.0.0:6379->6379/tcp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>cAdvisor web UI : <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p><p><img src="https://i.loli.net/2020/08/20/N6ri9eabc2Kk8PO.png" alt="image-20200820141548791"></p><p>查看指定容器的统计信息和图表 : <a href="http://localhost:8080/docker/" target="_blank" rel="noopener">http://localhost:8080/docker/</a><containername> ，例如:</containername></p><ul><li>redis <a href="http://10.10.0.11:8080/docker/redis" target="_blank" rel="noopener">http://10.10.0.11:8080/docker/redis</a></li><li>prometheus <a href="http://10.10.0.11:8080/docker/prometheus" target="_blank" rel="noopener">http://10.10.0.11:8080/docker/prometheus</a></li></ul><p>Prometheus web UI: <a href="http://10.10.0.11:9090/graph" target="_blank" rel="noopener">http://10.10.0.11:9090/graph</a></p><img src="/Users/bill/Library/Application Support/typora-user-images/image-20201008182635257.png" alt="image-20201008182635257" style="zoom:50%;"><p>使用 PromQL Demo</p><table><thead><tr><th align="left">Expression</th><th align="left">Description</th><th align="left">For</th></tr></thead><tbody><tr><td align="left">rate(container_cpu_usage_seconds_total{name=”redis”}[1m])</td><td align="left">The <a href="https://en.wikipedia.org/wiki/Cgroups" target="_blank" rel="noopener">cgroup</a>‘s CPU usage in the last minute</td><td align="left">The <code>redis</code> container</td></tr><tr><td align="left">container_memory_usage_bytes{name=”redis”}</td><td align="left">The cgroup’s total memory usage (in bytes)</td><td align="left">The <code>redis</code> container</td></tr><tr><td align="left">rate(container_network_transmit_bytes_total[1m])</td><td align="left">Bytes transmitted over the network by the container per second in the last minute</td><td align="left">All containers</td></tr><tr><td align="left">rate(container_network_receive_bytes_total[1m])</td><td align="left">Bytes received over the network by the container per second in the last minute</td><td align="left">All containers</td></tr></tbody></table><h3 id="grafana-部署"><a href="#grafana-部署" class="headerlink" title="grafana 部署"></a>grafana 部署</h3><pre class="line-numbers language-shell"><code class="language-shell">$ docker run -d --name=grafana -p 3000:3000 grafana/grafana$ docker ps | grep "grafana"eb5bfe364689        grafana/grafana                                           "/run.sh"                58 seconds ago      Up 56 seconds       0.0.0.0:3000->3000/tcp   grafana<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>open web ui : <a href="http://localhost:3000/login" target="_blank" rel="noopener">http://localhost:3000/login</a> 账号 admin 密码 admin，第一次登录需要修改密码</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gji3q0ww2tj31cr0saqcj.jpg" alt="image-20201008182751973"></p><h4 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h4><img src="/Users/bill/Library/Application Support/typora-user-images/image-20201008182938941.png" alt="image-20201008182938941" style="zoom:50%;"><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gji3s8gyf4j31u009ht9r.jpg" alt="image-20201008183002130"></p><img src="/Users/bill/Library/Application Support/typora-user-images/image-20201008183109500.png" alt="image-20201008183109500" style="zoom:50%;"><h4 id="配置数据面板"><a href="#配置数据面板" class="headerlink" title="配置数据面板"></a>配置数据面板</h4>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-资源隔离和限制原理</title>
      <link href="/2020/09/08/docker-zi-yuan-ge-chi-he-xian-zhi-yuan-li/"/>
      <url>/2020/09/08/docker-zi-yuan-ge-chi-he-xian-zhi-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="开卷有益"><a href="#开卷有益" class="headerlink" title="开卷有益"></a>开卷有益</h2><p>在阅读文章之前，你可以先想想自己是否了解以下内容，如果不了解希望此文章可以帮助你解除疑惑：</p><ol><li>解释 docker 原理<ol><li>简述 namespace 可以对哪些资源做隔离？</li><li>简述 cgroups 的作用和可以限制的资源类型？</li></ol></li><li>在 linux 如何实操检验 cgroups 对资源的限制？</li><li>Docker 默认会为容器启用哪些 namespace?</li><li>简述 虚拟机 和 docker 两者的技术缺陷？</li></ol><hr><h2 id="简介-docker-原理"><a href="#简介-docker-原理" class="headerlink" title="简介 docker 原理"></a>简介 docker 原理</h2><p>docker 项目核心原理实际上就是未待创建的用户进程：</p><ol><li>启用 Linux Namespace 配置，实现资源隔离</li><li>设置指定的 Cgroups 参数，实现资源限制</li><li>切换进程的根目录（change rootfs）</li></ol><h2 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h2><p>它实际上修改了容器内的应用程序看待整个计算机的“视图”，即它的“视线”被操作系统做了限制，只能“看到”某些特定的内容，但是对于宿主机来说，这些被“隔离”的进程和其他进程没有什么区别，所以 docker container 的本质其实就是被操作系统加了一些限定参数进程。</p><p>了解了 docker container 的本质之后，我们可以比较下 docker 和 虚拟机 的技术特点：</p><ol><li>虚拟机缺点：<ol><li>体积较大：首先虚拟机需要在宿主机上虚拟化出一个操作系统，然后在虚拟化的操作系统上部署应用和依赖等，这里操作系统本身就会占用一定的内存</li><li>性能较低：虚拟机上的应用如果要操作宿主机操作系统，则需要通过虚拟化软件的拦截和处理，从而造成性能的浪费。</li></ol></li><li>docker 缺点<ol><li>隔离不彻底<ol><li>因为 container 只是运行在宿主上的一个特殊的进程，所以所有 container 都还是使用同一个宿主机的系统内核，如果修改内核参数，则会全局生效。</li><li>namespace 对部分资源和对象无法隔离，例如时间（在 container 内修改时间，会导致宿主机的时间也会一起改变） — kernel 5.6 已经支持 time namespace</li></ol></li></ol></li></ol><p>架构图</p><p><img src="https://pic1.zhimg.com/80/v2-28323060e9fd610597f1b3d7e0a314c0_720w.jpg" alt="img"></p><p>从架构图上也可以看出，docker 并没有使用虚拟化技术实现一个操作系统，它在应用的最右侧，表示用户在容器内运行的进程跟宿主机的其他进程一样，都由宿主机操作系统统一管理，只不过这些被隔离的进程额外设置了一些 namespace，而 docker 在这其中只是起到了辅助管理工作。</p><p>namespace 分别可以对以下资源做隔离：</p><ol><li>pid — 默认</li><li>network — 默认</li><li>user</li><li>mount</li><li>IPC</li><li>cgroup</li><li>UTS</li></ol><a id="more"></a><h2 id="CGroups（linux-controller-groups）"><a href="#CGroups（linux-controller-groups）" class="headerlink" title="CGroups（linux controller groups）"></a>CGroups（linux controller groups）</h2><p>docker 使用了 linux 的 CGroups 实现了对进程资源的限制，通过以下命令可以看到可以被限制的资源都有哪些：</p><pre class="line-numbers language-shell"><code class="language-shell"># 查看都可以限制哪些资源,每一个文件夹都表示一种可以被限制的资源种类$ mount -t cgroupcgroup on /sys/fs/cgroup/systemd type cgroup (rw,nosuid,nodev,noexec,relatime,xattr,name=systemd)cgroup on /sys/fs/cgroup/net_cls,net_prio type cgroup (rw,nosuid,nodev,noexec,relatime,net_cls,net_prio)cgroup on /sys/fs/cgroup/hugetlb type cgroup (rw,nosuid,nodev,noexec,relatime,hugetlb)cgroup on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)cgroup on /sys/fs/cgroup/cpu,cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpu,cpuacct)cgroup on /sys/fs/cgroup/perf_event type cgroup (rw,nosuid,nodev,noexec,relatime,perf_event)cgroup on /sys/fs/cgroup/freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer)cgroup on /sys/fs/cgroup/devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices)cgroup on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)cgroup on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)cgroup on /sys/fs/cgroup/rdma type cgroup (rw,nosuid,nodev,noexec,relatime,rdma)cgroup on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)# 或者这样，每一个文件夹都表示一种可以被限制的资源种类$ ls /sys/fs/cgroupblkio  cpu  cpuacct  cpu,cpuacct  cpuset  devices  freezer  hugetlb  memory  net_cls  net_cls,net_prio  net_prio  perf_event  pids  rdma  systemd  unified<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先我们先通过代码了解如何进行其中一种资源的限制（CPU），再运行一个 docker container 来进行验证。</p><pre class="line-numbers language-shell"><code class="language-shell"># 首先启动一个死循环进程，查看 top 数据，我们会发现此进程会消耗100%的CPU，而我们的目标就是对此进行的资源进行限定$ while : ; do : ; done &[1] 24899$ toptop - 08:17:30 up 2 days, 19:46,  2 users,  load average: 0.89, 0.49, 0.41Tasks: 164 total,   2 running, 106 sleeping,   0 stopped,   0 zombie%Cpu(s):  1.9 us,  8.4 sy, 17.8 ni, 71.9 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 stKiB Mem :  8084860 total,  4431220 free,   904984 used,  2748656 buff/cacheKiB Swap:        0 total,        0 free,        0 used.  7004876 avail MemPID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                   24899 root      25   5   54116   3676      0 R  99.7  0.0   1:03.48 zsh# 首先创建一个资源组$ cd /sys/fs/cgroup/cpu# 文件夹创建后，操作系统会自动在此文件夹下创建资源限制文件$ mkdir container$ ll-rw-r--r-- 1 root root 0 Sep  7 06:45 cgroup.clone_children-rw-r--r-- 1 root root 0 Sep  7 06:45 cgroup.procs-r--r--r-- 1 root root 0 Sep  7 06:45 cpuacct.stat-rw-r--r-- 1 root root 0 Sep  7 06:45 cpuacct.usage-r--r--r-- 1 root root 0 Sep  7 06:45 cpuacct.usage_all-r--r--r-- 1 root root 0 Sep  7 06:45 cpuacct.usage_percpu-r--r--r-- 1 root root 0 Sep  7 06:45 cpuacct.usage_percpu_sys-r--r--r-- 1 root root 0 Sep  7 06:45 cpuacct.usage_percpu_user-r--r--r-- 1 root root 0 Sep  7 06:45 cpuacct.usage_sys-r--r--r-- 1 root root 0 Sep  7 06:45 cpuacct.usage_user-rw-r--r-- 1 root root 0 Sep  7 06:45 cpu.cfs_period_us-rw-r--r-- 1 root root 0 Sep  7 07:00 cpu.cfs_quota_us-rw-r--r-- 1 root root 0 Sep  7 06:45 cpu.shares-r--r--r-- 1 root root 0 Sep  7 06:45 cpu.stat-rw-r--r-- 1 root root 0 Sep  7 06:45 notify_on_release-rwxrwxrwx 1 root root 0 Sep  7 07:00 tasks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部分资源限制文件详解</p><pre class="line-numbers language-shell"><code class="language-shell"># 资源显示间隔时间10000 us$ cat cpu.cfs_period_us100000# 资源限制大小，默认为 -1 不限制$ cat cpu.cfs_quota_us-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改限制资源，在限制条件中设定一个满的 CPU 是 1000 ms，如果我们设置了 200，则为在指定时间内提供单核的 20%的算力</p><pre class="line-numbers language-shell"><code class="language-shell"># 修改 CPU 限制为 20%$ echo 20000 > cpu.cfs_quota_us# 添加需要限制的 PID$ chmod 777 tasks$ echo 24899>tasks# 在查看资源,发现已经为20%$ toptop - 08:25:48 up 2 days, 19:55,  2 users,  load average: 1.61, 1.09, 0.75Tasks: 160 total,   2 running, 106 sleeping,   0 stopped,   0 zombie%Cpu(s):  3.9 us,  2.8 sy,  3.9 ni, 89.3 id,  0.2 wa,  0.0 hi,  0.0 si,  0.0 stKiB Mem :  8084860 total,  4431508 free,   903404 used,  2749948 buff/cacheKiB Swap:        0 total,        0 free,        0 used.  7006456 avail MemPID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                     24899 root      25   5   54116   3676      0 R  20.5  0.0   9:00.67 zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过以上我们已经了解到了 linus 如何进行 CPU 资源限制，为了验证 Docker 是否也是运用此方法，我们可以通过以下方式验证</p><pre class="line-numbers language-shell"><code class="language-shell"># 创建容器，并且限制使用 CPU 资源$ docker run -d --cpu-quota=20000 --cpu-period 100000 --name busybox-1 busybox tail -f167e90b8a2f1598fc6f4084ef8845650c1456de58509c55829fd4ffd403ab4ec# 查看资源限制,发现与预期设置一致$ cd /sys/fs/cgroup/cpu/docker/167e90b8a2f1598fc6f4084ef8845650c1456de58509c55829fd4ffd403ab4ec$ cat cpu.cfs_quota_us20000$ cat cpu.cfs_period_us100000# 进入容器，进行压力测试，验证CPU资源$ docker exec -it 167e90b8a2f1598fc6f4084ef8845650c1456de58509c55829fd4ffd403ab4ec sh$ while : ; do : ; done &$ exit# 发现与预期结果一致，在这里也可以看发现 container 也只是宿主机内一个进程而已$ top - 08:33:27 up 2 days, 20:02,  2 users,  load average: 0.61, 0.64, 0.65Tasks: 164 total,   2 running, 106 sleeping,   0 stopped,   0 zombie%Cpu(s):  8.0 us,  1.7 sy,  0.0 ni, 90.0 id,  0.1 wa,  0.0 hi,  0.2 si,  0.0 stKiB Mem :  8084860 total,  4427444 free,   904860 used,  2752556 buff/cacheKiB Swap:        0 total,        0 free,        0 used.  7005040 avail MemPID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                     1265 root      20   0    1316     68      4 R  19.9  0.0   0:10.73 sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上只是对 CGroups 中对 CPU 限制了详细的操作和解释，除此之外它还能对以下资源做限制：</p><ul><li>memory 内存</li><li>blkio 磁盘读写</li><li>…</li></ul><p>docker 支持的资源限制方法，发现 CGroups 支持的，docker 都支持：</p><ul><li>–memory-swappiness int Tune container memory swappiness (0 to 100) (default -1)</li><li>–memory bytes Memory limit</li><li>–blkio-weight uint16 Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)</li><li>–blkio-weight-device list Block IO weight (relative device weight) (default [])</li></ul><p>到这里已经将 docker 中 namespace 资源隔离，CGroup 资源限制做了详细的解释</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-BridgeNetwork原理</title>
      <link href="/2020/09/07/docker-bridgenetwork-yuan-li/"/>
      <url>/2020/09/07/docker-bridgenetwork-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/tshangshi/article/details/50894478" target="_blank" rel="noopener">三层交换机</a></li><li><a href="https://zhuanlan.zhihu.com/p/32059190" target="_blank" rel="noopener">OSI 网络架构</a></li><li><a href="https://www.lifewire.com/layers-of-the-osi-model-illustrated-818017" target="_blank" rel="noopener">七层网络架构</a></li></ul><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><ul><li>为什么已经有了链路层的交换机，还要有网络层的路由器呢?</li><li>为什么主机之间需要 MAC 地址才能进行通信？</li><li>有了 MAC 地址，为什么不直接通过 MAC : prot 进行发送数据？</li><li>简述在 docker 中被隔离的 container 如何与其他 Network Namespace 里的 container 进行交互？</li><li>docker 使用宿主机网络栈（host 模式）会引起什么问题？</li></ul><h2 id="基础概念（可以先跳过）"><a href="#基础概念（可以先跳过）" class="headerlink" title="基础概念（可以先跳过）"></a>基础概念（可以先跳过）</h2><h3 id="操作指令"><a href="#操作指令" class="headerlink" title="操作指令"></a>操作指令</h3><pre class="line-numbers language-shell"><code class="language-shell"># 查看路由表$ route# 查看网络桥接连接信息$ brctl show# 查看网络接口信息$ ip link show# 查看网络接口绑定信息$ cat /sys/class/net/etho/iflnk# 显示数据包到主机的路径$ traceroute# 显示 IP 对应的 mac 地址0$ ip neigh show dev cali33e0eb4cdea10.233.96.1 lladdr aa:7a:7e:d0:be:fa REACHABLE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网络栈"><a href="#网络栈" class="headerlink" title="网络栈"></a>网络栈</h3><p>每个被隔离的 container 都有一套网络栈包含：包含网卡（Network Interface），回环设备，路由表（Routing Table）和 iptables 规则。</p><h3 id="网桥"><a href="#网桥" class="headerlink" title="网桥"></a>网桥</h3><p>网桥是工作在 <strong>数据链路层</strong> 的设备，主要功能是根据 MAC 地址来将数据包转发到网桥的不同 Port 上。</p><h3 id="交换机工作原理"><a href="#交换机工作原理" class="headerlink" title="交换机工作原理"></a>交换机工作原理</h3><p>当交换机接收到一个数据帧，提取出该数据帧的目的 MAC 地址，并依此为根据进行 CAM 表查询，如果能查找到结果，则根据结果进行数据帧的转发，如果不能命中则（向除接收端口外的）所有端口进行 UDP 广播 。如果有端口匹配的 MAC 地址匹配，则会进行响应，交换机会将该 MAC 地址和接收到该 MAC 地址的端口绑定起来，插入 CAM 表项，这样当接收到一个发送到该 MAC 地址的数据帧时，就不需要向所有端口广播。</p><p>二层设备只认帧中的源和目的 MAC 地址进行数据传输，当传到第三层路由器，三层设备却是基于数据报文中的 IP 进行数据转发。</p><p>在 OSI 网络模型中，每层都是对上一层的数据包包装并且加入自己的内容，反之则对每层的数据进行解包，流程如下：</p><p><img src="https://pic1.zhimg.com/80/b6ae78d0dfafa7b3f0b66848e40cc9ce_720w.jpg?source=1940ef5c" alt="img"></p><a id="more"></a><h2 id="docker-网络"><a href="#docker-网络" class="headerlink" title="docker 网络"></a>docker 网络</h2><p>首先需要了解，docker 内置的三种网络架构</p><pre class="line-numbers language-shell"><code class="language-shell">$ docker network ls5a6eb0dbf210        bridge              bridge              local06e92e3d36fc        host                host                local325b6c89555c        none                null                local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>bridge 桥接模式</li><li>host 直连使用宿主机网络栈，不开启 Network Namespace</li><li>none 不进行设置，网络为隔离状态</li></ul><h3 id="Bridge-Network"><a href="#Bridge-Network" class="headerlink" title="Bridge Network"></a>Bridge Network</h3><p>docker 会默认在宿主机上创建一个 docker0 网桥，实现连接在 docker0 网桥上的容器通讯。而容器与 docker0 网桥的连接需要通过 Veth Pire 虚拟设备，它的特点是：总是成对出现，并且会将一头网卡的数据包转发到另一头网卡，即使这两个网卡在不同的 Network Namespace。</p><p>docker 使用 Veth Pire 和 docker0 组成三层交换机，实现数据传输：</p><ol><li>物理层 — veth pire</li><li>链路层 — 网桥 docker0 — 交换机</li><li>网络层 — 根据 IP 地址进行通讯 — 路由器</li></ol><h2 id="测试容器网络连接"><a href="#测试容器网络连接" class="headerlink" title="测试容器网络连接"></a>测试容器网络连接</h2><p>创建用于测试的 2 个不同 network namespace 的 container，查看 2 个 container 的 ip 地址，并且进行 ping 验证是否能连接</p><pre class="line-numbers language-shell"><code class="language-shell"># 创建容器$ docker run -d --name busybox-1 busybox tail -f$ docker run -d --name busybox-2 busybox tail -f# 查看 container ip 地址$ docker inspect bridge  "Containers": {            "2942d0f9f19de0eda505d8da0c7a6be0ddffc0e35059426578e0465e7cb00a91": {                "Name": "busybox-2",                "EndpointID": "16c3871e1470cb0924297e33acc7c6ba2cda8366673a2daf73d2862d7e8c4b1e",                "MacAddress": "02:42:ac:11:00:03",                "IPv4Address": "172.17.0.3/16",                "IPv6Address": ""            },            "cb5f1945a02f28074367c07b641b0291f29d5e854add13f12960930952cc390e": {                "Name": "busybox-1",                "EndpointID": "37b30e6b22463208edf0de8458a55218712ff4752413cded81e7b8e9c28976e2",                "MacAddress": "02:42:ac:11:00:02",                "IPv4Address": "172.17.0.2/16",                "IPv6Address": ""            }        },# 验证网络连接$ docker exec busybox-1 ping 172.17.0.3PING 172.17.0.3 (172.17.0.3): 56 data bytes64 bytes from 172.17.0.3: seq=0 ttl=64 time=0.456 ms64 bytes from 172.17.0.3: seq=1 ttl=64 time=0.064 ms64 bytes from 172.17.0.3: seq=2 ttl=64 time=0.059 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="宿主机网络"><a href="#宿主机网络" class="headerlink" title="宿主机网络"></a>宿主机网络</h3><p>以下宿主机输出内容去除了部分无关信息，发现宿主机上多了 docker0 网桥和两个 Veth Pire 虚拟设备，并且通过指令可以看到 2 个虚拟设备已经和 docker0 完成连接</p><pre class="line-numbers language-shell"><code class="language-shell">$ ifconfigdocker0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255        inet6 fe80::42:19ff:feef:cd35  prefixlen 64  scopeid 0x20<link>        ether 02:42:19:ef:cd:35  txqueuelen 0  (Ethernet)        RX packets 1  bytes 28 (28.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 5  bytes 446 (446.0 B)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0veth99590bf: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500        inet6 fe80::d0b1:feff:fec3:dcd3  prefixlen 64  scopeid 0x20<link>        ether d2:b1:fe:c3:dc:d3  txqueuelen 0  (Ethernet)        RX packets 0  bytes 0 (0.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 15  bytes 1242 (1.2 KB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0vethb91c825: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500        inet6 fe80::d836:cbff:fe89:985a  prefixlen 64  scopeid 0x20<link>        ether da:36:cb:89:98:5a  txqueuelen 0  (Ethernet)        RX packets 0  bytes 0 (0.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 14  bytes 1152 (1.1 KB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0$ apt install bridge-utils# 查看网桥信息一bridge name    bridge id        STP enabled    interfacesdocker0        8000.0242f88d9fbd    no        veth99590bf                                        vethb91c825# 查看网络连接方式二$ ip link show3: docker0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP mode DEFAULT group default149: veth5b40cb5@if148: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP mode DEFAULT group default    link/ether 4e:06:30:16:4a:0e brd ff:ff:ff:ff:ff:ff link-netnsid 2151: veth099d3cd@if150: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP mode DEFAULT group default    link/ether 2a:a6:6d:61:a1:fe brd ff:ff:ff:ff:ff:ff link-netnsid 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="容器网络"><a href="#容器网络" class="headerlink" title="容器网络"></a>容器网络</h3><p>进入 container busybox-1 查看网络信息，可以看到 container 的 etho 网卡是连接在宿主机上的 149 veth pire 虚拟设备上，也就是说通过 etho 的数据包最终会发到宿主机的 docker0 上进行处理</p><pre class="line-numbers language-shell"><code class="language-shell">$ ifconfigeth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:04          inet addr:172.17.0.4  Bcast:172.17.255.255  Mask:255.255.0.0          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1          RX packets:11 errors:0 dropped:0 overruns:0 frame:0          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:0          RX bytes:866 (866.0 B)  TX bytes:0 (0.0 B)lo        Link encap:Local Loopback          inet addr:127.0.0.1  Mask:255.0.0.0          UP LOOPBACK RUNNING  MTU:65536  Metric:1          RX packets:0 errors:0 dropped:0 overruns:0 frame:0          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:1000          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)$ cat /sys/class/net/eth0/iflink149$ routeKernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Ifacedefault         172.17.0.1      0.0.0.0         UG    0      0        0 eth0172.17.0.0      *               255.255.0.0     U     0      0        0 eth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入 container busybox-2 查看网络，发现结果也一样</p><pre class="line-numbers language-shell"><code class="language-shell">$ ifconfigeth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1          RX packets:11 errors:0 dropped:0 overruns:0 frame:0          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:0          RX bytes:866 (866.0 B)  TX bytes:0 (0.0 B)lo        Link encap:Local Loopback          inet addr:127.0.0.1  Mask:255.0.0.0          UP LOOPBACK RUNNING  MTU:65536  Metric:1          RX packets:0 errors:0 dropped:0 overruns:0 frame:0          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:1000          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)$ cat /sys/class/net/eth0/iflink151<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网络架构"><a href="#网络架构" class="headerlink" title="网络架构"></a>网络架构</h3><p><img src="https://static001.geekbang.org/resource/image/e0/66/e0d28e0371f93af619e91a86eda99a66.png" alt="img"></p><h2 id="简述单机容器网络数据包发送流程"><a href="#简述单机容器网络数据包发送流程" class="headerlink" title="简述单机容器网络数据包发送流程"></a>简述单机容器网络数据包发送流程</h2><p>容器之间如果需要进行网络通讯，则需要拿到目标地址的 ip 和 MAC 地址</p><ol><li>busybox-1 通过内部的 etho 网卡发送一个 ARP 广播，数据包（包含目标地址 IP）通过二层网络到达宿主机 docker0 网卡进行广播，而 busybox-2 也是 eth0 网卡也通过 veth pire 连接在 docker0 上，所以收到消息后将 172.17.0.2 的 MAC 地址回复给 busybox-1。</li><li>有了 MAC 地址后，busybox-1 就会将数据包通过 eth0 网卡发送到 docker0 上</li><li>docker0 根据它的 CAM 表查到对应端口为：veth099d3cd，然后把数据包发往这个端口，此端口会将接收的数据发送到 busybox-2 内的 eth0 网卡</li></ol><p>在宿主机上查看网络转发日志，验证数据转发流程</p><pre class="line-numbers language-shell"><code class="language-shell">$ iptables -t raw -A OUTPUT -p icmp -j TRACE$ iptables -t raw -A PREROUTING -p icmp -j TRACE$ cat /var/log/kern.logSep  4 02:39:10 k8s-master kernel: [ 1293.325796] TRACE: filter:FORWARD:rule:1 IN=docker0 OUT=docker0 PHYSIN=vethb91c825 PHYSOUT=veth99590bf MAC=02:42:ac:11:00:02:02:42:ac:11:00:03:08:00 SRC=172.17.0.3 DST=172.17.0.2 LEN=84 TOS=0x00 PREC=0x00 TTL=64 ID=15820 PROTO=ICMP TYPE=0 CODE=0 ID=1536 SEQ=504<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT认证模式介绍和原理分析</title>
      <link href="/2020/08/03/jwt-ren-zheng-mo-shi-jie-shao-he-yuan-li-fen-xi/"/>
      <url>/2020/08/03/jwt-ren-zheng-mo-shi-jie-shao-he-yuan-li-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>用户提供用户名和密码给认证服务器，服务器验证用户提交的信息的合法性，如果验证成功则返回一个 token , 用户可以使用这个 token 访问服务器上受保护的资源。</p><p>示例代码：<a href="https://github.com/ddzyan/node-project/tree/master/jwt-auth" target="_blank" rel="noopener">https://github.com/ddzyan/node-project/tree/master/jwt-auth</a></p><h3 id="token-结构"><a href="#token-结构" class="headerlink" title="token 结构"></a>token 结构</h3><pre><code>header.claims.signature</code></pre><p>为了安全的在 url 中使用，所有部分都用 base64 URL-safe 进行编码处理</p><h4 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h4><p>简单声明了类型以及产生签名所使用的算法</p><pre><code>{  &quot;alg&quot; : &quot;AES256&quot;,  &quot;typ&quot; : &quot;JWT&quot;}</code></pre><a id="more"></a><h4 id="Claims-声明"><a href="#Claims-声明" class="headerlink" title="Claims 声明"></a>Claims 声明</h4><p>表示要发送的用户详细信息。</p><pre><code>{  &quot;sub&quot;: &quot;1234567890&quot;,  &quot;name&quot;: &quot;John Doe&quot;,  &quot;admin&quot;: true}</code></pre><h4 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h4><p>签名的目的是为了保证上边两部分信息不被篡改。一般使用一个私钥通过非对称加密算法对 Header 和 Claims 进行混淆产生签名信息。</p><p>一般有两个选择：</p><ol><li>HS256</li><li>RS256</li></ol><p>RS256 (采用 SHA-256 的 RSA 签名) 是一种非对称算法, 它使用公共/私钥对: 标识提供方采用私钥生成签名, JWT 的使用方获取公钥以验证签名。</p><p>HS256 (带有 SHA-256 的 HMAC 是一种对称算法, 双方之间仅共享一个 密钥。由于使用相同的密钥生成签名和验证签名, 因此必须注意确保密钥不被泄密</p><p>在开发应用的时候启用 JWT，使用 RS256 更加安全，可以将公钥提供给 JWT 使用方进行解密验签，而无需担心私钥丢失。而如果使用 HS256 则必须将密钥提供给 JWT 使用方进行验签，从而可能导致私钥丢失或者泄漏。</p><p><img src="https://raw.githubusercontent.com/lin-xin/blog/master/jwt-demo/public/jwt.png" alt="image"></p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>服务器无状态化，可用于多台服务器之间的登录</li><li>减少客户端登录次数，降低服务器压力</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>用于加密的密钥如果破解，则用户可以随意伪造</li><li>由于客户端保存认证信息，则服务器认证通过后，在一段时间内将无法取消用户登录权限</li></ul><h3 id="node-模块"><a href="#node-模块" class="headerlink" title="node 模块"></a>node 模块</h3><ul><li>jsonwebtoken</li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>egg-graphQL源码分析</title>
      <link href="/2020/07/14/egg-graphql-yuan-ma-fen-xi/"/>
      <url>/2020/07/14/egg-graphql-yuan-ma-fen-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>egg-graphQL 是 egg 的 graphQL 插件，规范化 GraphQL API 实现，自动创建 schema ，挂载 koa middleware 处理 GraphQL 请求，并且提供创建 GraphQL 开发者工具</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="项目依赖模块分析"><a href="#项目依赖模块分析" class="headerlink" title="项目依赖模块分析"></a>项目依赖模块分析</h4><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"apollo-server-koa"</span><span class="token operator">:</span> <span class="token string">"2.0.4"</span><span class="token punctuation">,</span>    <span class="token property">"apollo-server-module-graphiql"</span><span class="token operator">:</span> <span class="token string">"1.4.0"</span><span class="token punctuation">,</span>    <span class="token property">"graphql"</span><span class="token operator">:</span> <span class="token string">"0.13.2"</span><span class="token punctuation">,</span>    <span class="token property">"graphql-tools"</span><span class="token operator">:</span> <span class="token string">"3.1.1"</span><span class="token punctuation">,</span>    <span class="token property">"lodash"</span><span class="token operator">:</span> <span class="token string">"^4.17.10"</span><span class="token punctuation">,</span>    <span class="token property">"lru-cache"</span><span class="token operator">:</span> <span class="token string">"^4.1.2"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>apollo-server-koa：apollo 提供的服务端 GraphQL 开源模块种 nodejs-koa 的实现方式</p><p>apollo-server-module-graphiql ：apollo 提供的 GraphQL 开发者工具</p><p>graphql-tools：提供更好的创建 GraphQL schema 的方法</p><h4 id="项目核心代码结构"><a href="#项目核心代码结构" class="headerlink" title="项目核心代码结构"></a>项目核心代码结构</h4><pre><code>.├── agent.js├── app│   ├── extend│   │   └── context.js│   ├── middleware│   │   └── graphql.js│   └── service│       └── graphql.js├── app.js├── config│   └── config.default.js├── lib│   ├── graphql-tag.js│   ├── load_connector.js│   ├── load_schema.js│   └── util.js├── package.json</code></pre><a id="more"></a><h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><p>执行属顺序：load config.js ,extends –&gt; load agent.js —&gt; load start app.js –&gt; load app/service —&gt; load middleware</p><p>以上步骤略有省略，去除了源代码种未涉及的内容</p><p>app.js 和 agent.js 都只做了 两件相同的事情，在项目启动时挂载如下内容</p><ol><li>挂载 schema 属性到 app 对象</li><li>挂载 connectorClass 属性到 app 对象</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token string">'use strict'</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./lib/load_schema'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./lib/load_connector'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>load_schema.js 核心代码，遍历 Graphql 目录下文件，获取指定参数属性，执行 makeExecutableSchema 返回</p><pre class="line-numbers language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token string">'schema'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">[</span>SYMBOL_SCHEMA<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      resolverFactories<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolverFactory<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>        _<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>resolverMap<span class="token punctuation">,</span> <span class="token function">resolverFactory</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">[</span>SYMBOL_SCHEMA<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">makeExecutableSchema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        typeDefs<span class="token punctuation">:</span> schemas<span class="token punctuation">,</span>        resolvers<span class="token punctuation">:</span> resolverMap<span class="token punctuation">,</span>        directiveResolvers<span class="token punctuation">:</span> directiveMap<span class="token punctuation">,</span>        schemaDirectives<span class="token punctuation">:</span> schemaDirectivesProps<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>SYMBOL_SCHEMA<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>load_connector.js 遍历 Graphql 目录下文件所有 connector.js，创建 Map 对象返回，key 为 connector.js 上级目录，value 为 connector.js 导出的方法</p><pre class="line-numbers language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token string">'connectorClass'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">[</span>SYMBOL_CONNECTOR_CLASS<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> classes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      types<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> connectorFile <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>basePath<span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token string">'connector.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* istanbul ignore else */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>connectorFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> Connector <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>connectorFile<span class="token punctuation">)</span><span class="token punctuation">;</span>          classes<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span> Connector<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">[</span>SYMBOL_CONNECTOR_CLASS<span class="token punctuation">]</span> <span class="token operator">=</span> classes<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>SYMBOL_CONNECTOR_CLASS<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据如上加载规则，则项目文件格式则有特殊的含义：</p><ol><li>schema.graphql ：采用 SDL 编写的 schema</li><li>resolver.js ：解析器，对应 schema 的字段，一般在此调用 connector</li><li>connector.js : 连接器，可以直接调用 ctx 对象，一般在这调用 service 或者逻辑处理</li><li>directive：指令，在解析器处理之前运行，一般处理一些通用操作，例如参数验证，权限验证等</li></ol><p>app/extend/context.js 为 ctx 对象添加方法：</p><ol><li>获取 service.graphql 类的所有方法</li><li>获得所有在 app.connectorClass 对象</li></ol><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取所有连接器，app.connectorClass 已经在 app.js/agent.js挂载</span>  <span class="token keyword">get</span> <span class="token function">connector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 单例模式，判断是否已经存在，避免重复遍历</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">[</span>SYMBOL_CONNECTOR<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> connectors <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>type<span class="token punctuation">,</span> Class<span class="token punctuation">]</span> <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>app<span class="token punctuation">.</span>connectorClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实例化 connector 对象，并且传入 ctx</span>        connectors<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">[</span>SYMBOL_CONNECTOR<span class="token punctuation">]</span> <span class="token operator">=</span> connectors<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>SYMBOL_CONNECTOR<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> <span class="token function">graphql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>service<span class="token punctuation">.</span>graphql<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>app/middleware/graphql.js 使用 apollo-server-koa 模块的中间件 处理 GraphQL API 路径下的请求</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> graphqlKoa <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'apollo-server-koa/dist/koaApollo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> resolveGraphiQLString <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'apollo-server-module-graphiql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">graphiqlKoa</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> query <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>query<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">resolveGraphiQLString</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> options<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>graphiqlString<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      ctx<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> graphiqlString<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> app<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> options <span class="token operator">=</span> app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>graphql<span class="token punctuation">;</span>  <span class="token keyword">const</span> graphQLRouter <span class="token operator">=</span> options<span class="token punctuation">.</span>router<span class="token punctuation">;</span>  <span class="token keyword">let</span> graphiql <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>graphiql <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    graphiql <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 捕获在config.graphql.router 设定的路由，因为所有 GraphQL 接口都走一个路由</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>path <span class="token operator">===</span> graphQLRouter<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ....</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> onPreGraphiQL<span class="token punctuation">,</span> onPreGraphQL<span class="token punctuation">,</span> apolloServerOptions <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 执行配置的GraphiQL钩子函数</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">accepts</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'json'</span><span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'html'</span> <span class="token operator">&amp;&amp;</span> graphiql<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>onPreGraphiQL<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">await</span> <span class="token function">onPreGraphiQL</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 返回开发者平台路径</span>        <span class="token keyword">return</span> <span class="token function">graphiqlKoa</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          endpointURL<span class="token punctuation">:</span> graphQLRouter<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 执行配置的GraphQL钩子函数</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>onPreGraphQL<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">await</span> <span class="token function">onPreGraphQL</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">const</span> serverOptions <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> apolloServerOptions<span class="token punctuation">,</span> <span class="token punctuation">{</span>        schema<span class="token punctuation">:</span> app<span class="token punctuation">.</span>schema<span class="token punctuation">,</span>        context<span class="token punctuation">:</span> ctx<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">graphqlKoa</span><span class="token punctuation">(</span>serverOptions<span class="token punctuation">)</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>apollo-server-koa 涉及的 graphqlKoa 源代码，主要为获取 ctx 中的属性和根据 GraphQL 的配置，处理请求并且返回</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">KoaHandler</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> Koa<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> next<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> declare <span class="token keyword">function</span> <span class="token function">graphqlKoa</span><span class="token punctuation">(</span>options<span class="token punctuation">:</span> GraphQLOptions <span class="token operator">|</span> KoaGraphQLOptionsFunction<span class="token punctuation">)</span><span class="token punctuation">:</span> KoaHandler<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">graphqlKoa</span><span class="token punctuation">(</span>  options<span class="token punctuation">:</span> GraphQLOptions <span class="token operator">|</span> KoaGraphQLOptionsFunction<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span> KoaHandler <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//...</span>  <span class="token keyword">const</span> graphqlHandler <span class="token operator">=</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> Koa<span class="token punctuation">.</span>Context<span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">runHttpQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span>ctx<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      method<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>method<span class="token punctuation">,</span>      options<span class="token punctuation">:</span> options<span class="token punctuation">,</span>      query<span class="token punctuation">:</span>        ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'POST'</span>          <span class="token operator">?</span> <span class="token comment" spellcheck="true">// fallback to ctx.req.body for koa-multer support</span>            ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body <span class="token operator">||</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>req <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>body          <span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>query<span class="token punctuation">,</span>      request<span class="token punctuation">:</span> <span class="token function">convertNodeHttpToRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>req<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span><span class="token punctuation">{</span> graphqlResponse<span class="token punctuation">,</span> responseInit <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>responseInit<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span>          ctx<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> responseInit<span class="token punctuation">.</span>headers<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> graphqlResponse<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">(</span>error<span class="token punctuation">:</span> HttpQueryError<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'HttpQueryError'</span> <span class="token operator">!==</span> error<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> error<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>headers<span class="token punctuation">)</span> <span class="token punctuation">{</span>          Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>header <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            ctx<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>header<span class="token punctuation">,</span> error<span class="token punctuation">.</span>headers<span class="token punctuation">[</span>header<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> error<span class="token punctuation">.</span>statusCode<span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> graphqlHandler<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> egg </tag>
            
            <tag> graphQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GraphQL扫盲</title>
      <link href="/2020/07/10/graphqlia/"/>
      <url>/2020/07/10/graphqlia/</url>
      
        <content type="html"><![CDATA[<h2 id="GraphQL-简介"><a href="#GraphQL-简介" class="headerlink" title="GraphQL 简介"></a>GraphQL 简介</h2><p>参考资料：</p><ol><li><a href="https://juejin.im/post/5d5d2f9ef265da03c02c06ed#heading-25" target="_blank" rel="noopener">https://juejin.im/post/5d5d2f9ef265da03c02c06ed#heading-25</a></li><li><a href="https://graphql.cn/" target="_blank" rel="noopener">https://graphql.cn/</a></li><li><a href="https://www.apollographql.com/" target="_blank" rel="noopener">https://www.apollographql.com/</a></li></ol><p>实例项目：</p><ol><li><a href="https://github.com/ddzyan/graphql-koa-demo" target="_blank" rel="noopener">https://github.com/ddzyan/graphql-koa-demo</a></li></ol><p>常见依赖模块：</p><ol><li>graphql-compose</li><li>graphql-compose-mongoose</li><li>graphql</li><li>apollo-server-koa</li><li>dataloader</li><li>egg-graphql</li></ol><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>GraphQL 是一种用于 API 的查询语言，对 API 中的数据提供一套易于理解的完整描述，使得客户端能够准确获得它需要的数据，没有任何冗余，也让 API 更容易随着时间推移而演进，还能构建强大的开发者工具（来自官网介绍）</p><a id="more"></a><h3 id="有什么用"><a href="#有什么用" class="headerlink" title="有什么用"></a>有什么用</h3><p>在传统 restful 接口开发上，一个功能的开发需要服务端开发人员定义好接口访问方式和返回的消息体，客户端对接后才能进行开发。所有的服务端接口在持续开发中，需要开发人员不断更新迭代，并且同步客户端开发人员保持一致。这当中存在如下问题：</p><ol><li>需要编写接口文档，并且进行单独保存</li><li>在长期开发中需要保障接口文档的一致性</li><li>根据不同版本维护多个 API 文档</li><li>需要描述接口所有可能返回的值</li></ol><p>现在可以通过客户端和服务端共享一份数据描述规范：</p><ol><li>数据描述规范也是代码的一部分，参与 API 功能</li><li>数据描述规范本身就是文档，不需要单独编写，维护和迭代</li><li>服务端所有的修改，数据描述规范也将发生变化，无需担心不一致问题</li><li>数据描述规范可以体现应用的结构图，方便客户端快速理解</li></ol><p>GraphQL 就是这样的一种数据描述规范</p><h3 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h3><p>数据描述规范包含：数据类型和字段</p><p>一个 GraphQL 服务通过定义类数据描述规范创建，然后给数据描述规范的每个类型的每个字段提供解析函数。</p><p>GraphQL 的数据描述规范通过 schema 语法编写（schema Definition Language SDL）：</p><pre><code>type Query {  book:Book}enum BookStatus {  DELETED  NORMAL}type Book {  id:ID  name:String!  prire:Float  status:BookStatus}</code></pre><p>解析如下：</p><ol><li>Book 称为对象类型 object type</li><li>id,name 称为字段 field</li><li>ID,String 标量类型 scalar type</li><li>enum 枚举类型 enum type</li><li>! 类型描述符 不可为空</li></ol><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>SDL 内置了三个特殊的对象类型，分别为：</p><ol><li>Query 查询</li><li>Mutation 修改</li><li>Subscription 定义长链接(不常用)</li></ol><p>SDL 有一些基础数据类型如下(支持自定义数据类型)：</p><ol><li>Int 有符号 32 位整型</li><li>Float 有符号双精度浮点型</li><li>String UTF-8 字符</li><li>Boolean true/false</li><li>ID 唯一标识，经常用于重新获取一个对象或缓存的 KEY(重要)</li></ol><p>还有一些高级内容如下：</p><ol><li>interface</li><li>union types</li></ol>]]></content>
      
      
      <categories>
          
          <category> GraphQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GraphQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose部署eak</title>
      <link href="/2020/07/09/docker-compose-bu-shu-eak/"/>
      <url>/2020/07/09/docker-compose-bu-shu-eak/</url>
      
        <content type="html"><![CDATA[<h3 id="ELK安装"><a href="#ELK安装" class="headerlink" title="ELK安装"></a>ELK安装</h3><pre class="line-numbers language-shell"><code class="language-shell">git clone https://github.com/deviantony/docker-elk.gitcd docker-elk# 后台守护进程模式启动所有服务docker-compose up -d# 检查服务状态docker psCONTAINER ID        IMAGE                      COMMAND                  CREATED             STATUS              PORTS                                                                              NAMESe306f6fae7bf        docker-elk_kibana          "/usr/local/bin/dumb…"   16 seconds ago      Up 14 seconds       0.0.0.0:5601->5601/tcp                                                             docker-elk_kibana_1e906b1d1b8db        docker-elk_logstash        "/usr/local/bin/dock…"   16 seconds ago      Up 14 seconds       0.0.0.0:5000->5000/tcp, 0.0.0.0:9600->9600/tcp, 0.0.0.0:5000->5000/udp, 5044/tcp   docker-elk_logstash_1f32071efd7f3        docker-elk_elasticsearch   "/tini -- /usr/local…"   16 seconds ago      Up 15 seconds       0.0.0.0:9200->9200/tcp, 0.0.0.0:9300->9300/tcp                                     docker-elk_elasticsearch_1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开浏览器地址：<a href="http://127.0.0.1:5601/" target="_blank" rel="noopener">http://127.0.0.1:5601/</a></p><p>账号：elastic</p><p>密码：changeme</p><a id="more"></a><h4 id="Elasticsearch-配置修改"><a href="#Elasticsearch-配置修改" class="headerlink" title="Elasticsearch 配置修改"></a>Elasticsearch 配置修改</h4><p>docker-compose.yml</p><p>设置最大堆的值不能超过你物理内存的50%，要确保有足够多的物理内存来保证内核文件缓存。</p><pre class="line-numbers language-sh"><code class="language-sh">elasticsearch:  environment:    ES_JAVA_OPTS: "-Xmx256m -Xms256m" <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Kibana-配置修改"><a href="#Kibana-配置修改" class="headerlink" title="Kibana 配置修改"></a>Kibana 配置修改</h4><p>docker-compose.yml</p><pre><code>kibana  environment:    I18N_LOCALE: &quot;zh-CN&quot;</code></pre><p>设置中文</p><hr><h3 id="APM安装"><a href="#APM安装" class="headerlink" title="APM安装"></a>APM安装</h3><pre class="line-numbers language-shell"><code class="language-shell">cd /optcurl -L -O https://artifacts.elastic.co/downloads/apm-server/apm-server-7.8.0-x86_64.rpmsudo rpm -vi apm-server-7.8.0-x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改apm-server.yml配置文件</p><pre><code># vim /etc/apm-server/apm-server.yml[apm-server.yml]apm-server:  host: &quot;0.0.0.0:8200&quot;kibana:  enabled: true  host: &quot;localhost:5601&quot;  protocol: &quot;http&quot;  username: &quot;elastic&quot;  password: &quot;changeme&quot;output.elasticsearch:  hosts: [&quot;localhost:9200&quot;]  username: &quot;elastic&quot;  password: &quot;changeme&quot;</code></pre><pre class="line-numbers language-启动"><code class="language-启动">service apm-server start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入后台 <a href="http://127.0.0.1:5601/" target="_blank" rel="noopener">http://127.0.0.1:5601/</a>, 检查apm服务是否正常，点击 check apm server status</p><p><img src="https://i.imgur.com/SBc0yea.png" alt></p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>请在 kibana 启动完毕后，再启动 apm-server 服务，可以通过访问: <a href="http://127.0.0.1:5601/" target="_blank" rel="noopener">http://127.0.0.1:5601/</a>, 确认kibana状态</p><h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><p>操作步骤，注意密码必须为string:</p><ol><li>修改 docker-compose.yml 中 elasticsearch 的环境变量 ELASTIC_PASSWORD</li><li>修改 logstash/config/logstash.yml 中密码</li><li>修改 kibana/config/kibana.yml 中密码</li><li>修改 /etc/apm-server/apm-server.yml </li></ol><pre class="line-numbers language-sh"><code class="language-sh">service apm-server restartdocker-compose restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="服务端口"><a href="#服务端口" class="headerlink" title="服务端口"></a>服务端口</h4><ol><li>5000: Logstash TCP input.</li><li>9200: Elasticsearch HTTP</li><li>9300: Elasticsearch TCP transport</li><li>5601: Kibana</li><li>8200: APM</li></ol><h3 id="修改-kibana日志时间格式"><a href="#修改-kibana日志时间格式" class="headerlink" title="修改 kibana日志时间格式"></a>修改 kibana日志时间格式</h3><p><a href="http://127.0.0.1:5601/app/kibana#/management/kibana/settings" target="_blank" rel="noopener">http://127.0.0.1:5601/app/kibana#/management/kibana/settings</a></p><p>找到 Advanced Settings–&gt;Date format 修改这里的值，默认是MMMM Do YYYY, HH:mm:ss.SSS,可以改成YYYY-MM-DD HH:mm:ss.SSS，这样页面的所有日期就会显示成2019-04-23 16:30:39.139这种格式</p>]]></content>
      
      
      <categories>
          
          <category> elk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> elk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-rabbitMq</title>
      <link href="/2020/06/26/node-rabbitmq/"/>
      <url>/2020/06/26/node-rabbitmq/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>此文章内容核心为 nodejs 如何实现 <a href="https://github.com/ddzyan/node-amqplib" target="_blank" rel="noopener">rabbitMq 的五种常见的工作模式</a>，其余内容来自于百度/谷歌。</p><h2 id="RabbitMq-环境创建"><a href="#RabbitMq-环境创建" class="headerlink" title="RabbitMq 环境创建"></a>RabbitMq 环境创建</h2><h3 id="docker-构建"><a href="#docker-构建" class="headerlink" title="docker 构建"></a>docker 构建</h3><pre class="line-numbers language-shell"><code class="language-shell"># 拉去镜像 management 为带管理界面docker pull rabbitmq:management# 启动docker run -dit --name Myrabbitmq -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p 15672:15672 -p 5672:5672 rabbitmq:management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>RabbitMQ 后台管理界面地址：<a href="http://192.168.100.117:15672" target="_blank" rel="noopener">http://192.168.100.117:15672</a></p><p>默认账号：admin</p><p>默认密码：admin</p><p>nodejs 参考代码：<a href="https://github.com/ddzyan/node-amqplib" target="_blank" rel="noopener">https://github.com/ddzyan/node-amqplib</a></p><a id="more"></a><h2 id="RabbitMQ-核心内容"><a href="#RabbitMQ-核心内容" class="headerlink" title="RabbitMQ 核心内容"></a>RabbitMQ 核心内容</h2><p>rabbitMq 采用的消息体为 amqp(advance message queue protocol)高级消息队列协议，支持 restFul-Api 调用，支持跨语言。</p><p>消息队列的主要作用：</p><ol><li>服务解耦：承担微服务之间的消息通讯</li><li>任务异步：将任务推送到消息队列种集中处理，不影响主进程处理进度。</li><li>流量削峰：定时定量统一处理任务，防止因为高流量导致服务奔溃。</li></ol><h3 id="5-种工作模式"><a href="#5-种工作模式" class="headerlink" title="5 种工作模式"></a>5 种工作模式</h3><h4 id="简单模式-hello-word"><a href="#简单模式-hello-word" class="headerlink" title="简单模式(hello word)"></a>简单模式(hello word)</h4><p>生产者 P 往一个消息通道 Q 发送消息，并且由一个消费者 C 进行消费</p><p><img src="https://i.imgur.com/rGIqlf3.png" alt="简单模式"></p><h4 id="工作模式-work"><a href="#工作模式-work" class="headerlink" title="工作模式(work)"></a>工作模式(work)</h4><p>生产者 P 往一个消息通道 Q 发送消息，并且由多个消费者 C 按照绑定顺序依次消费</p><p><img src="https://i.imgur.com/awHUM0h.png" alt="工作模式"></p><h4 id="订阅模式-publish-subcribe"><a href="#订阅模式-publish-subcribe" class="headerlink" title="订阅模式(publish/subcribe)"></a>订阅模式(publish/subcribe)</h4><p>生产者 P 往交换机 X 发送消息，交换机根据设定的交换机类型，将符合条件的信息发送到绑定的队列 Q，绑定指定队列的消费者 C 接收和处理消息</p><p>消息不再直接发送给队列，而是发送给交换机，由交换机推送到指定队列。但是交换机不具备存储消息的能力，所以如果没有符合条件的队列，则消息将丢失。</p><p>如果声明多个相同名称的队列，并且都绑定到同一个交换机上，则发到交换机上此队列名称的消息，将发送完全相同的数据到这多个相同名称的队列中。</p><p>常见的交换机类型：</p><ol><li>fanout：广播，将消息发送给所有绑定交换机的队列</li><li>topic：通配符，将消息发送给符合 routing parrtem 的队列种</li><li>direct：定向，将消息发送给指定的 routing key 队列种</li></ol><p><img src="https://i.imgur.com/DMdhQIq.png" alt="发布订阅模式"></p><h4 id="路由模式-router"><a href="#路由模式-router" class="headerlink" title="路由模式(router)"></a>路由模式(router)</h4><p>生产者 P 往交换机 X 发送消息，交换机再往符合条件的路由队列发送消息，绑定指定队列的消费者 C 接收和处理消息</p><p><img src="https://i.imgur.com/dop27sq.png" alt="路由模式"></p><h4 id="通配符模式-topic"><a href="#通配符模式-topic" class="headerlink" title="通配符模式(topic)"></a>通配符模式(topic)</h4><p>核心逻辑与路由模式基本相同，区别在于路由模式生产者只能让交换机将消息发送给完全匹配路由的消息队列，而通配符模式可以进行路由匹配，会将消息发送给所有满足匹配规则的消息队列。</p><ol><li><p>通配符#可以匹配多个路由，例如 log.#则可以同时匹配 log.info,log.info.add,log.warn 路由</p></li><li><p>通配符*则只能匹配到一个，例如 log.*则只能匹配 log.info，不能匹配 log.info.add</p></li></ol><p>一般常用#来进行多个路由匹配</p><p><img src="https://i.imgur.com/1fQJo83.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs之buffer与stream</title>
      <link href="/2020/03/19/nodejs-zhi-buffer-yu-stream/"/>
      <url>/2020/03/19/nodejs-zhi-buffer-yu-stream/</url>
      
        <content type="html"><![CDATA[<h3 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h3><p>buffer 使用从磁盘读取保存的临时空间，用于文件操作，二进制数据处理。</p><p>buffer 一个堆外内存，不通过v8引擎进行分配，而是由node的c++层面提供，node层面进行操作。内存申请操作如下：</p><ol><li>当申请的内存小于8kb的时候，会与现实申请一个固定存储(8kb)区域，用于保存数据。</li><li>当下一个申请的内存也小于8kb的时候，会进行判断上一个申请的固定存储区域剩余空间是否足够，不够则会申请一个新的固定存储区域，用于存储，上一个空间的剩余部分则不会被使用，直到存储的数据被释放，固定存储区域则会被释放（小数据内存采用预先申请，事后分配，减少了node于系统之间的申请和调用操作）</li><li>当申请的内存大于8kb的时候，会直接申请一个指定大小的存储区域，用于保存数据（大数据由c++层面提供，不需要事后分配）</li></ol><p>使用场景：</p><ol><li>网络数据传输的时候，采用buffer会比使用string更有效率</li><li>文件操作，例如下面要讲到的stream</li></ol><a id="more"></a><h3 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h3><p>通过以上内容了解到，buffer只能在定义的时候申请到指定大小的存储区域，如果保存的数据太大，则会造成内存溢出。</p><p>stream 是i/o，网络操作进行传输的数据。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">const</span> readStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">'./data.txt'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        highWaterMark<span class="token punctuation">:</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1024</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    readStream<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lissten</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fs.createReadStream的工作方式是在内存中预先创建一个buffer对象(大小由highWaterMark控制)，然后通过fs.read()读取时逐步将磁盘中的字节复制到buffer中。完成一次读取时候，会从这个buffer中通过slice()方法取出部分数据作为一个小buffer对象，再通过data事件传递给调用方。如果buffer用完，则重新申请；如果还有剩余，则继续使用。</p><p>每次读取的指定长度由 highWaterMark 设定，所以 highWaterMark 大小会影响触发 data 事件的次数。值越大，读取速度越快。</p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql主要引擎区别</title>
      <link href="/2020/03/11/mysql-zhu-yao-yin-qing-qu-bie/"/>
      <url>/2020/03/11/mysql-zhu-yao-yin-qing-qu-bie/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>通过梳理了解 mysql innodb 和 myisam 两个主要存储引擎的区别。</p><ol><li>事务<ol><li>innodb 管理事务表，支持4个隔离级别，如果应用需要进行大量的写操作时推荐使用，可以有效提高多用户的并发操作能力。</li><li>myisam 管理非事务表，支持高效的存储和检索，以及全文的搜索。如果应用需要进行大量的读操作时候推荐使用。</li></ol></li><li>索引<ol><li>innodb<ol><li>使用聚合索引，一个数据库需要在本地存储2个文件，分别为：表结构和数据索引文件</li><li>使用的是B+TREE数据结构，子节点保存的是行数据</li><li>本地存储文件较小</li></ol></li><li>myisam<ol><li>使用非聚合索引，一个数据库需要在本地存储3个文件，分别为：表结构文件，索引文件和数据文件</li><li>使用的是B+TREE数据结构，子节点保存的是行指针，需要根据指针回原表查询获取行数据</li><li>本地存储文件较大</li></ol></li></ol></li><li>锁<ol><li>innodb 默认采用行锁，但是查询如果没有使用索引或者索引失效，则会自动将行锁转换为表锁</li><li>myisam 默认采用表锁</li></ol></li><li>使用场景<ol><li>innodb<ol><li>需要事务</li><li>数据需要进行频繁的更新</li><li>并发度高</li><li>对数据一致性要求较高</li></ol></li><li>myisam<ol><li>不需要事务</li><li>数据不需要进行频繁更新</li><li>并发度低</li><li>对数据一致性要求较低</li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 存储引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql事务机制</title>
      <link href="/2020/03/11/mysql-shi-wu-ji-zhi/"/>
      <url>/2020/03/11/mysql-shi-wu-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>知识点：</p><ol><li>什么是事务</li><li>事务的特点</li><li>事务的隔离机制</li><li>事务的并发问题</li></ol><h3 id="事务概念和特点"><a href="#事务概念和特点" class="headerlink" title="事务概念和特点"></a>事务概念和特点</h3><p>事务是指执行大量和复杂的数据操作，只有innodb引擎才支持事务。</p><p>事务具有以下特点：</p><ol><li>一致性:如果事务没有成功，则所做的修改将不会保存到数据库中</li><li>原子性:事务的所有操作，要么全部成功提交，要么全部失败回滚</li><li>持久性:一旦事务成功提交，则对数据库的修改是永久有效的</li><li>隔离性:一个事务在提交之前所做的修改，对于其他事务是不可见的</li></ol><h3 id="操作sql"><a href="#操作sql" class="headerlink" title="操作sql"></a>操作sql</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">start</span> tranction<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> userinfo <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">update</span> userinfo <span class="token keyword">set</span> number <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token keyword">begin</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> userinfo <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">update</span> userinfo <span class="token keyword">set</span> number <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><h3 id="隔离机制"><a href="#隔离机制" class="headerlink" title="隔离机制"></a>隔离机制</h3><h4 id="未提交读-READ-UNCOMMITTED"><a href="#未提交读-READ-UNCOMMITTED" class="headerlink" title="未提交读(READ UNCOMMITTED)"></a>未提交读(READ UNCOMMITTED)</h4><p>事务可以读取到未提交的数据</p><h4 id="提交读-READ-COMMITTED"><a href="#提交读-READ-COMMITTED" class="headerlink" title="提交读(READ COMMITTED)"></a>提交读(READ COMMITTED)</h4><p>事务从开始到结束之前所做的任何修改，对于其他事务都是不可见的</p><h4 id="重复度-REPEATABLE-READ"><a href="#重复度-REPEATABLE-READ" class="headerlink" title="重复度(REPEATABLE READ)"></a>重复度(REPEATABLE READ)</h4><p>事务多次读取同一数据，返回的结果都是一致的。</p><p>可重复读是mysql默认的隔离机制。</p><h4 id="可串行化-SERIALIZABLE"><a href="#可串行化-SERIALIZABLE" class="headerlink" title="可串行化(SERIALIZABLE)"></a>可串行化(SERIALIZABLE)</h4><p>一个事务在没有提交完成时，其他事务无法进行，需要进行等待。</p><h3 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h3><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p>事务可以读取到未提交的数据。</p><h4 id="幻读-针对添加和删除"><a href="#幻读-针对添加和删除" class="headerlink" title="幻读(针对添加和删除)"></a>幻读(针对添加和删除)</h4><p>事务A多次读取同一范围内的数据时，事务B在此范围内进行了删除或者修改，导致事务A出现了幻行。</p><h4 id="不可重复读-针对修改"><a href="#不可重复读-针对修改" class="headerlink" title="不可重复读(针对修改)"></a>不可重复读(针对修改)</h4><p>事务A多次读取同一数据时，事务B对此数据进行了修改，导致事务A返回的数据不一致。</p><h4 id="隔离机制并发问题整合"><a href="#隔离机制并发问题整合" class="headerlink" title="隔离机制并发问题整合"></a>隔离机制并发问题整合</h4><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>未提交读</td><td>是</td><td>是</td><td>是</td></tr><tr><td>提交读</td><td>否</td><td>是</td><td>是</td></tr><tr><td>重复读</td><td>否</td><td>否</td><td>是</td></tr><tr><td>可串行化</td><td>否</td><td>否</td><td>否</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql锁机制</title>
      <link href="/2020/03/10/mysql-suo-ji-zhi/"/>
      <url>/2020/03/10/mysql-suo-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>通过此文，你将学习mysql锁的相关内容：</p><ol><li>什么是锁</li><li>锁都有哪些类型，每个类型的区别</li><li>分析锁的使用情况和应用场景</li></ol><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>锁：mysql为了解决资源共享，所造成并发问题的处理机制。</p><p>锁根据粒度分为：</p><ol><li>表锁(粒度大,myisam引擎默认)<ol><li>锁类型：<ol><li>锁操作<ol><li>加锁:lock table 表名 read/write;</li><li>解锁:unlock table;</li><li>观察表锁:show open tables; </li><li>分析表锁:show status like “table_lock%”;<ol><li>Table_locks_immediate 可以立即添加锁的表数量</li><li>Table_locks_waited 需要等待的锁数量</li><li>Table_locks_immediate/Table_locks_waited &gt;5000 建议使用innodb引擎，否则使用myisam</li></ol></li></ol></li><li>读锁(共享锁)影响<ol><li>当前会话<ol><li>可以对锁表进行读，但是写操作会处于等待状态，直到锁被释放</li><li>不可以其他表进行读写</li></ol></li><li>其他会话</li></ol></li><li>写锁(排他锁)影响<ol><li>当前会话<ol><li>可以对锁表进行读写</li><li>不可以对其他表进行读写</li></ol></li><li>其他会话：<ol><li>对锁表进行的读写，会处于等待状态，直到锁被释放</li><li>可以对其他表进行读写</li></ol></li></ol></li></ol></li><li>优点<ol><li>资源占用少，加锁速度快</li><li>不会出现死锁</li></ol></li><li>缺点<ol><li>并发度低</li><li>容易出现锁冲突</li></ol></li></ol></li><li>行锁(粒度小,innodb引擎默认)<ol><li>锁类型<ol><li>锁操作<ol><li>加锁<ol><li>写锁:进行写操作(insert,update,delete)时候，innodb会自动添加写锁，直到事务提交(commit)或者回滚(rollback)。在测试的时候，可以通过set autocommit=0;关闭事务自动提交</li><li>读锁: select * from innodb_lock where id=1 for update;</li></ol></li><li>解锁:事务提交或者回滚</li></ol></li><li>读锁(共享锁)/写锁(排他锁)影响<ol><li>当前会话<ol><li>可以多锁定行和其他行进行读写</li></ol></li><li>其他会话<ol><li>可以对锁定行进行读，但是写操作会处于等待状态，直到锁被释放</li><li>可以对其他行进行读写                </li></ol></li></ol></li></ol></li><li>优点<ol><li>并发度高</li></ol></li><li>缺点<ol><li>资源占用大，加锁速度慢</li><li>会出现死锁</li></ol></li></ol></li><li>行锁(粒度介于以上两者之间)</li></ol><a id="more"></a><h3 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h3><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/*读锁*/</span><span class="token keyword">lock</span> <span class="token keyword">table</span> userinfo <span class="token keyword">read</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*写锁*/</span><span class="token keyword">lock</span> <span class="token keyword">table</span> userinfo <span class="token keyword">read</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*解锁*/</span>unlock <span class="token keyword">table</span> userinfo<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*查看表锁*/</span><span class="token keyword">show</span> <span class="token keyword">open</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*查看表锁状态*/</span><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">"table_lock%"</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------+-------+</span><span class="token operator">|</span> Variable_name         <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------+-------+</span><span class="token operator">|</span> Table_locks_immediate <span class="token operator">|</span> <span class="token number">193</span>   <span class="token operator">|</span><span class="token operator">|</span> Table_locks_waited    <span class="token operator">|</span> <span class="token number">0</span>     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h4><h5 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/*读锁*/</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> userinfo <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*查看行锁状态*/</span><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">"innodb_row_lock%"</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------+--------+</span><span class="token operator">|</span> Variable_name                 <span class="token operator">|</span> <span class="token keyword">Value</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------+--------+</span><span class="token operator">|</span> Innodb_row_lock_current_waits <span class="token operator">|</span> <span class="token number">0</span>      <span class="token operator">|</span><span class="token operator">|</span> Innodb_row_lock_time          <span class="token operator">|</span> <span class="token number">215019</span> <span class="token operator">|</span><span class="token operator">|</span> Innodb_row_lock_time_avg      <span class="token operator">|</span> <span class="token number">43003</span>  <span class="token operator">|</span><span class="token operator">|</span> Innodb_row_lock_time_max      <span class="token operator">|</span> <span class="token number">51025</span>  <span class="token operator">|</span><span class="token operator">|</span> Innodb_row_lock_waits         <span class="token operator">|</span> <span class="token number">5</span>      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------+--------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>Innodb_row_lock_time 服务启动到现在，总共锁定的时间</li><li>Innodb_row_lock_time_avg 平均等待花费的时间</li><li>Innodb_row_lock_time_max 服务启动到现在，最大的等待时间</li><li>Innodb_row_lock_waits 服务启动到现在，总共等待的次数</li><li>Innodb_row_lock_current_waits 当前处于等待的锁数量</li></ol><p>innodb引擎会自动给写(update,insert,delete)操作添加写锁。</p><p>通过事务提交或者回滚的时候进行解锁。</p><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><h5 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h5><p>在添加行锁时候，innodb会自动给在条件范围内，但是没有值的字段添加行锁。例如where id &gt;2 and id&lt;9;即使此时没有id=7的字段，innndb也会自动给id=7自动添加锁，这个就是间隙锁。</p><h5 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h5><ol><li>原因:2个或者2个以上的进程，为了争夺同一资源，出现互相等待的情况。此时如果没有外力干预，将永远处于等待状况。</li><li>如何避免<ol><li>尽量避免资源的互相调用</li><li>按照同一顺序进行操作</li></ol></li></ol><h5 id="行锁失效"><a href="#行锁失效" class="headerlink" title="行锁失效"></a>行锁失效</h5><p>当索引失效或者没有索引的时候，行锁将自动转换为表锁</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乐观锁和悲观锁</title>
      <link href="/2020/03/10/le-guan-suo-he-bei-guan-suo/"/>
      <url>/2020/03/10/le-guan-suo-he-bei-guan-suo/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>通过此文你可以了解到的内容有：</p><ol><li>什么是乐观锁和悲观锁</li></ol><p>首先要了解什么是锁：mysql为了解决资源共享，所造成并发问题的处理机制。</p><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>在操作之前给数据添加锁，锁定后再对数据进行操作。在锁未释放之前，其他人无法对数据进行读写。</p><p>特点：</p><ol><li>可以保证数据的完全独占性和正确性</li><li>开销大，性能不高</li></ol><a id="more"></a><p>添加锁的方式</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/*读锁*/</span><span class="token keyword">lock</span> <span class="token keyword">table</span> userinfo <span class="token keyword">read</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*写锁*/</span><span class="token keyword">lock</span> <span class="token keyword">table</span> userinfo <span class="token keyword">write</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*解锁*/</span>unlock <span class="token keyword">table</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*行读锁，条件必须为索引列，否则会自动转换为表锁*/</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*提交解锁*/</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*回滚解锁*/</span><span class="token keyword">rollback</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h4><p>预备数据</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> deom<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">database</span> demo<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> lock_demo1<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> lock_demo1 <span class="token punctuation">(</span>    id <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    number <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">)</span>engin<span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> lock_demo1 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="未添加悲观锁"><a href="#未添加悲观锁" class="headerlink" title="未添加悲观锁"></a>未添加悲观锁</h5><p>会话一</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*①添加读锁*/</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> lock_demo1 <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------+</span><span class="token operator">|</span> number <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------+</span><span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------+</span><span class="token comment" spellcheck="true">/*③更新数量*/</span><span class="token keyword">update</span> lock_demo1 <span class="token keyword">set</span> number <span class="token operator">=</span> number<span class="token number">-1</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会话二</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/*②查询数量*/</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> lock_demo1 <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------+</span><span class="token operator">|</span> number <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------+</span><span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------+</span><span class="token comment" spellcheck="true">/*④更新数量*/</span><span class="token keyword">update</span> lock_demo1 <span class="token keyword">set</span> number <span class="token operator">=</span> number<span class="token number">-1</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>操作顺序:1—&gt;2—&gt;3—&gt;4</p><p>以前情况经常出现在秒杀系统中，2个或者2个以上的用户在争夺最后一件商品，如果没有加锁则会出现第二个会话更新后，number 将等于 -1，造成业务错误。</p><h5 id="添加悲观锁"><a href="#添加悲观锁" class="headerlink" title="添加悲观锁"></a>添加悲观锁</h5><p>会话一</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/*①添加读锁*/</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> lock_demo1 <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------+</span><span class="token operator">|</span> number <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------+</span><span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------+</span><span class="token comment" spellcheck="true">/*③更新数量*/</span><span class="token keyword">update</span> lock_demo1 <span class="token keyword">set</span> number <span class="token operator">=</span> number<span class="token number">-1</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会话二</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/*②查询数量*/</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> lock_demo1 <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------+</span><span class="token operator">|</span> number <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------+</span><span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------+</span><span class="token comment" spellcheck="true">/*④更新数量*/</span><span class="token keyword">update</span> lock_demo1 <span class="token keyword">set</span> number <span class="token operator">=</span> number<span class="token number">-1</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>操作顺序:1—&gt;2—&gt;3—&gt;4</p><p>当会话一添加了锁之后，会话二添加锁的操作将处于等待，直到会话一进行解锁。从而避免了资源争夺造成的并发问题。</p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>在操作数据的时候，不会对数据进行锁定。只有在提交数据的时候，会采用一种机制来验证数据是否冲突。</p><p>特点：</p><ol><li>并发度高</li><li>开销小</li></ol><h5 id="实操-1"><a href="#实操-1" class="headerlink" title="实操"></a>实操</h5><p>预备数据</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> aotocommit<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> lock_demo1 <span class="token keyword">add</span> <span class="token keyword">column</span> version <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>会话一</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/*1*/</span><span class="token keyword">select</span> version <span class="token punctuation">,</span> number <span class="token keyword">from</span> lock_demo1 <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+--------+---------+</span><span class="token operator">|</span> id <span class="token operator">|</span> number <span class="token operator">|</span> version <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+--------+---------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span>      <span class="token number">3</span> <span class="token operator">|</span>       <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+--------+---------+</span><span class="token comment" spellcheck="true">/*3*/</span><span class="token keyword">update</span> lock_demo1 <span class="token keyword">set</span> number <span class="token operator">=</span> number <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>version<span class="token operator">=</span>version<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> version <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会话二</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/*2*/</span><span class="token keyword">select</span> version <span class="token punctuation">,</span> number <span class="token keyword">from</span> lock_demo1 <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+--------+---------+</span><span class="token operator">|</span> id <span class="token operator">|</span> number <span class="token operator">|</span> version <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+--------+---------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span>      <span class="token number">3</span> <span class="token operator">|</span>       <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+--------+---------+</span><span class="token comment" spellcheck="true">/*4*/</span><span class="token keyword">update</span> lock_demo1 <span class="token keyword">set</span> number <span class="token operator">=</span> number <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>version<span class="token operator">=</span>version<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> version <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行顺序:1–&gt;2–&gt;3–&gt;4,此时会话2的更新会失败。</p><p>由于在提交修改的时候,添加了version字段进行验证，从而保证数据的有效性和正确性，将错误的处理情况让用户进行处理，mysql不添加锁，从而减少了资源消耗，提高了并发。</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql知识点大纲(持续更新)</title>
      <link href="/2020/03/09/mysql-zhi-shi-dian-da-gang-chi-xu-geng-xin/"/>
      <url>/2020/03/09/mysql-zhi-shi-dian-da-gang-chi-xu-geng-xin/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/mysql%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql优化之profile</title>
      <link href="/2020/03/07/sql-you-hua-zhi-profile/"/>
      <url>/2020/03/07/sql-you-hua-zhi-profile/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>mysql profile 工具可以记录执行sql总消耗的时间，并且记录系统cpu和i/o锁消耗的时间。</p><p>此工具建议只在开发环境中启动，生产环境应该关闭，减少资源消耗。</p><a id="more"></a><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/*查看profile配置*/</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">"%profiling%"</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------------+-------+</span><span class="token operator">|</span> Variable_name          <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------------+-------+</span><span class="token operator">|</span> have_profiling         <span class="token operator">|</span> YES   <span class="token operator">|</span><span class="token operator">|</span> profiling              <span class="token operator">|</span> <span class="token keyword">OFF</span>   <span class="token operator">|</span><span class="token operator">|</span> profiling_history_size <span class="token operator">|</span> <span class="token number">15</span>    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------------+-------+</span><span class="token comment" spellcheck="true">/*启动*/</span><span class="token keyword">set</span> profiling <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">"%profiling%"</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------------+-------+</span><span class="token operator">|</span> Variable_name          <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------------+-------+</span><span class="token operator">|</span> have_profiling         <span class="token operator">|</span> YES   <span class="token operator">|</span><span class="token operator">|</span> profiling              <span class="token operator">|</span> <span class="token keyword">ON</span>    <span class="token operator">|</span><span class="token operator">|</span> profiling_history_size <span class="token operator">|</span> <span class="token number">15</span>    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------------+-------+</span><span class="token comment" spellcheck="true">/*查看分析数据*/</span><span class="token keyword">show</span> profile <span class="token keyword">for</span> query <span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------+----------+</span><span class="token operator">|</span> <span class="token keyword">Status</span>               <span class="token operator">|</span> Duration <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------+----------+</span><span class="token operator">|</span> starting             <span class="token operator">|</span> <span class="token number">0.000072</span> <span class="token operator">|</span><span class="token operator">|</span> checking permissions <span class="token operator">|</span> <span class="token number">0.000006</span> <span class="token operator">|</span><span class="token operator">|</span> Opening <span class="token keyword">tables</span>       <span class="token operator">|</span> <span class="token number">0.000016</span> <span class="token operator">|</span><span class="token operator">|</span> init                 <span class="token operator">|</span> <span class="token number">0.000014</span> <span class="token operator">|</span><span class="token operator">|</span> System <span class="token keyword">lock</span>          <span class="token operator">|</span> <span class="token number">0.000008</span> <span class="token operator">|</span><span class="token operator">|</span> optimizing           <span class="token operator">|</span> <span class="token number">0.000004</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">statistics</span>           <span class="token operator">|</span> <span class="token number">0.000014</span> <span class="token operator">|</span><span class="token operator">|</span> preparing            <span class="token operator">|</span> <span class="token number">0.000009</span> <span class="token operator">|</span><span class="token operator">|</span> executing            <span class="token operator">|</span> <span class="token number">0.000001</span> <span class="token operator">|</span><span class="token operator">|</span> Sending <span class="token keyword">data</span>         <span class="token operator">|</span> <span class="token number">0.013190</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">end</span>                  <span class="token operator">|</span> <span class="token number">0.000011</span> <span class="token operator">|</span><span class="token operator">|</span> query <span class="token keyword">end</span>            <span class="token operator">|</span> <span class="token number">0.000009</span> <span class="token operator">|</span><span class="token operator">|</span> closing <span class="token keyword">tables</span>       <span class="token operator">|</span> <span class="token number">0.000005</span> <span class="token operator">|</span><span class="token operator">|</span> freeing items        <span class="token operator">|</span> <span class="token number">0.000048</span> <span class="token operator">|</span><span class="token operator">|</span> cleaning up          <span class="token operator">|</span> <span class="token number">0.000009</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------+----------+</span><span class="token keyword">show</span> profile <span class="token keyword">all</span> <span class="token keyword">for</span> query <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*主要查看cpu和I/O消耗时间*/</span><span class="token keyword">show</span> profile cpu <span class="token punctuation">,</span> block io <span class="token keyword">for</span> query <span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------+----------+----------+------------+--------------+---------------+</span><span class="token operator">|</span> <span class="token keyword">Status</span>               <span class="token operator">|</span> Duration <span class="token operator">|</span> CPU_user <span class="token operator">|</span> CPU_system <span class="token operator">|</span> Block_ops_in <span class="token operator">|</span> Block_ops_out <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------+----------+----------+------------+--------------+---------------+</span><span class="token operator">|</span> starting             <span class="token operator">|</span> <span class="token number">0.000072</span> <span class="token operator">|</span> <span class="token number">0.000000</span> <span class="token operator">|</span>   <span class="token number">0.000000</span> <span class="token operator">|</span>         <span class="token boolean">NULL</span> <span class="token operator">|</span>          <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> checking permissions <span class="token operator">|</span> <span class="token number">0.000006</span> <span class="token operator">|</span> <span class="token number">0.000000</span> <span class="token operator">|</span>   <span class="token number">0.000000</span> <span class="token operator">|</span>         <span class="token boolean">NULL</span> <span class="token operator">|</span>          <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> Opening <span class="token keyword">tables</span>       <span class="token operator">|</span> <span class="token number">0.000016</span> <span class="token operator">|</span> <span class="token number">0.000000</span> <span class="token operator">|</span>   <span class="token number">0.000000</span> <span class="token operator">|</span>         <span class="token boolean">NULL</span> <span class="token operator">|</span>          <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> init                 <span class="token operator">|</span> <span class="token number">0.000014</span> <span class="token operator">|</span> <span class="token number">0.000000</span> <span class="token operator">|</span>   <span class="token number">0.000000</span> <span class="token operator">|</span>         <span class="token boolean">NULL</span> <span class="token operator">|</span>          <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> System <span class="token keyword">lock</span>          <span class="token operator">|</span> <span class="token number">0.000008</span> <span class="token operator">|</span> <span class="token number">0.000000</span> <span class="token operator">|</span>   <span class="token number">0.000000</span> <span class="token operator">|</span>         <span class="token boolean">NULL</span> <span class="token operator">|</span>          <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> optimizing           <span class="token operator">|</span> <span class="token number">0.000004</span> <span class="token operator">|</span> <span class="token number">0.000000</span> <span class="token operator">|</span>   <span class="token number">0.000000</span> <span class="token operator">|</span>         <span class="token boolean">NULL</span> <span class="token operator">|</span>          <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">statistics</span>           <span class="token operator">|</span> <span class="token number">0.000014</span> <span class="token operator">|</span> <span class="token number">0.000000</span> <span class="token operator">|</span>   <span class="token number">0.000000</span> <span class="token operator">|</span>         <span class="token boolean">NULL</span> <span class="token operator">|</span>          <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> preparing            <span class="token operator">|</span> <span class="token number">0.000009</span> <span class="token operator">|</span> <span class="token number">0.000000</span> <span class="token operator">|</span>   <span class="token number">0.000000</span> <span class="token operator">|</span>         <span class="token boolean">NULL</span> <span class="token operator">|</span>          <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> executing            <span class="token operator">|</span> <span class="token number">0.000001</span> <span class="token operator">|</span> <span class="token number">0.000000</span> <span class="token operator">|</span>   <span class="token number">0.000000</span> <span class="token operator">|</span>         <span class="token boolean">NULL</span> <span class="token operator">|</span>          <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> Sending <span class="token keyword">data</span>         <span class="token operator">|</span> <span class="token number">0.013190</span> <span class="token operator">|</span> <span class="token number">0.015625</span> <span class="token operator">|</span>   <span class="token number">0.000000</span> <span class="token operator">|</span>         <span class="token boolean">NULL</span> <span class="token operator">|</span>          <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">end</span>                  <span class="token operator">|</span> <span class="token number">0.000011</span> <span class="token operator">|</span> <span class="token number">0.000000</span> <span class="token operator">|</span>   <span class="token number">0.000000</span> <span class="token operator">|</span>         <span class="token boolean">NULL</span> <span class="token operator">|</span>          <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> query <span class="token keyword">end</span>            <span class="token operator">|</span> <span class="token number">0.000009</span> <span class="token operator">|</span> <span class="token number">0.000000</span> <span class="token operator">|</span>   <span class="token number">0.000000</span> <span class="token operator">|</span>         <span class="token boolean">NULL</span> <span class="token operator">|</span>          <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> closing <span class="token keyword">tables</span>       <span class="token operator">|</span> <span class="token number">0.000005</span> <span class="token operator">|</span> <span class="token number">0.000000</span> <span class="token operator">|</span>   <span class="token number">0.000000</span> <span class="token operator">|</span>         <span class="token boolean">NULL</span> <span class="token operator">|</span>          <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> freeing items        <span class="token operator">|</span> <span class="token number">0.000048</span> <span class="token operator">|</span> <span class="token number">0.000000</span> <span class="token operator">|</span>   <span class="token number">0.000000</span> <span class="token operator">|</span>         <span class="token boolean">NULL</span> <span class="token operator">|</span>          <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> cleaning up          <span class="token operator">|</span> <span class="token number">0.000009</span> <span class="token operator">|</span> <span class="token number">0.000000</span> <span class="token operator">|</span>   <span class="token number">0.000000</span> <span class="token operator">|</span>         <span class="token boolean">NULL</span> <span class="token operator">|</span>          <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------+----------+----------+------------+--------------+---------------+</span><span class="token comment" spellcheck="true">/*关闭profile*/</span><span class="token keyword">set</span> profiling <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果分析：<a href="https://www.cnblogs.com/flzs/p/9974822.html" target="_blank" rel="noopener">https://www.cnblogs.com/flzs/p/9974822.html</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql分析工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql集群配置</title>
      <link href="/2020/03/07/mysql-ji-qun-pei-zhi/"/>
      <url>/2020/03/07/mysql-ji-qun-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>mysql集群配置，采用的是主从模式。可以将一个数据库的数据复制到另外一个数据库中，其中主数据库称为master,从数据库称为slave,关系为1对多。复制操作为异步，从数据库不需要一直连接着主数据库。</p><h3 id="常见错误解决方案"><a href="#常见错误解决方案" class="headerlink" title="常见错误解决方案"></a>常见错误解决方案</h3><ol><li>文档：<a href="https://blog.csdn.net/mbytes/article/details/86711508" target="_blank" rel="noopener">https://blog.csdn.net/mbytes/article/details/86711508</a></li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>实现高负载：采用读写分离，将一个数据库的压力进行分担</li><li>提高安全性：多个从数据库对主数据库的数据进行备份，防止主数据库数据丢失</li></ol><a id="more"></a><h2 id="实现原理图"><a href="#实现原理图" class="headerlink" title="实现原理图"></a>实现原理图</h2><p><img src="https://upload-images.jianshu.io/upload_images/4053714-bf6f27fecff034bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp" alt="image"></p><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><ol><li>开启master binary log，数据库的修改操作都将记录到log中（二进制日志事件）</li><li>slave 的 I/O 线程会读取matser binary log ，并且写入到 relay log 中（中继日志事件）</li><li>slave 的 sql 线程会读取 relay log 中的操作，并且写入到数据库中</li></ol><h3 id="主从同步延迟原因"><a href="#主从同步延迟原因" class="headerlink" title="主从同步延迟原因"></a>主从同步延迟原因</h3><ol><li>主库执行大批量的未有索引表的修改操作</li><li>从数据库配置不足</li><li>在mysql5.7之前，从数据库 sql thread 单线程进行同步</li><li>同步为异步串行，只有在主数据库提交事务之后，从数据库才开始进行同步，并且同步的过程也需要消耗时间</li></ol><h3 id="主从同步延迟解决办法"><a href="#主从同步延迟解决办法" class="headerlink" title="主从同步延迟解决办法"></a>主从同步延迟解决办法</h3><ol><li>提升从数据库配置</li><li>mysql 5.7 开启并行复制</li><li>业务层在进行操作的时候，先进行查询再进行修改，避免sql执行失败</li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>准备2台服务器，并且数据库服务启动正常<ol><li>主(windoes)ip:192.168.100.107</li><li>从(centos)ip:192.168.100.117</li></ol></li><li>关闭2台服务器防火墙</li><li>2台服务器网络连接正常</li></ol><h3 id="主数据库配置"><a href="#主数据库配置" class="headerlink" title="主数据库配置"></a>主数据库配置</h3><p>数据库配置文件修改 my.ini,添加如下配置内容</p><pre><code>#id编号server_id=1#减少日志记录数量，只记录受影响的列binlog_row_image = minimal# 二进制日志存放路径log-bin=&quot;D:\Program Files\mysql-5.7.28-winx64\data\mysql-bin&quot;# 错误记录日志文件log-error=&quot;D:\Program Files\mysql-5.7.28-winx64\data\mysql-error&quot;#(可选)主从同步忽略的数据库#binlog-ignore-db=mysql#(可选)指定同步时只同步的数据库binlog-do-db=demo#binlog记录内容的方式，记录被操作的每一行binlog_format=ROW#日志的缓存时间expire_logs_days=10                                #日志的最大大小max_binlog_size=200M                        </code></pre><p>修改完毕后，重启mysql服务使配置生效，启动完毕后，需要观察二进制日志存放路径，是否产生对应文件</p><pre><code>net stop mysqlnet start mysql</code></pre><p>数据库权限配置</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/*创建远程连接账号*/</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'test'</span>@'<span class="token operator">%</span><span class="token string">' IDENTIFIED BY '</span><span class="token number">123456</span>'<span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*查看主数据库信息*/</span><span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+----------+--------------+------------------+-------------------+</span><span class="token operator">|</span> <span class="token keyword">File</span>             <span class="token operator">|</span> Position <span class="token operator">|</span> Binlog_Do_DB <span class="token operator">|</span> Binlog_Ignore_DB <span class="token operator">|</span> Executed_Gtid_Set <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+----------+--------------+------------------+-------------------+</span><span class="token operator">|</span> mysql<span class="token operator">-</span>bin<span class="token number">.000001</span> <span class="token operator">|</span>      <span class="token number">154</span> <span class="token operator">|</span> demo         <span class="token operator">|</span>                  <span class="token operator">|</span>                   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+----------+--------------+------------------+-------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="从数据库配置"><a href="#从数据库配置" class="headerlink" title="从数据库配置"></a>从数据库配置</h3><p>数据库配置文件修改,添加如下配置内容</p><pre><code>vim /etc/my.cnf[mysqld]# 配置slave idserver-id=117# 选择同步的数据库replicate_do_db=demo# 日志过期时间expire_logs_days=10# 二进制日志最大大小max_binlog_size=200M</code></pre><p>重启MySQL服务</p><pre class="line-numbers language-shell"><code class="language-shell">$ service mysqld restart# 进入数据库$ mysql -u root -p# 配置同步信息，其中master_log_file，master_log_pos 根据上文master status输出内容决定mysql> change master to master_host='192.168.100.107',master_port=3306,master_user='test',master_password='123456',master_log_file='mysql-bin.000001',master_log_pos=154;# 启动同步mysql> start slave;# 查看同步状态mysql> show slave status\GSlave_IO_Running: YesSlave_SQL_Running: NoReplicate_Do_DB: demoLast_Errno: 0Last_Error: Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当如下参数不正确时候，需要查看Last_Errno，Last_Error，Slave_SQL_Running_State输出的信息：</p><ol><li>Slave_IO_Running: Connecting</li><li>Slave_SQL_Running: YES</li><li>Replicate_Do_DB: demo</li></ol><p>此时的状态为正在等待获取更多的的操作信息，说明matser为进行任何操作。</p><h3 id="同步测试"><a href="#同步测试" class="headerlink" title="同步测试"></a>同步测试</h3><h4 id="主数据库"><a href="#主数据库" class="headerlink" title="主数据库"></a>主数据库</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/*创建数据库*/</span><span class="token keyword">create</span> <span class="token keyword">database</span> demo<span class="token punctuation">;</span><span class="token keyword">use</span> demo<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> book<span class="token punctuation">(</span>author <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> book <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">"ddz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="从数据库"><a href="#从数据库" class="headerlink" title="从数据库"></a>从数据库</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token keyword">use</span> demo<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> book<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------+</span><span class="token operator">|</span> author <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------+</span><span class="token operator">|</span> ddz    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据同步完成</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql优化之排序</title>
      <link href="/2020/03/06/sql-you-hua-zhi-pai-xu/"/>
      <url>/2020/03/06/sql-you-hua-zhi-pai-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文介绍在sql中进行 order by 操作的时候，如何进行分析和优化sql执行效率。</p><p>order by 索引优化总结：</p><ol><li>避免出现 using filesort(文件排序)，常见的方法如下：<ol><li>单值索引：<ol><li>order by列 和 select列一致，可以实现using index(索引覆盖)</li><li>order by 只能使用一个索引，无法同时使用多个索引</li></ol></li><li>复合索引：<ol><li>order by列的顺序需要和复合索引创建顺序一致，不能跨列(最佳左前缀)</li><li>where + order by 列需要和索引创建顺序一致，不能跨列(最佳左前缀)</li><li>不能对 order by 列同时进行正向和反向排序</li></ol></li></ol></li></ol><a id="more"></a><h3 id="预备概念"><a href="#预备概念" class="headerlink" title="预备概念"></a>预备概念</h3><p>索引：将表中的一列或者多列按照指定的规则进行排序的数据结果。</p><p>索引覆盖：通过遍历索引表，就可以返回满足条件的数据</p><p>sql编写顺序：select … distinct … join … on …. where … group by … having … order by limit</p><p>sql执行顺序：from … join … on … where … group by … having … select … distinct … order by limit</p><h3 id="预备数据"><a href="#预备数据" class="headerlink" title="预备数据"></a>预备数据</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> demo<span class="token punctuation">;</span><span class="token keyword">use</span> demo<span class="token keyword">create</span> <span class="token keyword">table</span> book<span class="token punctuation">(</span>    bid <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    author <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    typeid <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> book <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'tz'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> book <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'tz'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> book <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'tz'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> book <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'tw'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> book <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'ta'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="order-by-避免use-filesort"><a href="#order-by-避免use-filesort" class="headerlink" title="order by 避免use filesort"></a>order by 避免use filesort</h3><h4 id="order-by列-和-select列-需要为同一个索引"><a href="#order-by列-和-select列-需要为同一个索引" class="headerlink" title="order by列 和 select列 需要为同一个索引"></a>order by列 和 select列 需要为同一个索引</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> typeid <span class="token keyword">from</span> book <span class="token keyword">order</span> <span class="token keyword">by</span> author<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> book  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">5</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> filesort <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span><span class="token comment" spellcheck="true">/*一致则索引覆盖*/</span><span class="token keyword">alter</span> <span class="token keyword">table</span> book <span class="token keyword">add</span> <span class="token keyword">index</span> idx_author<span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">select</span> author <span class="token keyword">from</span> book <span class="token keyword">order</span> <span class="token keyword">by</span> author<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+------------+---------+------+------+----------+-------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>        <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+------------+---------+------+------+----------+-------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> book  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">index</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> idx_author <span class="token operator">|</span> <span class="token number">33</span>      <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">5</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+------------+---------+------+------+----------+-------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="每次排序只能使用一个索引，不能同时多个"><a href="#每次排序只能使用一个索引，不能同时多个" class="headerlink" title="每次排序只能使用一个索引，不能同时多个"></a>每次排序只能使用一个索引，不能同时多个</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> book <span class="token keyword">add</span> <span class="token keyword">index</span> idx_typeid<span class="token punctuation">(</span>typeid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*Using filesort 无法使用多个索引*/</span><span class="token keyword">explain</span> <span class="token keyword">select</span> author <span class="token keyword">from</span> book <span class="token keyword">order</span> <span class="token keyword">by</span> author<span class="token punctuation">,</span>typeid<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> book  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">5</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> filesort <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="当需要多列进行排序时，需要创建复合索引"><a href="#当需要多列进行排序时，需要创建复合索引" class="headerlink" title="当需要多列进行排序时，需要创建复合索引"></a>当需要多列进行排序时，需要创建复合索引</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> book <span class="token keyword">add</span> <span class="token keyword">index</span> idx_author_typeid<span class="token punctuation">(</span>author<span class="token punctuation">,</span>typeid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">select</span> author <span class="token keyword">from</span> book <span class="token keyword">order</span> <span class="token keyword">by</span> author<span class="token punctuation">,</span>typeid<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+-------------------+---------+------+------+----------+-------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>               <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+-------------------+---------+------+------+----------+-------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> book  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">index</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> idx_author_typeid <span class="token operator">|</span> <span class="token number">42</span>      <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">5</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+-------------------+---------+------+------+----------+-------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="order-by-多列的使用顺序，需要和复合索引的创建顺序一致"><a href="#order-by-多列的使用顺序，需要和复合索引的创建顺序一致" class="headerlink" title="order by 多列的使用顺序，需要和复合索引的创建顺序一致"></a>order by 多列的使用顺序，需要和复合索引的创建顺序一致</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/*此时复合索引的顺序为author_typeid，不一致则出现use filesort*/</span><span class="token keyword">explain</span> <span class="token keyword">select</span> author <span class="token keyword">from</span> book <span class="token keyword">order</span> <span class="token keyword">by</span> typeid<span class="token punctuation">,</span>author<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+-------------------+---------+------+------+----------+-----------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>               <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+-------------------+---------+------+------+----------+-----------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> book  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">index</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> idx_author_typeid <span class="token operator">|</span> <span class="token number">42</span>      <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">5</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> filesort <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+-------------------+---------+------+------+----------+-----------------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="order-by-多列的时候不能同时进行正向和反向排序"><a href="#order-by-多列的时候不能同时进行正向和反向排序" class="headerlink" title="order by 多列的时候不能同时进行正向和反向排序"></a>order by 多列的时候不能同时进行正向和反向排序</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> author <span class="token keyword">from</span> book <span class="token keyword">order</span> <span class="token keyword">by</span> author<span class="token punctuation">,</span>typeid <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+-------------------+---------+------+------+----------+-----------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>               <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+-------------------+---------+------+------+----------+-----------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> book  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">index</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> idx_author_typeid <span class="token operator">|</span> <span class="token number">42</span>      <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">5</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> filesort <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+-------------------+---------+------+------+----------+-----------------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="using-index-最优方案-order-by-列和-select-列一致，可以实现索引覆盖"><a href="#using-index-最优方案-order-by-列和-select-列一致，可以实现索引覆盖" class="headerlink" title="(using index 最优方案) order by 列和 select 列一致，可以实现索引覆盖"></a>(using index 最优方案) order by 列和 select 列一致，可以实现索引覆盖</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/*此时复合索引的顺序为author_typeid*/</span><span class="token keyword">explain</span> <span class="token keyword">select</span> author<span class="token punctuation">,</span>typeid <span class="token keyword">from</span> book <span class="token keyword">order</span> <span class="token keyword">by</span> author<span class="token punctuation">,</span>typeid<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+-------------------+---------+------+------+----------+-------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>               <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+-------------------+---------+------+------+----------+-------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> book  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">index</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> idx_author_typeid <span class="token operator">|</span> <span class="token number">42</span>      <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">5</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+-------------------+---------+------+------+----------+-------------+</span><span class="token comment" spellcheck="true">/*select 列顺序无关*/</span><span class="token keyword">explain</span> <span class="token keyword">select</span> typeid<span class="token punctuation">,</span>author <span class="token keyword">from</span> book <span class="token keyword">order</span> <span class="token keyword">by</span> author<span class="token punctuation">,</span>typeid<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+-------------------+---------+------+------+----------+-------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>               <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+-------------------+---------+------+------+----------+-------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> book  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">index</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> idx_author_typeid <span class="token operator">|</span> <span class="token number">42</span>      <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">5</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+-------------------+---------+------+------+----------+-------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="wher-order-by-优化"><a href="#wher-order-by-优化" class="headerlink" title="wher + order by 优化"></a>wher + order by 优化</h3><p>首先删除全部索引，避免干扰</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">index</span> idx_author <span class="token keyword">on</span> book<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">index</span> idx_typeid <span class="token keyword">on</span> book<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">index</span> idx_author_typeid <span class="token keyword">on</span> book<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="单值索引使用中：where-，order-by-和-select-需要使用一个索引列"><a href="#单值索引使用中：where-，order-by-和-select-需要使用一个索引列" class="headerlink" title="单值索引使用中：where ，order by 和 select 需要使用一个索引列"></a>单值索引使用中：where ，order by 和 select 需要使用一个索引列</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> idx_author <span class="token keyword">on</span> book<span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_typeid <span class="token keyword">on</span> book<span class="token punctuation">(</span>typeid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">select</span> author <span class="token keyword">from</span> book <span class="token keyword">where</span>  author<span class="token operator">=</span><span class="token string">'tz'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> typeid<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> book  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> idx_author    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">5</span> <span class="token operator">|</span>    <span class="token number">60.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> filesort <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+</span><span class="token comment" spellcheck="true">/*在 where 和 order by 为同一单值索引时候，select 也为索引列，则可以索引覆盖*/</span><span class="token keyword">explain</span> <span class="token keyword">select</span> author <span class="token keyword">from</span> book <span class="token keyword">where</span>  author<span class="token operator">=</span><span class="token string">'tz'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> author<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------------+---------+-------+------+----------+-------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>        <span class="token operator">|</span> key_len <span class="token operator">|</span> ref   <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------------+---------+-------+------+----------+-------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> book  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> idx_author    <span class="token operator">|</span> idx_author <span class="token operator">|</span> <span class="token number">33</span>      <span class="token operator">|</span> const <span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------------+---------+-------+------+----------+-------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="如果-where-和-order-by-不为一个索引，则需要创建复合索引"><a href="#如果-where-和-order-by-不为一个索引，则需要创建复合索引" class="headerlink" title="如果 where 和 order by 不为一个索引，则需要创建复合索引"></a>如果 where 和 order by 不为一个索引，则需要创建复合索引</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/*根据where和order by 顺序，创建复合索引*/</span><span class="token keyword">alter</span> <span class="token keyword">table</span> book <span class="token keyword">add</span> <span class="token keyword">index</span> idx_author_typeid<span class="token punctuation">(</span>author<span class="token punctuation">,</span>typeid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">select</span> author <span class="token keyword">from</span> book <span class="token keyword">where</span>  author<span class="token operator">=</span><span class="token string">'tz'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> typeid<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+------------------------------+-------------------+---------+-------+------+----------+--------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys                <span class="token operator">|</span> <span class="token keyword">key</span>               <span class="token operator">|</span> key_len <span class="token operator">|</span> ref   <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+------------------------------+-------------------+---------+-------+------+----------+--------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> book  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> idx_author<span class="token punctuation">,</span>idx_author_typeid <span class="token operator">|</span> idx_author_typeid <span class="token operator">|</span> <span class="token number">33</span>      <span class="token operator">|</span> const <span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+------------------------------+-------------------+---------+-------+------+----------+--------------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="复合索引的创建顺序和-where-order-by-顺序需要一致"><a href="#复合索引的创建顺序和-where-order-by-顺序需要一致" class="headerlink" title="复合索引的创建顺序和 where+order by 顺序需要一致"></a>复合索引的创建顺序和 where+order by 顺序需要一致</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> bid <span class="token keyword">from</span> book <span class="token keyword">where</span>  typeid<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">order</span> <span class="token keyword">by</span> author<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> book  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">5</span> <span class="token operator">|</span>    <span class="token number">20.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> filesort <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><p>在mysql底层会使用两种排序方式：</p><ol><li>index_sort 索引排序，效率高</li><li>file_sort 文件排序，效率低</li></ol><h4 id="file-sort"><a href="#file-sort" class="headerlink" title="file_sort"></a>file_sort</h4><p>在文件排序中，根据I/O读取次数又分为了：</p><ol><li>双路排序(mysql 4.1以前使用，2次I/O操作，效率相对低)：从表中获取符合where条件的order by 列 和行索引，添加到排序 buffer 中进行排序，根据排序后结果的行指针，扫描全表输出结果。</li><li>单路排序(mysql 4.1以后使用，1次I/O操作，效率相对高)：从表中获取符合where条件的所有数据(order by 列和select …. distinct 列)，添加到排序buffer中，再给根据order by 列进行排序后输出结果。<pre><code> 1. 如果获取的数据超过了排序 buffer 长度，则mysql会自动转为为双路排序，进行多次获取和排序。 2. 可以通过修改 buffer 长度和减少不必要的列添加到buffer中，来减少I/O次数。</code></pre></li></ol><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/*修改排序buffer长度*/</span><span class="token keyword">set</span> max_length_of_sort_data<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql优化 </tag>
            
            <tag> 索引 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多表sql优化实战</title>
      <link href="/2020/03/02/duo-biao-sql-you-hua-shi-zhan/"/>
      <url>/2020/03/02/duo-biao-sql-you-hua-shi-zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>了解在多表查询的时候，如何使用索引来优化sql执行效率</p><p>多表查询，索引添加原则：</p><ol><li>根据程序循环设计原则：外循环为小循环，内循环为大循环得出—&gt;小表驱动大表</li><li>在表中索引建立在经常使用的字段</li></ol><h3 id="预备数据"><a href="#预备数据" class="headerlink" title="预备数据"></a>预备数据</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> demo<span class="token punctuation">;</span><span class="token keyword">use</span> demo<span class="token keyword">create</span> <span class="token keyword">table</span> teacher<span class="token punctuation">(</span>    tid <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    cid <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> course<span class="token punctuation">(</span>    cid <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    title <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> teacher <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"tz"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> teacher <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"td"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> teacher <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"zh"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> course <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"mysql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><h3 id="第一版本—基础sql"><a href="#第一版本—基础sql" class="headerlink" title="第一版本—基础sql"></a>第一版本—基础sql</h3><p>模拟执行sql，分析执行结果</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/*左连接条件查询*/</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher t <span class="token keyword">left</span> <span class="token keyword">join</span> course <span class="token number">c</span> <span class="token keyword">on</span> <span class="token number">c</span><span class="token punctuation">.</span>cid<span class="token operator">=</span>t<span class="token punctuation">.</span>cid <span class="token keyword">where</span> <span class="token number">c</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"tz"</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                                              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t     <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span>                                        <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> <span class="token number">c</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">join</span> buffer <span class="token punctuation">(</span>Block Nested Loop<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h4><p>此时效率为最低，具体分析如下：</p><ol><li>type=all 全表查询</li><li>key=null 未使用任何索引</li><li>extra Using where 全表遍历查询,效率低</li><li>extra Using join buffer mysql底层优化sql后，添加了连接缓存</li></ol><p>此时需要对表添加索引，添加的索引如下：<br>1.teacher.name：name字段必须为索引，否则需要对teacher进行会表查询<br>2.原则为小表驱动大表，course 原则上数据会小于teacher数据，索引需要修改 where 条件顺序为 c.cid=t.cid<br>3.根据索引创建原则，需要将索引添加到经常使用到的字段，则为course.cid</p><h3 id="第二版本—根据分析结果添加索引"><a href="#第二版本—根据分析结果添加索引" class="headerlink" title="第二版本—根据分析结果添加索引"></a>第二版本—根据分析结果添加索引</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> teacher <span class="token keyword">add</span> <span class="token keyword">index</span> idx_name <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> course <span class="token keyword">add</span> <span class="token keyword">index</span> idx_cid<span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher t <span class="token keyword">left</span> <span class="token keyword">join</span> course <span class="token number">c</span> <span class="token keyword">on</span>  <span class="token number">c</span><span class="token punctuation">.</span>cid<span class="token operator">=</span>t<span class="token punctuation">.</span>cid <span class="token keyword">where</span> t<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"tz"</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+----------+---------+------------+------+----------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>      <span class="token operator">|</span> key_len <span class="token operator">|</span> ref        <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+----------+---------+------------+------+----------+-------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t     <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> idx_name      <span class="token operator">|</span> idx_name <span class="token operator">|</span> <span class="token number">33</span>      <span class="token operator">|</span> const      <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> <span class="token number">c</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> idx_cid       <span class="token operator">|</span> idx_cid  <span class="token operator">|</span> <span class="token number">9</span>       <span class="token operator">|</span> demo<span class="token punctuation">.</span>t<span class="token punctuation">.</span>cid <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+----------+---------+------------+------+----------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分析结果-1"><a href="#分析结果-1" class="headerlink" title="分析结果"></a>分析结果</h4><ol><li>type=ref 遍历索引表，返回满足条件的数据（已经达到优化条件）</li><li>key=idx_name /key=idx_cid 两次查询都使用到了索引</li><li>name 最大字节数量 33 = 10(长度) * 3(utf8最大字节) + 3(mysql底层用3字节标识可以为null)，满足预期</li><li>cid 最大字节数量 9 = 8(bigint存储字节长度) + 3(mysql底层用3字节标识可以为null)，满足预期</li></ol>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql优化 </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单表sql优化实战</title>
      <link href="/2020/02/26/dan-biao-sql-you-hua-shi-zhan/"/>
      <url>/2020/02/26/dan-biao-sql-you-hua-shi-zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>模拟sql执行，根据返回结果分析和优化，从而提升sql执行效率。</p><p>注意的点：</p><ol><li>复合索引的创建顺序和使用顺序需要一致</li><li>在范围查询中，如果使用了in ，则可能会导致索引失效</li><li>根据sql执行顺序，合理创建复合索引，使之满足第一个条件</li><li>正常将sql查询类型优化到 type=ref/range 就可以。</li></ol><a id="more"></a><h3 id="预备数据"><a href="#预备数据" class="headerlink" title="预备数据"></a>预备数据</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> test<span class="token punctuation">(</span>    <span class="token number">a</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token number">b</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token number">c</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token number">d</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="初始sql"><a href="#初始sql" class="headerlink" title="初始sql"></a>初始sql</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token number">d</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token number">a</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token number">b</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> test  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> filesort <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解析：</p><ol><li>type=all 为全表查询，效率最低。一般需要优化到 ref/range 阶段</li><li>key=null 查询未使用索引</li><li>using filesort 多余了一次查询和排序，性能损耗大</li></ol><p>根据 sql 执行顺序 from … on … join … where …group by … having … select dinstinct… order by … limit ,创建符合执行顺序的复合索引。</p><h3 id="优化-创建索引"><a href="#优化-创建索引" class="headerlink" title="优化,创建索引"></a>优化,创建索引</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> idx_abd <span class="token keyword">on</span> test<span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token number">d</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token number">a</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token number">b</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+--------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>     <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+--------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> test  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">index</span> <span class="token operator">|</span> idx_abd       <span class="token operator">|</span> idx_abd <span class="token operator">|</span> <span class="token number">12</span>      <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+--------------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解析：</p><ol><li>type=index 遍历整个索引表，性能相对all有所提升</li><li>key=idx_abd 使用到了索引进行查询</li><li>using index 遍历整个索引表<br>但是此时，where条件中存在in条件会使索引失效，从而使索引使用顺序与创建顺序不一致，导致复合索引。需要调整where顺序，并且修改复合索引创建顺序。</li></ol><h3 id="优化-调整查询语句-修改索引"><a href="#优化-调整查询语句-修改索引" class="headerlink" title="优化,调整查询语句,修改索引"></a>优化,调整查询语句,修改索引</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">index</span> idx_abd <span class="token keyword">on</span> test<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> inx_bad <span class="token keyword">on</span> test <span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token number">d</span> <span class="token keyword">from</span> test <span class="token keyword">where</span>  <span class="token number">b</span><span class="token operator">=</span><span class="token number">2</span> <span class="token operator">and</span>  <span class="token number">a</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+---------+---------+-------+------+----------+--------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>     <span class="token operator">|</span> key_len <span class="token operator">|</span> ref   <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+---------+---------+-------+------+----------+--------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> test  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> inx_bad       <span class="token operator">|</span> inx_bad <span class="token operator">|</span> <span class="token number">4</span>       <span class="token operator">|</span> const <span class="token operator">|</span>    <span class="token number">2</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------+------------+------+---------------+---------+---------+-------+------+----------+--------------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解析：</p><ol><li>type=ref 查询索引表，返回匹配的数据，效率提升</li><li>key_len=4 这里只匹配到复合索引中b字段，并且b字段为int类型则占用4字节，符合要求</li><li>Using index 遍历所有表查询</li><li>using where in 语句使索引失效，所以导致需要进行回表查询</li></ol>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql优化 </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包的理解</title>
      <link href="/2019/11/08/bi-bao-de-li-jie/"/>
      <url>/2019/11/08/bi-bao-de-li-jie/</url>
      
        <content type="html"><![CDATA[<p>问题：</p><ol><li>什么是闭包</li><li>为什么需要闭包</li><li>闭包的优点和缺点</li><li>什么时候使用闭包</li><li>如何解决闭包造成的内存溢出</li></ol><p>参考文档：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures</a></li></ul><h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><p>在代码中变量分为：全局变量和局部变量。</p><p>在 js 运行环境中存在链式作用域，即子对象会一级级往上获取父对象作用域的变量。所以所有父对象的变量，子对象都可以访问，但是反之则不行。</p><p>但是有时候我们需要在外部获取函数内的局部变量，所以就出现了闭包。</p><p>闭包：从内部函数可以访问外部函数作用域的函数</p><p>闭包是由函数以及创建该函数的词法环境组成而形成。这个环境包含了这个闭包创建时所能访问的所有局部变量。</p><p>代码模板如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>inner 内可以访问 outer 内定义的所有变量，但是 outer 外部无法访问。</p><a id="more"></a><h3 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>保护变量不受外界影响 — 在作用域内添加一个私有变量</li><li>使函数可以访问其他函数的变量 — 在函数执行环境中，添加一个公有变量</li><li>保护变量不被回收 — 公有变量长期保存在内存中，不会被销毁</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>由于引用变量不被释放，会形成一个不被销毁的作用域，导致内存溢出</p><h3 id="闭包的使用场景"><a href="#闭包的使用场景" class="headerlink" title="闭包的使用场景"></a>闭包的使用场景</h3><ol><li>在函数中添加一个共享变量，但是这个变量不被外界所影响。</li><li>使用闭包实现对象的私有变量和私有方法。</li></ol><h3 id="如何解决闭包造成的内存溢出"><a href="#如何解决闭包造成的内存溢出" class="headerlink" title="如何解决闭包造成的内存溢出"></a>如何解决闭包造成的内存溢出</h3><ol><li>在闭包使用完毕之后，切断引用变量的使用，可以将引用的变量设置为 null</li><li>避免变量的循环赋值和引用</li></ol>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能优化之火焰图</title>
      <link href="/2019/10/12/xing-neng-you-hua-zhi-huo-yan-tu/"/>
      <url>/2019/10/12/xing-neng-you-hua-zhi-huo-yan-tu/</url>
      
        <content type="html"><![CDATA[<p>文章你所能了解的内容：</p><ul><li>如何定位影响系统性能瓶颈的问题</li><li>什么是火焰图</li><li>火焰图的 X，Y 轴所表达的信息是什么</li><li>如何根据火焰图，分析定位问题</li><li>如何生成火焰图</li></ul><p>参考文章：</p><ul><li><a href="https://clinicjs.org/documentation/" target="_blank" rel="noopener">https://clinicjs.org/documentation/</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/09/flame-graph.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/09/flame-graph.html</a></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在上一篇文章中，我们已经对系统进行了压力测试，了解了 2 个测试 demo 的 TPS，根据接口功能分析，发现在 demo2 中 TPS 有大幅度的下降，所以我们需要定位下问题，找出大量占用 CPU 的原因。</p><h2 id="火焰图"><a href="#火焰图" class="headerlink" title="火焰图"></a>火焰图</h2><p><img src="/images/clipboard2.png" alt="image"><br>火焰图是用来分析系统调用栈的 CPU 耗时情况，它的 X，Y 轴分别代表如下信息：</p><ul><li>X 轴：代表着调用栈的 CPU 消耗时间，X 轴越长，代表着占用的 CPU 的时间越长。</li><li>Y 轴：代表着全部的调用栈，每一层都是一个函数，调用栈越深，火焰图越高。顶部就是正在执行的函数，下一个函数是它的父函数，存在调用关系。</li></ul><p>我们在进行分析火焰图的时候，可以观察顶层哪个函数所占用的宽度越长，就可以表示这个函数可能存在问题。</p><a id="more"></a><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p><img src="/images/clipboard.png" alt="image"><br>从 Y 轴分析：a()函数存在 2 个分支，则代表着函数内存在一个判断语句。</p><p>从 X 轴分析：</p><ul><li>b()分支消耗的 CPU 大于 h()。</li><li>b()和 c()基本不消耗 CPU</li><li>g()消耗 CPU 最多的，d()的宽度最宽，但是它直接消耗 CPU 的时间很少。</li><li>分析问题首先要调查 g()函数，其次是 i()函数</li></ul><h2 id="生成火焰图"><a href="#生成火焰图" class="headerlink" title="生成火焰图"></a>生成火焰图</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-shell"><code class="language-shell">npm install -g clinic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h3><p>配合压力测试工具，autocannon 进行压力测，并且通过 clinic 记录测试时间内的调用栈函数的 CPU 消耗时间</p><p>这里进行压力测试的配置是：</p><ul><li>负载测试配置:10 个并发量，每个每秒发送 1 个请求，持续时间为 10 秒。</li><li>测试的接口包含了一段复杂的算法</li></ul><pre class="line-numbers language-shell"><code class="language-shell">clinic flame --on-port 'autocannon localhost:$PORT' -- node ./child-process-cpu-server.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如图：<br><img src="/images/huoyantudemo.png" alt="image"><br>根据图中分析结果，我们要观察下 .\child-process-cpu-server.js 22 行-25 行代码所执行内容，</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务压力测试</title>
      <link href="/2019/10/11/fu-wu-ya-li-ce-shi/"/>
      <url>/2019/10/11/fu-wu-ya-li-ce-shi/</url>
      
        <content type="html"><![CDATA[<p>参考文章：</p><ul><li><a href="https://juejin.im/post/5b827cbbe51d4538c021f2da" target="_blank" rel="noopener">https://juejin.im/post/5b827cbbe51d4538c021f2da</a></li><li><a href="https://github.com/mcollina/autocannon" target="_blank" rel="noopener">https://github.com/mcollina/autocannon</a></li></ul><p>文章你所能了解的内容：</p><ol><li>压力测试能做什么</li><li>怎么进行压力测试</li><li>如何分析压力测试结果</li></ol><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>当系统开发完成后，为了了解系统最大能够承受的并发量和在并发情况下的服务器负载情况，我们就需要在系统上线之前进行一些压力测试，了解系统的性能瓶颈，针对性进行优化。</p><p>负载测试指标：</p><ol><li>TPS 经常是业务核心逻辑测试结果的单位，它的定义是：系统每秒最多能够处理的请求数量。</li></ol><h2 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h2><p>做压力测试的工具有很多，例如：loadTest,ab,autocannon 等</p><p>这里我选用的是 autocannon ，因为它能够配合 node-clinic 进行性能优化。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-shell"><code class="language-shell">npm i -g autocannon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>-c :并发数量，默认为 10</li><li>-d :压力测试持续的时间，默认为 10 秒</li><li>-p :单个并发每秒发送的请求数量，默认为 1 次</li><li>-m :请求类型,默认为 GET</li><li>-b :请求报文体</li></ul><a id="more"></a><h3 id="实测"><a href="#实测" class="headerlink" title="实测"></a>实测</h3><h4 id="控制台运行"><a href="#控制台运行" class="headerlink" title="控制台运行"></a>控制台运行</h4><p>demo1</p><ul><li>负载测试配置:10 个并发量，每个每秒发送 1 个请求，持续时间为 10 秒。</li><li>测试的接口没有任何处理，非常的简单</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># 启动服务器$ node ./child-process-cpu-server.js$ autocannon -c 10 -d 10 -p 1 localhost:3002Running 10s test @ http://localhost:300210 connections┌─────────┬──────┬──────┬───────┬──────┬─────────┬─────────┬─────────┐│ Stat    │ 2.5% │ 50%  │ 97.5% │ 99%  │ Avg     │ Stdev   │ Max     │├─────────┼──────┼──────┼───────┼──────┼─────────┼─────────┼─────────┤│ Latency │ 0 ms │ 0 ms │ 2 ms  │ 2 ms │ 0.27 ms │ 0.65 ms │ 28.5 ms │└─────────┴──────┴──────┴───────┴──────┴─────────┴─────────┴─────────┘┌───────────┬────────┬────────┬─────────┬─────────┬──────────┬─────────┬────────┐│ Stat      │ 1%     │ 2.5%   │ 50%     │ 97.5%   │ Avg      │ Stdev   │ Min    │├───────────┼────────┼────────┼─────────┼─────────┼──────────┼─────────┼────────┤│ Req/Sec   │ 5143   │ 5143   │ 11047   │ 11967   │ 10490.73 │ 1790.16 │ 5140   │├───────────┼────────┼────────┼─────────┼─────────┼──────────┼─────────┼────────┤│ Bytes/Sec │ 1.1 MB │ 1.1 MB │ 2.36 MB │ 2.56 MB │ 2.24 MB  │ 383 kB  │ 1.1 MB │└───────────┴────────┴────────┴─────────┴─────────┴──────────┴─────────┴────────┘Req/Bytes counts sampled once per second.115k requests in 11.08s, 24.7 MB read<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在接下来我将并发数提升为 20，获得的结果与之前基本一致，可以我们就可以获得结果：</p><ul><li>10 秒总共发送了 115k 请求</li><li>每个请求平均被处理的时间是 0.27 ms</li><li>平均每秒能够处理的请求是 10490 个，TPS 等于：10490</li></ul><p>demo2</p><ul><li>负载测试配置:10 个并发量，每个每秒发送 1 个请求，持续时间为 10 秒。</li><li>测试的接口包含了一段复杂的算法</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># 启动服务器$ node ./child-process-cpu-server.js$ autocannon -c 10 -d 10 -p 1 localhost:3002/fib?m=30Running 10s test @ http://localhost:3002/fib?m=3010 connections┌─────────┬────────┬────────┬────────┬────────┬───────────┬──────────┬───────────┐│ Stat    │ 2.5%   │ 50%    │ 97.5%  │ 99%    │ Avg       │ Stdev    │ Max       │├─────────┼────────┼────────┼────────┼────────┼───────────┼──────────┼───────────┤│ Latency │ 226 ms │ 322 ms │ 495 ms │ 522 ms │ 328.59 ms │ 56.93 ms │ 532.35 ms │└─────────┴────────┴────────┴────────┴────────┴───────────┴──────────┴───────────┘┌───────────┬─────────┬─────────┬─────────┬─────────┬─────────┬───────┬─────────┐│ Stat      │ 1%      │ 2.5%    │ 50%     │ 97.5%   │ Avg     │ Stdev │ Min     │├───────────┼─────────┼─────────┼─────────┼─────────┼─────────┼───────┼─────────┤│ Req/Sec   │ 26      │ 26      │ 30      │ 34      │ 29.9    │ 2.17  │ 26      │├───────────┼─────────┼─────────┼─────────┼─────────┼─────────┼───────┼─────────┤│ Bytes/Sec │ 5.43 kB │ 5.43 kB │ 6.27 kB │ 7.11 kB │ 6.25 kB │ 453 B │ 5.43 kB │└───────────┴─────────┴─────────┴─────────┴─────────┴─────────┴───────┴─────────┘Req/Bytes counts sampled once per second.299 requests in 10.07s, 62.5 kB read<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为：</p><ul><li>10 秒总共发送了 299 请求</li><li>每个请求平均被处理的时间是 328.59 ms</li><li>平均每秒能够处理的请求是 29.9 个，TPS 等于：29.9</li></ul><p>根据结果可以发现，这个接口有很大的处理空间。由于 nodejs 运行环境为单线程，如果遇到密集的 CPU 运行，则会导致主线程卡死，等待处理结果。所以我们应该在进行负载测试的时候，进行性能监测，最好能够了解每个调用栈的 CPU 使用情况，针对性进行优化。</p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js异步编程实现方法</title>
      <link href="/2019/10/09/js-yi-bu-bian-cheng-shi-xian-fang-fa/"/>
      <url>/2019/10/09/js-yi-bu-bian-cheng-shi-xian-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>参考文章：</p><ul><li><a href="https://juejin.im/post/5c199c0ae51d452f6028a072" target="_blank" rel="noopener">https://juejin.im/post/5c199c0ae51d452f6028a072</a></li><li><a href="https://blog.csdn.net/qq_31001889/article/details/80321892" target="_blank" rel="noopener">https://blog.csdn.net/qq_31001889/article/details/80321892</a></li><li><a href="http://es6.ruanyifeng.com/#docs/generator-async" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/generator-async</a></li></ul><h2 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h2><p>由于 js 的单线程，如果没有异步编程方法，则主线程将直接卡死，极大的影响代码执行效率，所以 js 结合事件循环，实现了以下异步编程的方法：</p><ol><li>回调函数</li><li>事件监听(主要是前端的元素绑定监听事件，如 onClick)</li><li>发布/订阅</li><li>Promise 对象</li><li>generator 函数</li><li>async/await</li></ol><p>这里所说的异步为：将任务分为两部分，先执行其中一部分，然后执行其他任务，等第二部分做好了准备，再继续执行第二部分代码。简单的说就是不连续的执行。</p><p>异步实现的主要原理都是解决： js 主线程在执行代码的时候，遇到 I/O,计时器等异步耗时任务，将任务推到事件循环中，在事件循环遍历中，检测到任务状态完成后，要如何通知主线程继续执行内部代码。<img src="http://www.runoob.com/wp-content/uploads/2015/09/event_loop.jpg" alt="image"></p><p>核心需要理解的内容：</p><ol><li>名词的定义：回调函数，发布/订阅，Promise 对象，协程，genetator 函数，参数求值策略，thunk 函数</li><li>每个方法的优缺点</li><li>什么是错误优先，为什么要将错误对象传入回调函数中</li><li>Generator 函数为什么可以封装异步，是什么特性将它作为异步编程的完整解决方案</li><li>js 是什么求值策略</li><li>协程执行顺序</li><li>genetator 函数自动流程管理的 2 个实现方法</li><li>实现 发布/订阅(eventEmitter) , thunk 函数的自动流程管理 , promise 对象的自动流程管理</li></ol><p>示例代码仓库：<a href="https://github.com/ddzyan/javascript-example/tree/master/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">https://github.com/ddzyan/javascript-example/tree/master/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%96%B9%E6%B3%95</a></p><a id="more"></a><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>示例代码：callback.js</p><p>回调函数是 js 异步编程最基础的实现方法，开发者可以通过将第二部分任务包装在一个函数内，等第二部分做好准备了，再执行这个函数。</p><p>优点：</p><ol><li>代码容易理解</li><li>实现方法简单</li></ol><p>缺点</p><ol><li>代码混乱，不容易阅读和理解</li><li>代码耦合度高，多层回调容易造成回调地狱</li></ol><p>这里需要提到的是，nodejs 约定回调函数的第一个参数为错误对象，第二参数为传入的值，这就是错误优先原则。原因为代码在执行第二部分的回调函数时候，原本的上下文环境已经结束，无法捕捉抛出的异常，所以将异常传入回调函数，进行处理。</p><h3 id="发布-订阅"><a href="#发布-订阅" class="headerlink" title="发布/订阅"></a>发布/订阅</h3><p>示例代码：eventEmitter.js<br>采用事件驱动的模式，将第二部分代码包装在消息订阅的回调函数内，当第二部分准备好了，则通过消息发送通知执行第二部分代码。nodejs 的核心就是采用了 v8 引擎实现了事件驱动，异步非堵塞 I/O。</p><p>优点：</p><ol><li>代码耦合度低</li></ol><p>缺点</p><ol start="2"><li>代码分散，流程不容易理解</li></ol><h3 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a>Promise 对象</h3><p>示例代码：promise.js</p><p>Promise 为 es6 中的新语法，它的原理是将每个异步任务封装返回一个 Promise 对象，对象内管理着异步任务执行状态，当任务完成则通过 resolve 函数进行回调，失败则通过 reject 进行回调。</p><p>Promise 的写法是对回调函数进行改进，将原来回调函数的嵌套调用，修改为链式调用，使代码流程更容易理解。</p><p>优点：</p><ol><li>链接调用，代码流程容易理解</li><li>代码耦合度低</li></ol><p>缺点：</p><ol><li>每个结果都需要进行 retudn,然后在 then 方法进行获得，造成代码量冗余</li><li>语法比较复杂</li></ol><h3 id="generator-函数"><a href="#generator-函数" class="headerlink" title="generator 函数"></a>generator 函数</h3><h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h4><p>协程为多个线程，协助完成异步任务，执行流程如下：</p><ol><li>第一步，协程 A 开始执行</li><li>第二步，协程 A 执行到一半，进入暂停状态，执行权转接到协程 B</li><li>第三步，协程 B 过一段时间后，将执行权转接到 协程 A</li><li>第四部，协程 A 继续执行<br>这里的协程 A 就是异步任务</li></ol><h4 id="协程的-Generator-函数实现"><a href="#协程的-Generator-函数实现" class="headerlink" title="协程的 Generator 函数实现"></a>协程的 Generator 函数实现</h4><p>示例代码：generator.js</p><p>Generator 函数就是协程在 es6 中的实现，最大的特点就是可以交出函数的执行权(暂停执行代码)。函数执行返回一个遍历器对象，对象内具有 next 方法，每次执行 next ，才会执行内部的 yiel 后的异步方法，返回一个对象。对象具有 2 个属性，value 代表异步返回结果，done 代表遍历是否完成。</p><p>Generator 函数可以暂停和恢复执行，这是它可以封装异步任务的根本原因。<br>Generator 函数的 2 个特性，使他可以作为异步编程的完整解决方案：</p><ol><li>错误捕捉</li><li>数据交换</li></ol><p>优点：</p><ol><li>异步流程便是简洁</li></ol><p>缺点：</p><ol><li>无法自动进行流程管理</li></ol><p>Generator 函数是一个异步操作容器，它的自动执行需要一种机制，当异步操作有了结果，需要交还代码执行权力。可以实现的两种方法如下：</p><ol><li>回调函数。将异步操作封装成一个 thunk 函数，在 thunk 函数 内交还代码执行权。示例代码：thunk-callback-generator.js</li><li>promise 对象。将异步操作封装成一个 promise 对象，用 then 方法交还代码执行权，示例代码：promise-generator.js</li></ol><h4 id="thunk-函数"><a href="#thunk-函数" class="headerlink" title="thunk 函数"></a>thunk 函数</h4><p>编译器的 传名调用实现，将参数放到一个临时函数中，再将这个临时函数传入到函数体中，这个临时函数就被称为 thunk 函数</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">a</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">b</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="参数求值策略"><a href="#参数求值策略" class="headerlink" title="参数求值策略"></a>参数求值策略</h5><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>传值调用：参数在调用执行，就已经进行了计算，传入的为最终计算结果</li><li>传名调用：只有在使用到参数的时候，才会对参数进行计算。</li></ul><p>js 是传值调用</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用eslint+prettier规范你的代码</title>
      <link href="/2019/09/16/shi-yong-eslint-prettier-gui-fan-ni-de-dai-ma/"/>
      <url>/2019/09/16/shi-yong-eslint-prettier-gui-fan-ni-de-dai-ma/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>参考文档：<a href="https://www.cnblogs.com/itshare/p/11028299.html" target="_blank" rel="noopener">https://www.cnblogs.com/itshare/p/11028299.html</a></p><p>vsCode 开发 nodejs 的一些环境配置，内容包括以下几点：</p><ul><li>js 语法提示</li><li>nodejs 自带模块提示</li><li>代码规范性监测</li><li>代码自动修复</li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="初始化配置文件"><a href="#初始化配置文件" class="headerlink" title="初始化配置文件"></a>初始化配置文件</h4><pre class="line-numbers language-shell"><code class="language-shell">npm init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><a id="more"></a><h4 id="js-语法提示"><a href="#js-语法提示" class="headerlink" title="js 语法提示"></a>js 语法提示</h4><p>在项目跟目录下创建 jsconfig.json</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es6"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="nodejs-模块提示"><a href="#nodejs-模块提示" class="headerlink" title="nodejs 模块提示"></a>nodejs 模块提示</h4><pre class="line-numbers language-shell"><code class="language-shell">npm i typings -gtypings inittypings i dt~node --global --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用第三方模块的时候，也可以通过下载 dt 声明模块，来进行代码编写提示(不是必选)</p><pre class="line-numbers language-shell"><code class="language-shell"># 查询模块 axiostypings search  axios# 下载typings install dt~axios --global --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码规范化配置-eslint-prettier"><a href="#代码规范化配置-eslint-prettier" class="headerlink" title="代码规范化配置 eslint + prettier"></a>代码规范化配置 eslint + prettier</h4><p>首先 vsCode 下载 eslint + prettier 插件</p><p>项目配置依赖</p><pre class="line-numbers language-shell"><code class="language-shell">npm i -D prettiernpm i -D eslint-plugin-prettiernpm i -D eslint-config-prettier<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建 .eslintignore 忽略文件（不是必须，填写的路径将忽略验证）</p><pre><code>/test</code></pre><p>创建 .eslintrc.js 规则文件，规则采用 <a href="https://standardjs.com/readme-zhcn.html" target="_blank" rel="noopener">standard</a></p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  root<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  env<span class="token punctuation">:</span> <span class="token punctuation">{</span>    browser<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    es6<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    node<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">extends</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'standard'</span><span class="token punctuation">,</span> <span class="token string">'plugin:vue/essential'</span><span class="token punctuation">,</span> <span class="token string">'eslint:recommended'</span><span class="token punctuation">,</span> <span class="token string">'plugin:prettier/recommended'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'prettier/prettier'</span><span class="token punctuation">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// allow async-await</span>    <span class="token string">'generator-star-spacing'</span><span class="token punctuation">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string">'no-console'</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token string">'error'</span> <span class="token punctuation">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// allow debugger during development</span>    <span class="token string">'no-debugger'</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token string">'error'</span> <span class="token punctuation">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//强制使用单引号</span>    quotes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token string">'single'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//强制不使用分号结尾</span>    semi<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  parserOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    parser<span class="token punctuation">:</span> <span class="token string">'babel-eslint'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建 .prettierrc 规则文件，如果与 eslint 冲突，则以 .prettierrc 为准。如果编译器报警，则去除注释内容。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//一行的字符数，如果超过会进行换行，默认为80</span>  <span class="token string">"printWidth"</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//一个tab代表几个空格数，默认为80</span>  <span class="token string">"tabWidth"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//是否使用tab进行缩进，默认为false，表示用空格进行缩减</span>  <span class="token string">"useTabs"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//字符串是否使用单引号，默认为false，使用双引号</span>  <span class="token string">"singleQuote"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//行位是否使用分号，默认为true</span>  <span class="token string">"semi"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//是否使用尾逗号，有三个可选值"&lt;none|es5|all>"</span>  <span class="token string">"trailingComma"</span><span class="token punctuation">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//对象大括号直接是否有空格，默认为true，效果：{ foo: bar }</span>  <span class="token string">"bracketSpacing"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//代码的解析引擎，默认为babylon，与babel相同</span>  <span class="token string">"parser"</span><span class="token punctuation">:</span> <span class="token string">"babel"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//开启 eslint 支持</span>  <span class="token string">"eslintIntegration"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vsCode-配置"><a href="#vsCode-配置" class="headerlink" title="vsCode 配置"></a>vsCode 配置</h4><p>打开 setting.json 文件，加入如下配置</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"eslint.enable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"eslint.autoFixOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"eslint.validate"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"javascript"</span><span class="token punctuation">,</span>    <span class="token string">"javascriptreact"</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span>      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"vue"</span><span class="token punctuation">,</span>      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"react"</span><span class="token punctuation">,</span>      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置完毕后，每次 ctrl + s 保存代码，都将对代码进行规则验证和自动修复，如果没有自动修复，则将在控制台报警</p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eventLoop的事件处理机制</title>
      <link href="/2019/08/27/eventloop-de-shi-jian-chu-li-ji-zhi/"/>
      <url>/2019/08/27/eventloop-de-shi-jian-chu-li-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><ul><li>宏任务：js 主线程代码，定时器，I/O 操作</li><li>微任务：promise ， nodejs 独有的 process.nextTask()</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    宏任务<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    微任务<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行全部</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h4><ol><li>执行一个宏任务</li><li>执行全部微任务</li><li>如此循环</li></ol><a id="more"></a><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><p>此说明只针对 v10 或者以上版本，v11 修改为浏览器一致(日后补充)</p><pre class="line-numbers language-shell"><code class="language-shell">   ┌───────────────────────┐┌─>│        timers         ││  └──────────┬────────────┘│  ┌──────────┴────────────┐│  │     I/O callbacks     ││  └──────────┬────────────┘│  ┌──────────┴────────────┐│  │     idle, prepare     ││  └──────────┬────────────┘      ┌───────────────┐│  ┌──────────┴────────────┐      │   incoming:   ││  │         poll          │<─────┤  connections, ││  └──────────┬────────────┘      │   data, etc.  ││  ┌──────────┴────────────┐      └───────────────┘│  │        check          ││  └──────────┬────────────┘│  ┌──────────┴────────────┐└──┤    close callbacks    │   └───────────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    loopEvent<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>阶段<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">阶段</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        process<span class="token punctuation">.</span><span class="token function">nextTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">微任务</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    loopEvent<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文字-1"><a href="#文字-1" class="headerlink" title="文字"></a>文字</h4><ol><li>按照事件循环顺序执行全部宏任务</li><li>执行 process.nextTask();</li><li>执行所有微任务</li></ol><h4 id="事件循环-6-个阶段宏任务顺序"><a href="#事件循环-6-个阶段宏任务顺序" class="headerlink" title="事件循环 6 个阶段宏任务顺序"></a>事件循环 6 个阶段宏任务顺序</h4><p>time —&gt; I/O —&gt; pool —&gt; setImmediate —&gt; check —&gt; close queue</p><h5 id="pool"><a href="#pool" class="headerlink" title="pool"></a>pool</h5><p>为防止 poll phase 耗尽 event loop，libuv 也有一个最大值（基于系统），会在超过最大值之后停止轮询更多的事件</p><ul><li>获取新的 I/O ,并且执行 I/O 回调，事件循环将在这里堵塞</li><li>当设定的 immediate 或者 timers 超过上限，则执行下一个阶段</li></ul><p>到了 pool 阶段将执行所有 I/O queue，当任务全部情况或者堵塞时间超过了 timers ，则结束 pool 阶段，出现如下情况</p><ol><li>setImmediate 不为空，则执行 setImmediate queue，在执行 close queue</li><li>setImmediate 为空，time 不为空，则重新开始事件循环</li><li>setImmediate 为空，time 也为空，则不再继续</li></ol><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><h4 id="第一"><a href="#第一" class="headerlink" title="第一"></a>第一</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout4'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout3'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="nodejs-结果"><a href="#nodejs-结果" class="headerlink" title="nodejs 结果"></a>nodejs 结果</h5><ol><li>promise1</li><li>setTimeout1</li><li>setTimeout2</li><li>setTimeout3</li><li>promise2</li><li>5</li><li>promise3</li><li>setTimeout4</li></ol><h5 id="浏览器结果"><a href="#浏览器结果" class="headerlink" title="浏览器结果"></a>浏览器结果</h5><ol><li>promise1</li><li>setTimeout1</li><li>setTimeout2</li><li>promise2</li><li>5</li><li>promise3</li><li>setTimeout3</li><li>setTimeout4</li></ol>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose多容器服务创建</title>
      <link href="/2019/08/22/docker-compose-duo-rong-qi-fu-wu-chuang-jian/"/>
      <url>/2019/08/22/docker-compose-duo-rong-qi-fu-wu-chuang-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-compose-多容器服务"><a href="#docker-compose-多容器服务" class="headerlink" title="docker-compose 多容器服务"></a>docker-compose 多容器服务</h1><h2 id="本文目的"><a href="#本文目的" class="headerlink" title="本文目的"></a>本文目的</h2><ul><li>了解如何适用 docker-compose 编排多容器服务</li><li>在容器中，如何访问其他容器网络</li></ul><h2 id="服务用例"><a href="#服务用例" class="headerlink" title="服务用例"></a>服务用例</h2><p>下载项目：<a href="https://github.com/ddzyan/backend_docker-compose.git" target="_blank" rel="noopener">https://github.com/ddzyan/backend_docker-compose.git</a></p><h3 id="项目文件夹结构"><a href="#项目文件夹结构" class="headerlink" title="项目文件夹结构"></a>项目文件夹结构</h3><pre class="line-numbers language-shell"><code class="language-shell">$ tree -L 2.├── docker-compose.yml└── mysql    ├── conf    │   └── my.cnf    └── init        └── init.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><h3 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h3><h4 id="my-cnf"><a href="#my-cnf" class="headerlink" title="my.cnf"></a>my.cnf</h4><p>mysql 数据库配置文件</p><pre><code>[mysqld]pid-file    = /var/run/mysqld/mysqld.pidsocket      = /var/run/mysqld/mysqld.sockdatadir     = /var/lib/mysql#log-error  = /var/log/mysql/error.log# By default we only accept connections from localhostbind-address   = 0.0.0.0# Disabling symbolic-links is recommended to prevent assorted security risks#symbolic-links=0</code></pre><h4 id="init-sql"><a href="#init-sql" class="headerlink" title="init.sql"></a>init.sql</h4><p>mysql 初始化 sql,目的如下</p><ul><li>创建远程连接账号并且赋予权限，给 back_end 服务连接使用</li><li>创建 back_end 必需的数据库和表</li></ul><pre><code>use mysql;CREATE USER &#39;test&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;GRANT ALL PRIVILEGES ON *.* TO &#39;test&#39;@&#39;%&#39;;FLUSH PRIVILEGES;create database backend;use backend;CREATE TABLE `classroom` (  `id` bigint(10) unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;,  `classname` varchar(13) NOT NULL COMMENT &#39;班级名称&#39;,  `headTeacherId` bigint(10) unsigned DEFAULT NULL COMMENT &#39;班主任ID&#39;,  `createdAt` datetime DEFAULT NULL COMMENT &#39;创建时间&#39;,  `updatedAt` datetime DEFAULT NULL COMMENT &#39;创建时间&#39;,  PRIMARY KEY (`id`),  KEY `classname_index` (`classname`) USING BTREE) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4CREATE TABLE `user` (  `id` bigint(10) unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;,  `username` varchar(13) NOT NULL COMMENT &#39;账号名称&#39;,  `age` int(2) NOT NULL COMMENT &#39;年龄&#39;,  `password` varchar(20) NOT NULL COMMENT &#39;密码&#39;,  `sex` enum(&#39;1&#39;,&#39;0&#39;) NOT NULL COMMENT &#39;性别&#39;,  `classroomId` bigint(10) unsigned NOT NULL COMMENT &#39;班级ID&#39;,  `createdAt` datetime DEFAULT NULL COMMENT &#39;创建时间&#39;,  `updatedAt` datetime DEFAULT NULL COMMENT &#39;创建时间&#39;,  PRIMARY KEY (`id`),  KEY `classroomId` (`classroomId`),  KEY `username_index` (`username`) USING BTREE,  CONSTRAINT `user_ibfk_1` FOREIGN KEY (`classroomId`) REFERENCES `classroom` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=&#39;用户信息表&#39;</code></pre><h4 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h4><pre class="line-numbers language-yml"><code class="language-yml">version: '3'services:  backend:    container_name: ddz_backend    image: registry.cn-hangzhou.aliyuncs.com/zmscode/backend:1.0.0    environment:      NODE_ENV: production    ports:      - 3000:3000    volumes:      - './back_end/logs:/usr/src/back_end/logs'    command: pm2-runtime start ./start.config.js    depends_on:      - mysql      - redis  mysql:    container_name: ddz_mysql    environment:      MYSQL_ROOT_PASSWORD: 123456    image: mysql:5.7    ports:      - '3306:3306'    volumes:      - './mysql/conf/my.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf'      - './mysql/logs:/logs'      - './mysql/data:/var/lib/mysql'      - './mysql/init:/docker-entrypoint-initdb.d/'    restart: always  redis:    container_name: ddz_redis    image: redis:latest    ports:      - '6379:6379'    volumes:      - './redis/conf/redis.conf:/usr/local/etc/redis/redis.conf'      - './redis/data:/data'    restart: always    command: redis-server /usr/local/etc/redis/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h5><h6 id="back-end"><a href="#back-end" class="headerlink" title="back_end"></a>back_end</h6><ul><li>command 将覆盖 dockerfile 文件中的 CMD 指令</li><li>depends_on 设置 back_end 容器启动在 mysql 和 redis 之后，保证服务启动之前数据库和缓存容器已经创建成功</li></ul><h6 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h6><ul><li>environment 系统变量设置，配置 root 账号密码</li><li>volumes 容器卷映射 ，其中 init 文件夹映射的目的，是在 mysql 容器创建成功之后，执行初始化 sql</li><li>restart 重启策略，出问题就重启</li></ul><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>back_end 项目中连接 mysql 和 redis ，将不采用 127.0.0.1 或者其他指定 IP 方式，将采用如下方式</p><pre class="line-numbers language-js"><code class="language-js">url<span class="token punctuation">:</span> <span class="token string">'redis://redis:6379/1'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原因是在服务创建的时候，docker-compose 会创建一个默认的网络，配置的所有容器都将在这个网络下创建和互相访问，访问的方式为 容器名称 进行，docker-compose 会进行解析为指定的 ip，用于连接</p><h3 id="服务操作"><a href="#服务操作" class="headerlink" title="服务操作"></a>服务操作</h3><pre class="line-numbers language-shell"><code class="language-shell"># 构建，启动docker-compose -f ./docker-compose.yml up# 关闭，删除容器docker-compose -f ./docker-compose.yml down# 查看容器docker-compose -f ./docker-compose.yml ps# 查看日志docker-compose -f ./docker-compose.yml logs -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose实战操作</title>
      <link href="/2019/08/22/docker-compose-shi-zhan-cao-zuo/"/>
      <url>/2019/08/22/docker-compose-shi-zhan-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/hjxzb/article/details/84927567#6_131" target="_blank" rel="noopener">https://blog.csdn.net/hjxzb/article/details/84927567#6_131</a></li><li><a href="https://docs.docker.com/compose/install/#install-compose" target="_blank" rel="noopener">https://docs.docker.com/compose/install/#install-compose</a></li></ul><h3 id="了解概念"><a href="#了解概念" class="headerlink" title="了解概念"></a>了解概念</h3><ul><li>作用<ul><li>快速拉起一个服务，这个服务可以使一个容器或者多个容器组成</li><li>编排管理容器</li><li>定义和运行复杂 docker 镜像,避免使用 shell 指令创建</li></ul></li></ul><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>step1 确认内核版本</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">uname</span> -r//输出的linux内核版本是3.10以上并且是64位的centos版本，才能支持安装。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>step2 下载最新版本安装包</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -s<span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -m<span class="token variable">)</span></span> -o /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>step3 修改二进制文件权限</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>step3 测试</p><pre class="line-numbers language-bash"><code class="language-bash">docker-compose --version//输出版本号则正确<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><pre class="line-numbers language-shell"><code class="language-shell">//使用curl安装sudo rm /usr/local/bin/docker-compose//使用pip安装sudo pip uninstall docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>在执行指令的目录下必须存在 docker-compose.yml 文件,指令只会对配置文件内的服务或者容器起效</p><pre class="line-numbers language-shell"><code class="language-shell"># 运行指定文件 默认则为 docker-compose.yml,下面所有指令都适用docker-compose -f ./docker-compose-debug.yml up -d# 自动完成包括构建镜像、创建服务、启动服务并关联服务相关容器的一系列操作docker-compose up -d# 删除服务内的所有容器和镜像docker-compose down# 显示服务内的所有容器docker-compose ps# 构建docker-compose build# 实时查看日志，加上容器名称则只看该容器日志，否则查看服务内所有容器的日志docker-compose logs -f# 暂停/恢复/启动/停止 服务docker-compose  pause/unpause/start/stop# 删除前必须停止docker-compose rm# 进入容器docker-compose exec mysql bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="docker-compose-yml-参数"><a href="#docker-compose-yml-参数" class="headerlink" title="docker-compose.yml 参数"></a>docker-compose.yml 参数</h3><ul><li>卷:volumes</li><li>端口:ports</li><li>环境变量:environment</li><li>容器名称:container_name</li><li>重启策略:restart</li><li>镜像:image</li><li>命令，将覆盖镜像文件内的 CMD:command</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="从-dockerfile-构建容器"><a href="#从-dockerfile-构建容器" class="headerlink" title="从 dockerfile 构建容器"></a>从 dockerfile 构建容器</h4><p>docker-compose.yml</p><pre class="line-numbers language-yml"><code class="language-yml">version: '3'services:  back_end:    build:      context: ./      dockerfile: DockerFile    image: back_end    environment:      NODE_ENV: production    ports:      - 3000:3000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h4><p>docker-compose.yml</p><pre><code>version: &quot;3&quot;services:  redis:    container_name: redis    image: redis:latest    ports:      - &quot;6379:6379&quot;    volumes:      - &quot;./conf/redis.conf:/etc/redis/redis.conf&quot;      - &quot;./data:/data&quot;    restart: always    command: redis-server /etc/redis/redis.conf</code></pre><h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><p>目录结构</p><pre class="line-numbers language-shell"><code class="language-shell">── mysql    ├── conf    │   └── my.cnf    └── init        └── init.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h5><pre class="line-numbers language-shell"><code class="language-shell">vim ./mysql/conf/my.cnf[mysqld]pid-file    = /var/run/mysqld/mysqld.pidsocket      = /var/run/mysqld/mysqld.sockdatadir     = /var/lib/mysql#log-error  = /var/log/mysql/error.log# By default we only accept connections from localhostbind-address   = 0.0.0.0# Disabling symbolic-links is recommended to prevent assorted security risks#symbolic-links=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化 init.sql ，在容器创建完成后将执行</p><pre class="line-numbers language-sql"><code class="language-sql">vim <span class="token punctuation">.</span><span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token operator">/</span>init<span class="token punctuation">.</span>sql<span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'test'</span>@'<span class="token operator">%</span><span class="token string">' IDENTIFIED WITH mysql_native_password BY '</span><span class="token number">123456</span><span class="token string">';GRANT ALL PRIVILEGES ON *.* TO '</span>test<span class="token string">'@'</span><span class="token operator">%</span>'<span class="token punctuation">;</span>FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加远程账号</li><li>创建基础数据库</li></ul><p>docker-compose.yml</p><pre class="line-numbers language-yml"><code class="language-yml">version: '3'services:  mysql:    container_name: mysql    environment:      MYSQL_ROOT_PASSWORD: 123456    image: mysql:5.7    ports:      - '3306:3306'    volumes:      - './mysql/conf/my.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf'      - './mysql/logs:/logs'      - './mysql/data:/var/lib/mysql'      - './mysql/init:/docker-entrypoint-initdb.d/'    restart: always<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs生成脚手架</title>
      <link href="/2019/08/21/nodejs-sheng-cheng-jiao-shou-jia/"/>
      <url>/2019/08/21/nodejs-sheng-cheng-jiao-shou-jia/</url>
      
        <content type="html"><![CDATA[<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li>代码示例仓库：<a href="https://github.com/ddzyan/chain-cli" target="_blank" rel="noopener">https://github.com/ddzyan/chain-cli</a></li><li>参考文章<ul><li><a href="https://github.com/lin-xin/blog/issues/27" target="_blank" rel="noopener">https://github.com/lin-xin/blog/issues/27</a></li><li><a href="https://github.com/ykfe/koa-generator#readme" target="_blank" rel="noopener">https://github.com/ykfe/koa-generator#readme</a></li></ul></li></ul><h2 id="本文目的"><a href="#本文目的" class="headerlink" title="本文目的"></a>本文目的</h2><ul><li>了解脚手架是什么，有什么作用</li><li>如何使用 nodejs 创建一个脚手架模块</li></ul><h3 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h3><p>脚手架是创建基础代码框架的工具。</p><p>脚手架可以通过交互模式（需要开发支持）快速生成基础代码模板，避免从零开始导致的时间浪费，并且利于团队使用。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>涉及的代码，请到示例仓库中获取</p><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><ul><li>commander：解析用户输入的指令，并且执行相关操作</li><li>download-git-repo：下载和提取 github 代码，并且放到指定文件夹内</li><li>handlebars：替换模板内的指定内容，用于创建指定文件</li><li>ora：下载进度动画，避免长时间拉取代码无反馈</li><li>chalk：使控制台输出的内容，可以设置颜色，方便识别</li><li>inquirer：交互式获取用户输入信息，用户创建指定文件</li><li>log-symbols：可以在终端上显示出 √ 或 × 等的图标</li></ul><a id="more"></a><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p>需要在入口文件上输入以下内容，使系统指定要用什么程序去启动，与 python 代码类似，否则可能出现如下报错<br><img src="/images/%E8%84%9A%E6%89%8B%E6%9E%B6%E6%8A%A5%E9%94%99linux.png" alt="image"><br><img src="/images/%E8%84%9A%E6%89%8B%E6%9E%B6%E6%8A%A5%E9%94%99windows.png" alt="image"></p><pre class="line-numbers language-js"><code class="language-js">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>koa2-typescript开发后台</title>
      <link href="/2019/08/20/koa2-typescript-kai-fa-hou-tai/"/>
      <url>/2019/08/20/koa2-typescript-kai-fa-hou-tai/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="本文目的"><a href="#本文目的" class="headerlink" title="本文目的"></a>本文目的</h3><ul><li>学习 typescript 在后端中的应用。typescript 是 javascript 的超集，他提供了静态语言强类型的支持，可以在项目编译阶段提早发现类型的错误，避免在项目在运行阶段才出现，提高代码开发效率。</li><li>结合当前流行的 koa 框架，快速上手 typescript 在后端开发中的使用，使之有真正能输出的项目。</li><li>代码仓库：<a href="https://github.com/ddzyan/koa2-ts" target="_blank" rel="noopener">https://github.com/ddzyan/koa2-ts</a></li></ul><h3 id="如何创建-koa-typescript-项目"><a href="#如何创建-koa-typescript-项目" class="headerlink" title="如何创建 koa/typescript 项目"></a>如何创建 koa/typescript 项目</h3><p>本文首选不采用脚手架的方式创建项目，目的在于了解项目的基础结构。</p><h4 id="创建基础文件"><a href="#创建基础文件" class="headerlink" title="创建基础文件"></a>创建基础文件</h4><pre class="line-numbers language-shell"><code class="language-shell">mkdir src distnpm initnpm i koa --savenpm i --save-dev @types/koa tslint typescript<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><p>tsconfig.json</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"commonjs"</span><span class="token punctuation">,</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es2015"</span><span class="token punctuation">,</span>    <span class="token property">"noImplicitAny"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>    <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"dist"</span><span class="token punctuation">,</span>    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span>    <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules/*"</span><span class="token punctuation">,</span> <span class="token string">"src/types/*"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/**/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>./src/server.ts</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">debugger</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> as Koa <span class="token keyword">from</span> <span class="token string">'koa'</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ctx <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'hello word'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running at http://localhost:3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Press CTRL-C to stop \n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> app<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 package.json</p><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"tsc"</span><span class="token operator">:</span> <span class="token string">"tsc"</span><span class="token punctuation">,</span>    <span class="token property">"tsc:w"</span><span class="token operator">:</span> <span class="token string">"tsc -w"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>.vscode 目录</p><ul><li>launch.json 添加 debug 配置</li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  // 使用 IntelliSense 了解相关属性。  // 悬停以查看现有属性的描述。  // 欲了解更多信息，请访问<span class="token operator">:</span> https<span class="token operator">:</span>//go.microsoft.com/fwlink/?linkid=<span class="token number">830387</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>  <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Current JS File"</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>      <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>      <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${workspaceRoot}/dist/server.js"</span><span class="token punctuation">,</span>      <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${workspaceRoot}"</span><span class="token punctuation">,</span>      <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"inspector"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>      <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Launch Program"</span><span class="token punctuation">,</span>      <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}/dist/server.js"</span><span class="token punctuation">,</span>      <span class="token property">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">"npm: build"</span><span class="token punctuation">,</span>      <span class="token property">"outFiles"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"${workspaceFolder}/dist/**/*.js"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>tasks.json</li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  // 有关 tasks.json 格式的文档，请参见  // https<span class="token operator">:</span>//go.microsoft.com/fwlink/?LinkId=<span class="token number">733558</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"typescript"</span><span class="token punctuation">,</span>      <span class="token property">"tsconfig"</span><span class="token operator">:</span> <span class="token string">"tsconfig.json"</span><span class="token punctuation">,</span>      <span class="token property">"option"</span><span class="token operator">:</span> <span class="token string">"watch"</span><span class="token punctuation">,</span>      <span class="token property">"problemMatcher"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"$tsc-watch"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击 vscode 终端 —&gt; 运行任务 —&gt;ts watch：typescript.json，之后每次编辑 ts 文件将自动转编译为 js 文件</p><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>Launch Program ，点击 F5 将直接运行转换后的 js 文件，调试转换后的 js 代码</p><h4 id="直接调试"><a href="#直接调试" class="headerlink" title="直接调试"></a>直接调试</h4><p>ts-node 调试 ts 文件时，不会显式生成 js。假如你不想编译为 js 后 在调试，可以考虑这种方式。</p><h5 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h5><pre class="line-numbers language-shell"><code class="language-shell">npm i ts-node --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加 launch.json</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Current TS File"</span><span class="token punctuation">,</span>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>  <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>  <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${workspaceRoot}/node_modules/ts-node/dist/_bin.js"</span><span class="token punctuation">,</span>  <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"${relativeFile}"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${workspaceRoot}"</span><span class="token punctuation">,</span>  <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"inspector"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 server.ts 头部添加 debugger，上面代码已经存在</p><p>插入断点，选择指定的 debug 模式，F5 运行</p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker打包node项目</title>
      <link href="/2019/06/11/docker-da-bao-node-xiang-mu/"/>
      <url>/2019/06/11/docker-da-bao-node-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="常规操作的问题"><a href="#常规操作的问题" class="headerlink" title="常规操作的问题"></a>常规操作的问题</h3><p>一个项目成功运行需要依赖于：系统版本，代码版本，运行环境，依赖包版本等综合因素控制。如果我们提交代码给运行只提交代码版本，可能会导致因为其他依赖不同，而产生的各种问题。</p><p>在 node 中即使使用 package-lock.json，控制依赖包的版本，也无法解决以下的问题：</p><ol><li>安装速度慢，如果是集群化部署，影响更大</li><li>依赖包所依赖的包版本的管理</li><li>回滚的速度慢</li></ol><h3 id="docker-的优势"><a href="#docker-的优势" class="headerlink" title="docker 的优势"></a>docker 的优势</h3><ul><li>将一个完整可运行的环境（构建期就把依赖打包）的镜像文件，提交给运维进行部署，从而解决依赖包版本不一致问题</li><li>镜像的启动速度非常的快（几秒以内），也大大加快了部署和回滚的速度，降低了运维操作时间和对线上的影响。</li></ul><h3 id="上线流程"><a href="#上线流程" class="headerlink" title="上线流程"></a>上线流程</h3><p>编写—&gt;测试—&gt;代码评审—&gt;合并分支—&gt;打包（构建期就把依赖打包）—-&gt;部署（回滚）</p><a id="more"></a><h2 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h2><h3 id="修改启动脚本（非必须）"><a href="#修改启动脚本（非必须）" class="headerlink" title="修改启动脚本（非必须）"></a>修改启动脚本（非必须）</h3><h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><p>目的：将直接在前端运行，输出的日志可以直接在 docker logs 中查看</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"egg-scripts start"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><pre><code>FROM node:10.15.2-alpineRUN apk --update add tzdata \    &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \    &amp;&amp; echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone \    &amp;&amp; apk del tzdataRUN mkdir -p /usr/src/appWORKDIR /usr/src/app# add npm packageCOPY package.json /usr/src/app/package.jsonRUN npm i --registry=https://registry.npm.taobao.org# copy codeCOPY . /usr/src/appEXPOSE 7003CMD npm start</code></pre><h2 id="操作指令"><a href="#操作指令" class="headerlink" title="操作指令"></a>操作指令</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 构建镜像</span><span class="token function">sudo</span> docker build -t iost-gateway  <span class="token keyword">.</span><span class="token comment" spellcheck="true"># 启动容器</span><span class="token function">sudo</span> docker run -d --name iost-gateway -p 7007:7007 -v :/root/logs/iost-funds  iost-gateway<span class="token comment" spellcheck="true"># 进入容器</span>docker <span class="token function">exec</span> -it iost-gateway /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode使用心得</title>
      <link href="/2019/06/06/vscode-shi-yong-xin-de/"/>
      <url>/2019/06/06/vscode-shi-yong-xin-de/</url>
      
        <content type="html"><![CDATA[<p>最近看了一些 vscode 官方对编写 js 代码的介绍文章，在此记录一些心得</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://code.visualstudio.com/docs/languages/javascript" target="_blank" rel="noopener">https://code.visualstudio.com/docs/languages/javascript</a></li><li><a href="https://code.visualstudio.com/docs/languages/jsconfig" target="_blank" rel="noopener">https://code.visualstudio.com/docs/languages/jsconfig</a></li></ul><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h3 id="jsconfig-json"><a href="#jsconfig-json" class="headerlink" title="jsconfig.json"></a>jsconfig.json</h3><p>目的解决 vsCode 编写 js 项目语法不提示，参数类型无法检查和引用的包方法不提示问题</p><p>目录中存在 jsconfig.json 文件表示该目录是 JavaScript 项目的根目录。jsconfig.json 文件指定根文件和 JavaScript 语言服务提供的功能选项。</p><p>推荐 vsCode 编译器下的 js 项目都创建在项目根目录下创建 jsconfig.json。</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>实现 js 语法提示，代码类型检查，部分引用包的方法提示等</p><h4 id="jsconfig-json-常用配置"><a href="#jsconfig-json-常用配置" class="headerlink" title="jsconfig.json 常用配置"></a>jsconfig.json 常用配置</h4><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es6"</span><span class="token punctuation">,</span>    <span class="token property">"checkJs"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><ul><li>target：默认的语法提示库</li><li>checkJs：启用 js 文件类型检查</li><li>exclude：不包含的文件</li></ul><p>在单个文件开头设置 // @ts-nocheck ，则不进行类型检查</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// @ts-nocheck</span><span class="token keyword">let</span> easy <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>easy <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// no error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="方法注释"><a href="#方法注释" class="headerlink" title="方法注释"></a>方法注释</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 计算两个数字之和 * @param {number} a 参数A * @param {number} b 参数B * @returns {number} 返回两数之和 */</span><span class="token keyword">function</span> <span class="token function">sumAB</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">sumAB</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="vsCode-快捷键"><a href="#vsCode-快捷键" class="headerlink" title="vsCode 快捷键"></a>vsCode 快捷键</h3><ul><li>在语法提示时，按 Tab 键插入最佳匹配</li><li>F9 在当前行插入断点</li><li>F2 方法改名</li></ul><h3 id="vsCode"><a href="#vsCode" class="headerlink" title="vsCode"></a>vsCode</h3><h4 id="“editor-renderIndentGuides”"><a href="#“editor-renderIndentGuides”" class="headerlink" title="“editor.renderIndentGuides”"></a>“editor.renderIndentGuides”</h4><ul><li>true：控制编辑器呈现缩进参考线。</li></ul><h4 id="“editor-wordSeparators”"><a href="#“editor-wordSeparators”" class="headerlink" title="“editor.wordSeparators”"></a>“editor.wordSeparators”</h4><ul><li>“./\()&quot;‘:,.;&lt;&gt;<del>!@#$%^&amp;*|+=[]{}`</del>?”：双击选中词语（包含下划线、中横线等分割的词语）。</li></ul><h4 id="“javascript-updateImportsOnFileMove-enabled”"><a href="#“javascript-updateImportsOnFileMove-enabled”" class="headerlink" title="“javascript.updateImportsOnFileMove.enabled”"></a>“javascript.updateImportsOnFileMove.enabled”</h4><ul><li>“prompt” - 默认值。询问是否应为每个文件移动更新路径。</li><li>“always” - 始终自动更新路径。</li><li>“never” - 不要自动更新路径，也不要提示。</li></ul><h4 id="“javascript-format-insertSpaceBeforeFunctionParenthesis”"><a href="#“javascript-format-insertSpaceBeforeFunctionParenthesis”" class="headerlink" title="“javascript.format.insertSpaceBeforeFunctionParenthesis”"></a>“javascript.format.insertSpaceBeforeFunctionParenthesis”</h4><ul><li>false：js 代码保存时不在函数括号前添加一个空格</li></ul><h4 id="“javascript-referencesCodeLens-enabled”"><a href="#“javascript-referencesCodeLens-enabled”" class="headerlink" title="“javascript.referencesCodeLens.enabled”"></a>“javascript.referencesCodeLens.enabled”</h4><ul><li>true：显示类的方法，属性和导出对象的内联引用计数，单击引用计数以快速浏览引用列表<br><img src="https://code.visualstudio.com/assets/docs/languages/javascript/references-codelens.png" alt="image"><br><img src="https://code.visualstudio.com/assets/docs/languages/javascript/references-codelens-peek.png" alt="image"></li></ul>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode调试ts</title>
      <link href="/2019/04/22/vscode-diao-shi-ts/"/>
      <url>/2019/04/22/vscode-diao-shi-ts/</url>
      
        <content type="html"><![CDATA[<p>参考文章：</p><ul><li><a href="https://segmentfault.com/a/1190000011935122" target="_blank" rel="noopener">https://segmentfault.com/a/1190000011935122</a></li><li><a href="https://medium.com/@rossbulat/typescript-introduction-with-nodejs-c160c4362746" target="_blank" rel="noopener">https://medium.com/@rossbulat/typescript-introduction-with-nodejs-c160c4362746</a></li></ul><h2 id="编译后调试"><a href="#编译后调试" class="headerlink" title="编译后调试"></a>编译后调试</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> typescript --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置任务"><a href="#配置任务" class="headerlink" title="配置任务"></a>配置任务</h3><h4 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h4><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"commonjs"</span><span class="token punctuation">,</span>    <span class="token property">"esModuleInterop"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es6"</span><span class="token punctuation">,</span>    <span class="token property">"noImplicitAny"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>    <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"dist"</span><span class="token punctuation">,</span>    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span>    <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules/*"</span><span class="token punctuation">,</span> <span class="token string">"src/types/*"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/**/*"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><h4 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h4><ul><li>“module”: “commonjs”： 定义输出模块类型。commonjs 是 Node.js 中使用的标准模块格式。</li><li>“esModuleInterop”：true：允许使用备用模块导入语法; 例如你可能会使用语法：import bar from ‘foobar’;</li><li>“target”: “es6”：输出 Javascript 语言规范。NodeJS 支持 ES6，因此我们将其设置为 ES6。</li><li>“noImplicitAny”: true：将此设置为 true 会在使用默认的 any 类型时抛出错误。</li><li>“moduleResolution”: “node”：Typescript 将模拟 Node 的模块解析策略。</li><li>“sourceMap”: true：Typescript 源码将与 Javascript 一起输出。 以便我们在进行断点调试时将运行的 Javascript 代码映射到 Typescript 上。</li><li>“outDir”: “dist”：编译生成的 .js 文件输出路径。通常使用 dist/ 目录。</li><li>include：可以配置一组文件路径来指定编译哪些文件，这里我们添加了 src/ 下的所有文件。</li></ul><h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"tsc"</span><span class="token operator">:</span> <span class="token string">"tsc"</span><span class="token punctuation">,</span><span class="token property">"tsc:w"</span><span class="token operator">:</span> <span class="token string">"tsc -w"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="vscode-tasks-json"><a href="#vscode-tasks-json" class="headerlink" title=".vscode/tasks.json"></a>.vscode/tasks.json</h4><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  // 有关 tasks.json 格式的文档，请参见  // https<span class="token operator">:</span>//go.microsoft.com/fwlink/?LinkId=<span class="token number">733558</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"typescript"</span><span class="token punctuation">,</span>      <span class="token property">"tsconfig"</span><span class="token operator">:</span> <span class="token string">"tsconfig.json"</span><span class="token punctuation">,</span>      <span class="token property">"option"</span><span class="token operator">:</span> <span class="token string">"watch"</span><span class="token punctuation">,</span>      <span class="token property">"problemMatcher"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"$tsc-watch"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击 vscode 终端 —&gt; 运行任务 —&gt;ts 监视：typescript.json，之后每次编辑 ts 文件将自动转编译为 js 文件</p><h4 id="vscode-launch-json"><a href="#vscode-launch-json" class="headerlink" title=".vscode/launch.json"></a>.vscode/launch.json</h4><p>添加 debug 配置</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Current JS File"</span><span class="token punctuation">,</span>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>  <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>  <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${workspaceRoot}/dist/index.js"</span><span class="token punctuation">,</span>  <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${workspaceRoot}"</span><span class="token punctuation">,</span>  <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"inspector"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>program :选择要执行的文件</li></ul><p>记住在 F5 debug 之前，选择当前配置的 debug 模式，并且在对应文件的 ts 文件中插入断点</p><h2 id="直接调试"><a href="#直接调试" class="headerlink" title="直接调试"></a>直接调试</h2><p>ts-node 调试 ts 文件时，不会显式生成 js。假如你不想编译为 js 后 在调试，可以考虑这种方式。</p><h3 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i typescript --save-dev<span class="token function">npm</span> i ts-node --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="配置任务-1"><a href="#配置任务-1" class="headerlink" title="配置任务"></a>配置任务</h3><h4 id="vscode-launch-json-1"><a href="#vscode-launch-json-1" class="headerlink" title=".vscode/launch.json"></a>.vscode/launch.json</h4><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Current TS File"</span><span class="token punctuation">,</span>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>  <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>  <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${workspaceRoot}/node_modules/ts-node/dist/_bin.js"</span><span class="token punctuation">,</span>  <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"${relativeFile}"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${workspaceRoot}"</span><span class="token punctuation">,</span>  <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"inspector"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>在要调试的文件头部添加 debugger</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">debugger</span><span class="token punctuation">;</span><span class="token keyword">const</span> message<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'hello word'</span><span class="token punctuation">;</span><span class="token keyword">const</span> abc<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> message<span class="token punctuation">;</span><span class="token keyword">const</span> aaa<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> abc<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入断点，选择指定的 debug 模式，F5 运行</p>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Locust---压力测试快速上手</title>
      <link href="/2019/02/19/locust-ya-li-ce-shi-kuai-su-shang-shou/"/>
      <url>/2019/02/19/locust-ya-li-ce-shi-kuai-su-shang-shou/</url>
      
        <content type="html"><![CDATA[<h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p>开发者文档：<a href="https://docs.locust.io/en/stable/" target="_blank" rel="noopener">https://docs.locust.io/en/stable/</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Locust是一款易于使用的分布式用户负载测试工具。它用于对网站（或其他系统）进行负载测试，并确定系统可以处理多少并发用户。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>使用python编写测试脚本</li><li>支持模拟数十万用户</li><li>基于web的操作界面</li><li>可以测试任何网站</li></ol><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>系统：centos 7</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装pip</span>$ <span class="token function">sudo</span> yum -y <span class="token function">install</span> epel-release$ <span class="token function">sudo</span> yum -y <span class="token function">install</span> python-pip<span class="token comment" spellcheck="true"># 安装 Locust</span>$ pip <span class="token function">install</span> locustio<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1><p>项目代码：<a href="https://github.com/ddzyan/node-module-example/tree/master/pressure-test" target="_blank" rel="noopener">https://github.com/ddzyan/node-module-example/tree/master/pressure-test</a></p><p>创建文件 locust_test.py</p><pre class="line-numbers language-py"><code class="language-py">from locust import HttpLocust, TaskSet, taskclass koaHttp(TaskSet):    @task(1)    def index(self):        self.client.get("/")class WebsiteUser(HttpLocust):    weight = 1    task_set = koaHttp    min_wait = 5000    max_wait = 9000    host=http://localhost:3000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="HttpLocust"><a href="#HttpLocust" class="headerlink" title="HttpLocust"></a>HttpLocust</h3><p>HttpLocust 类继承 Locust 的类，并为它添加一个客户端属性，它是 HttpSession的一个实例 ，可用于使HTTP请求。</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li>task_set：指定定义用户行为的类,包含一组任务</li><li>min_wait：最小的等待时间，毫秒</li><li>max_wait：最大的等待时间，毫秒 两者为声明则默认为1秒</li><li>host：加载的主机的URL前缀</li><li>weight：运行的次数比例</li></ul><h3 id="TaskSet"><a href="#TaskSet" class="headerlink" title="TaskSet"></a>TaskSet</h3><p>这里我们定义了一个 Locust 的任务，它们是带有一个参数（Locust类实例）的普通Python callables ，这些任务收集在tasks属性的TaskSet类下。</p><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><p>@task(1)：任务装饰器，参数为运行次数的比例</p><h2 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h2><pre class="line-numbers language-bash"><code class="language-bash">$ locust -f ./locust_test.py<span class="token punctuation">[</span>2019-02-19 02:03:23,151<span class="token punctuation">]</span> VM_0_14_centos/INFO/locust.main: Starting web monitor at *:8089<span class="token punctuation">[</span>2019-02-19 02:03:23,151<span class="token punctuation">]</span> VM_0_14_centos/INFO/locust.main: Starting Locust 0.9.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>打开测试界面：<a href="http://127.0.0.1:8089" target="_blank" rel="noopener">http://127.0.0.1:8089</a></p><h3 id="设置界面"><a href="#设置界面" class="headerlink" title="设置界面"></a>设置界面</h3><p><img src="/images/locust-set.png" alt="image|1901x821"></p><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>Number of users to simulate: 设置模拟用户数</li><li>Hatch rate(users spawned/second): 每秒产生(启动)的虚拟用户数</li><li>点击 “Start swarming” 按钮，开始运行性能测试</li></ul><h3 id="测试界面"><a href="#测试界面" class="headerlink" title="测试界面"></a>测试界面</h3><p><img src="/images/locust-result.png" alt="image|1901x821"></p><h4 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>Type: 请求的类型，例如GET/POST</li><li>Name: 请求的路径</li><li>request: 当前请求的数量</li><li>fails: 当前请求失败的数量</li><li>Median: 中间值，单位毫秒，一半的服务器响应时间低于该值，而另一半高于该值</li><li>Average: 平均值，单位毫秒，所有请求的平均响应时间</li><li>Min: 请求的最小服务器响应时间，单位毫秒</li><li>Max: 请求的最大服务器响应时间，单位毫秒</li><li>Content Size: 单个请求的大小，单位字节</li><li>reqs/sec: 是每秒钟请求的个数</li></ul>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs性能调优--解决CPU占用过高问题</title>
      <link href="/2018/12/10/nodejs-xing-neng-diao-you-jie-jue-cpu-zhan-yong-guo-gao-wen-ti/"/>
      <url>/2018/12/10/nodejs-xing-neng-diao-you-jie-jue-cpu-zhan-yong-guo-gao-wen-ti/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Nodejs(服务端)的角度来看，JS本身的执行时间对服务的影响至关重要，如果执行时间从30ms降低到3ms，理论上QPS就能提升10倍，换句话说，以前要10台服务器才能扛住的流量现在1台服务器就能扛住，而且响应时间更短.</p><ul><li>QPS：每秒查询率</li></ul><h4 id="方法1：Node-自带-profile"><a href="#方法1：Node-自带-profile" class="headerlink" title="方法1：Node 自带 profile"></a>方法1：Node 自带 profile</h4><h5 id="以–prof参数启动Node应用"><a href="#以–prof参数启动Node应用" class="headerlink" title="以–prof参数启动Node应用"></a>以–prof参数启动Node应用</h5><pre class="line-numbers language-bash"><code class="language-bash">node --prof <span class="token punctuation">[</span>启动脚本<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="通过压测工具loadtest向服务施压"><a href="#通过压测工具loadtest向服务施压" class="headerlink" title="通过压测工具loadtest向服务施压"></a>通过压测工具loadtest向服务施压</h5><pre class="line-numbers language-bash"><code class="language-bash">loadtest  <span class="token punctuation">[</span>http://127.0.0.1:6001<span class="token punctuation">]</span> --rps 10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="处理生成的log文件"><a href="#处理生成的log文件" class="headerlink" title="处理生成的log文件"></a>处理生成的log文件</h5><pre class="line-numbers language-bash"><code class="language-bash">node --prof-process <span class="token punctuation">[</span>isolate-0XXXXXXXXXXX-v8-XXXX.log<span class="token punctuation">]</span> <span class="token operator">></span> profile.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><a id="more"></a><h5 id="分析profile-txt文件"><a href="#分析profile-txt文件" class="headerlink" title="分析profile.txt文件"></a>分析profile.txt文件</h5><h5 id="查看样本中运行的代码比例"><a href="#查看样本中运行的代码比例" class="headerlink" title="查看样本中运行的代码比例"></a>查看样本中运行的代码比例</h5><p><a href="```">Summary</a>:<br>   ticks  total  nonlib   name<br>     79    0.2%    0.2%  JavaScript<br>  36703   97.2%   99.2%  C++<br>      7    0.0%    0.0%  GC<br>    767    2.0%          Shared libraries<br>    215    0.6%          Unaccounted</p><pre><code>这告诉我们收集的所有样本中有97％发生在C ++代码中，当查看处理输出的其他部分时，我们应该最关注用C ++完成的工作（而不是JavaScript）##### 分析语言中的哪些函数占用最多CPU信息 [C++]</code></pre><p> [C++]:<br>   ticks  total  nonlib   name<br>  19557   51.8%   52.9%  node::crypto::PBKDF2(v8::FunctionCallbackInfo<a href="v8::Value" target="_blank" rel="noopener">v8::Value</a> const&amp;)<br>   4510   11.9%   12.2%  _sha1_block_data_order<br>   3165    8.4%    8.6%  _malloc_zone_malloc</p><pre><code>我们看到前三个条目占该程序占用CPU时间的72.1％。从这个输出中，我们立即看到至少51.8％的CPU时间被一个名为PBKDF2的函数占用##### 分析堆栈，查看主要调用者信息[Bottom up（heavy）profile]```bashticks parent  name  19557   51.8%  node::crypto::PBKDF2(v8::FunctionCallbackInfo&lt;v8::Value&gt; const&amp;)  19557  100.0%    v8::internal::Builtins::~Builtins()  19557  100.0%      LazyCompile: ~pbkdf2 crypto.js:557:16   4510   11.9%  _sha1_block_data_order   4510  100.0%    LazyCompile: *pbkdf2 crypto.js:557:16   4510  100.0%      LazyCompile: *exports.pbkdf2Sync crypto.js:552:30   3165    8.4%  _malloc_zone_malloc   3161   99.9%    LazyCompile: *pbkdf2 crypto.js:557:16   3161  100.0%      LazyCompile: *exports.pbkdf2Sync crypto.js:552:30</code></pre>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正向代理和反向代理</title>
      <link href="/2018/12/07/zheng-xiang-dai-li-he-fan-xiang-dai-li/"/>
      <url>/2018/12/07/zheng-xiang-dai-li-he-fan-xiang-dai-li/</url>
      
        <content type="html"><![CDATA[<p>参考文档：</p><ul><li><a href="https://blog.csdn.net/u013451157/article/details/78858894" target="_blank" rel="noopener">https://blog.csdn.net/u013451157/article/details/78858894</a></li><li><a href="http://www.cnblogs.com/-abm/p/9894289.html#autoid-0-0-0" target="_blank" rel="noopener">http://www.cnblogs.com/-abm/p/9894289.html#autoid-0-0-0</a></li></ul><h3 id="写在前头"><a href="#写在前头" class="headerlink" title="写在前头"></a>写在前头</h3><ul><li>代理本质上是一个服务器，可以类比为一个中介。</li><li>为了A访问到B，中间插入一个 C，C 就是代理。</li></ul><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><h4 id="什么是正向代理-forward-Proxy"><a href="#什么是正向代理-forward-Proxy" class="headerlink" title="什么是正向代理(forward Proxy)"></a>什么是正向代理(forward Proxy)</h4><p>工作原理：如下图我们可以通过配置代理服务器来将我们的请求代为发送到目标服务器，再由代理服务器将目标服务器的响应转发回本地。</p><p><img src="/images/forward-proxy.png" alt="image|549x495"></p><h4 id="什么时候使用正向代理"><a href="#什么时候使用正向代理" class="headerlink" title="什么时候使用正向代理"></a>什么时候使用正向代理</h4><p>应用：vpn，FQ上网</p><h4 id="正向代理的特点"><a href="#正向代理的特点" class="headerlink" title="正向代理的特点"></a>正向代理的特点</h4><ul><li>访问本无法访问的服务器B</li><li>隐藏访问者的行踪</li><li>客户端访问授权</li></ul><a id="more"></a><hr><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><h4 id="什么是反向代理-reverse-proxy"><a href="#什么是反向代理-reverse-proxy" class="headerlink" title="什么是反向代理(reverse proxy)"></a>什么是反向代理(reverse proxy)</h4><p>工作原理：反向代理对外的表现都是透明的，客户不知道自己访问的是代理服务器，客户端也不需要任何配置就可以访问。当我们配置好代理服务器后，反向代理（Reverse Proxy）实际运行方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。</p><p><img src="/images/reverse-proxy.png" alt="image|549x495"></p><h4 id="什么时候使用反向代理"><a href="#什么时候使用反向代理" class="headerlink" title="什么时候使用反向代理"></a>什么时候使用反向代理</h4><p>应用：安全、负载均衡方面的常用配置</p><h4 id="反向代理的特点"><a href="#反向代理的特点" class="headerlink" title="反向代理的特点"></a>反向代理的特点</h4><ul><li>隐藏服务配置</li><li>保证内网的安全，阻止 web 攻击</li><li>可以设置负载均衡</li></ul><hr><h3 id="两者区块"><a href="#两者区块" class="headerlink" title="两者区块"></a>两者区块</h3><ul><li>正向代理中 ，proxy和client同属一个lan，对server透明。正向代理需要配置在client端；</li><li>反向代理中，proxy和server同属一个lan，对client透明。 反向代理需要配置在proxy端；</li><li>实际上proxy在两种代理中做的事都是代为请求和响应，不过从结构上看正好左右相反，故称为正反向代理。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单线程为什么能支持高并发？</title>
      <link href="/2018/11/16/dan-xian-cheng-wei-shi-me-neng-zhi-chi-gao-bing-fa/"/>
      <url>/2018/11/16/dan-xian-cheng-wei-shi-me-neng-zhi-chi-gao-bing-fa/</url>
      
        <content type="html"><![CDATA[<ol><li>Nodejs是一个平台，构建在chrome的V8上（js语言解释器），采用事件驱动、非阻塞模型（ c++库：libuv）</li></ol><h3 id="为什么单线程却能够支持高并发？"><a href="#为什么单线程却能够支持高并发？" class="headerlink" title="为什么单线程却能够支持高并发？"></a>为什么单线程却能够支持高并发？</h3><h4 id="先搞清楚概念"><a href="#先搞清楚概念" class="headerlink" title="先搞清楚概念"></a>先搞清楚概念</h4><p>单线程：主线程一个，底层工作线程多个。</p><p>异步：发出操作指令，然后就可以去做别的事情了（主线程不需要等待），所有操作完成后再执行回调</p><h5 id="cpu核数与线程之间的关系"><a href="#cpu核数与线程之间的关系" class="headerlink" title="cpu核数与线程之间的关系"></a>cpu核数与线程之间的关系</h5><p>线程：又是被称为轻量级进程（Lightweight Process LWP）,是程序执行的最小单元。每一个程序都至少有一个线程，若程序只有一个线程，那么就是程序本身。</p><p>单线程的进程可以简单的认为只有一个线程的进程。一个进程在同一时间只做一件事。</p><p>多线程的进程可以尽可能的利用系统CPU资源。但也不是线程越多越好，线程越好，CPU分配给每个线程的时间片就越少。具体到这个任务在CPU哪个核上运行，这个就跟操作系统和CPU本身的设计相关了</p><a id="more"></a><h5 id="什么是cpu密集型操作"><a href="#什么是cpu密集型操作" class="headerlink" title="什么是cpu密集型操作"></a>什么是cpu密集型操作</h5><p>复杂的运算、图片的操作</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这就是一个cpu密集型的操作</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="node在什么情况下会高并发"><a href="#node在什么情况下会高并发" class="headerlink" title="node在什么情况下会高并发"></a>node在什么情况下会高并发</h4><p>I/O密集型任务</p><h4 id="怎么实现"><a href="#怎么实现" class="headerlink" title="怎么实现"></a>怎么实现</h4><p>事件机制的底层依赖库：libuv、libeio、libev</p><h5 id="libuv"><a href="#libuv" class="headerlink" title="libuv"></a>libuv</h5><p>node的工作线程去执行的（nodejs底层的libuv是多线程的线程池用来并行io操作），且主线程是不需要等待结果返回的，只要发出指令马上就可以去忙其他事情了。　　</p><p>开发node过程中需要跨平台，首选为Linux使用libev（底层为epoll），备选Windows使用IOCP实现，用于抽象libev和IOCP的高性能网络库。</p><h5 id="epoll和IOCP的区别"><a href="#epoll和IOCP的区别" class="headerlink" title="epoll和IOCP的区别"></a>epoll和IOCP的区别</h5><ul><li>epoll用于Linux系统，IOCP用于Windows系统</li><li>epoll是同步非阻塞模型：当事件资源满足时发出可处理通知消息（主线程需要自己去处理）；IOCP是异步非阻塞模型，当事件完成时发出通知消息（工作线程帮主线程处理完了）。<br><img src="/images/architecture.png" alt="image"></li></ul><h5 id="node运行机制"><a href="#node运行机制" class="headerlink" title="node运行机制"></a>node运行机制</h5><p><img src="/images/principle.png" alt="image"></p><ol><li>V8引擎解析JavaScript脚本</li><li>解析后的代码，调用Node API</li><li>libuv库负责Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V8引擎</li><li>V8引擎再将结果返回给用户</li></ol><p>虽然nodejs的I/O操作开启了多线程，但是所有线程都是基于node服务进程开启的，并不能充分利用cpu资源</p><h4 id="单线程的优劣"><a href="#单线程的优劣" class="headerlink" title="单线程的优劣"></a>单线程的优劣</h4><h5 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h5><ol><li>多线程占用内存高</li><li>多线程间切换使得CPU开销大</li><li>多线程由内存同步开销</li><li>编写单线程程序简单</li><li>线程安全</li></ol><h5 id="坏处"><a href="#坏处" class="headerlink" title="坏处"></a>坏处</h5><ol><li>CPU密集型任务占用CPU时间长</li><li>无法利用CPU的多核</li><li>单线程抛出异常使得程序停止</li></ol>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs错误处理最佳实现</title>
      <link href="/2018/11/16/nodejs-cuo-wu-chu-li-zui-jia-shi-xian/"/>
      <url>/2018/11/16/nodejs-cuo-wu-chu-li-zui-jia-shi-xian/</url>
      
        <content type="html"><![CDATA[<ul><li>参考资料：<a href="https://segmentfault.com/a/1190000002741935#articleHeader3" target="_blank" rel="noopener">https://segmentfault.com/a/1190000002741935#articleHeader3</a></li></ul><h3 id="四种传递错误的方式"><a href="#四种传递错误的方式" class="headerlink" title="四种传递错误的方式"></a>四种传递错误的方式</h3><ol><li>作为异常抛出</li><li>把错误传给一个callback</li><li>在EventEmitter上触发一个Error事件</li><li>程序运行过程中抛出的异常，或由底层库抛出，或是运行中发生的一些 SyntaxError 之类</li></ol><h3 id="错误捕获的几种方式"><a href="#错误捕获的几种方式" class="headerlink" title="错误捕获的几种方式"></a>错误捕获的几种方式</h3><p><img src="/images/errorInfo.png" alt="image"></p><h4 id="try-catch"><a href="#try-catch" class="headerlink" title="try .. catch"></a>try .. catch</h4><p>常用的一种捕获错误方式，浏览器 || node 环境均适用</p><p>缺点：只针对同步异常有效</p><h4 id="callback"><a href="#callback" class="headerlink" title="callback"></a>callback</h4><p>异步执行的函数通过回调函数，将错误返回给同步函数。</p><h4 id="EventEmitter"><a href="#EventEmitter" class="headerlink" title="EventEmitter"></a>EventEmitter</h4><p>由 Events 模块提供的 EventEmitter 类，基于 Observer 模式做的 publish/subscribe，通过 .on(‘error’, …) || .addEventlistener(‘error’, …) 注册 subscriber，.emit() 发布事件，但会有最大的 maxListener 的限制，可更改。</p><a id="more"></a><h4 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h4><p>Process 进程对象也是 EventEmitter 的实例，可通过如下两事件监听 error</p><h5 id="uncaughtException"><a href="#uncaughtException" class="headerlink" title="uncaughtException"></a>uncaughtException</h5><p>监听在程序中未被捕获的异常。</p><h5 id="unhandledRejection"><a href="#unhandledRejection" class="headerlink" title="unhandledRejection"></a>unhandledRejection</h5><p>监听在程序中未被捕获的promise异常</p><h4 id="标准error类的信息"><a href="#标准error类的信息" class="headerlink" title="标准error类的信息"></a>标准error类的信息</h4><ul><li>==name==：用于在程序里区分众多的错误类型（例如参数非法和连接失败）</li><li>==message==：一个供人类阅读的错误消息。对可能读到这条消息的人来说这应该已经足够完整。如果你从更底层的地方传递了一个错误，你应该加上一些信息来说明你在做什么。怎么包装异常请往下看。</li><li>==stack==：一般来讲不要随意扰乱堆栈信息。甚至不要增强它。V8引擎只有在这个属性被读取的时候才会真的去运算，以此大幅提高处理异常时候的性能。如果你读完再去增强它，结果就会多付出代价，哪怕调用者并不需要堆栈信息。</li></ul><p>用详细的属性来增强 Error 对象。<br>举个例子，如果遇到无效参数，把 propertyName 设成参数的名字，把 propertyValue 设成传进来的值。如果无法连到服务器，用 remoteIp 属性指明尝试连接到的 IP。如果发生一个系统错误，在syscal 属性里设置是哪个系统调用，并把错误代码放到errno属性里。具体你可以查看附录，看有哪些样例属性可以用。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>学习了怎么区分操作失败，即那些可以被预测的哪怕在正确的程序里也无法避免的错误（例如，无法连接到服务器）；而程序的Bug则是程序员失误。</li><li>操作失败可以被处理,也应当被处理。程序员的失误无法被处理或可靠地恢复（本不应该这么做），尝试这么做只会让问题更难调试。</li><li>学习了怎么区分操作失败，即那些可以被预测的哪怕在正确的程序里也无法避免的错误（例如，无法连接到服务器）；而程序的Bug则是程序员失误。</li><li>在写新函数的时候，用文档清楚地记录函数预期的参数，包括它们的类型、是否有其它约束（例如必须是有效的IP地址），可能会发生的合理的操作失败（例如无法解析主机名，连接服务器失败，所有的服务器端错误），错误是怎么传递给调用者的（同步，用throw，还是异步，用 callback 和 EventEmitter）。</li><li>缺少参数或者参数无效是程序员的失误，一旦发生总是应该抛出异常。函数的作者认为的可接受的参数可能会有一个灰色地带，但是如果传递的是一个文档里写明接收的参数以外的东西，那就是一个程序员失误。</li><li><strong>传递错误的时候用标准的 Error 类和它标准的属性</strong>。尽可能把额外的有用信息放在对应的属性里。如果有可能，用约定的属性名（如下）。</li></ul><h4 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h4><ol><li>异步函数无法使用throw一个异常，被外面的catch代码块捕获。因为异步函数在运行的时候，同步函数try代码块已经退出了。</li><li>在JavaScript里，抛出一个不属于Error的参数从技术上是可行的，但是应该被避免。这样的结果使获得调用堆栈没有可能，代码也无法检查name属性，或者其它任何能够说明哪里有问题的属性。</li></ol><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** Make a TCP connection to the given IPv4 address.  Arguments:**    ip4addr        a string representing a valid IPv4 address**    tcpPort        a positive integer representing a valid TCP port**    timeout        a positive integer denoting the number of milliseconds*                   to wait for a response from the remote server before*                   considering the connection to have failed.**    callback       invoked when the connection succeeds or fails.  Upon*                   success, callback is invoked as callback(null, socket),*                   where `socket` is a Node net.Socket object.  Upon failure,*                   callback is invoked as callback(err) instead.** This function may fail for several reasons:**    SystemError    For "connection refused" and "host unreachable" and other*                   errors returned by the connect(2) system call.  For these*                   errors, err.errno will be set to the actual errno symbolic*                   name.**    TimeoutError   Emitted if "timeout" milliseconds elapse without*                   successfully completing the connection.** All errors will have the conventional "remoteIp" and "remotePort" properties.* After any error, any socket that was created will be closed.*/</span><span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span>ip4addr<span class="token punctuation">,</span> tcpPort<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">{</span>assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>ip4addr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'string'</span><span class="token punctuation">,</span>    <span class="token string">"argument 'ip4addr' must be a string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>assert<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span><span class="token function">isIPv4</span><span class="token punctuation">(</span>ip4addr<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"argument 'ip4addr' must be a valid IPv4 address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>tcpPort<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'number'</span><span class="token punctuation">,</span>    <span class="token string">"argument 'tcpPort' must be a number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>assert<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>tcpPort<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> tcpPort <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tcpPort <span class="token operator">&lt;</span> <span class="token number">65536</span><span class="token punctuation">,</span>    <span class="token string">"argument 'tcpPort' must be a positive integer between 1 and 65535"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'number'</span><span class="token punctuation">,</span>    <span class="token string">"argument 'timeout' must be a number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>assert<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> timeout <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"argument 'timeout' must be a positive integer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* do work */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>参数，类型以及其它一些约束被清晰的文档化</li><li>这个函数对于接受的参数是非常严格的，并且会在得到错误参数的时候抛出异常（程序员的失误）</li><li>可能出现的操作失败集合被记录了。通过不同的”name“值可以区分不同的异常，而”errno“被用来获得系统错误的详细信息</li><li>异常被传递的方式也被记录了（通过失败时调用回调函数）</li><li>返回的错误有”remoteIp“和”remotePort“字段，这样用户就可以定义自己的错误了（比如，一个HTTP客户端的端口号是隐含的）</li><li>虽然很明显，但是连接失败后的状态也被清晰的记录了：所有被打开的套接字此时已经被关闭</li></ul>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EOS双花和分叉问题</title>
      <link href="/2018/11/12/eos-shuang-hua-he-fen-cha-wen-ti/"/>
      <url>/2018/11/12/eos-shuang-hua-he-fen-cha-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>参考文档：<a href="http://8btc.com/thread-158287-1-6.html" target="_blank" rel="noopener">http://8btc.com/thread-158287-1-6.html</a></p><h3 id="什么是双花和分叉"><a href="#什么是双花和分叉" class="headerlink" title="什么是双花和分叉"></a>什么是双花和分叉</h3><p>一笔交易在广播时，被多个节点同时接收产生新的区块，此问题被称为分叉。</p><p>两笔相同的交易，同时向全网进行广播，造成重复话费的问题被称为双花。</p><h3 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h3><h4 id="分叉"><a href="#分叉" class="headerlink" title="分叉"></a>分叉</h4><p>EOS 采用 BFT-DPoS 共识机制 ，每个时间段只有一个超级节点在打包交易生产区块，所以不存在像 pow 一样的竞争关系，所以具有很强的抗分叉的能力。</p><p>当其中部分节点作恶，进行分叉。任何时候一个诚实的超级节点看到一条有效的更长链时，都会从当前的分叉切换过来，又由于超级节点数量为奇数个，所以在任何时刻一定会有一条较长的链。</p><h4 id="双花"><a href="#双花" class="headerlink" title="双花"></a>双花</h4><p>在 EOS 交易的数据结构中，ref_block_num, ref_block_prefix和expiration三者是用作TaPOS(Transaction as Proof of Stake, 交易作为权益证明)算法，是为了确保一笔交易在所引用的区块之后和交易过期日期之前能够发生．</p><p>EOS 超级节点收到两笔相同信息的交易信息时，两笔交易在网络上将分为一前一后到达，因为超级节点在<br>EOS 节点收到广播的请求，同时节点上会存在全网所有的区块信息来验证该交易的合法性，所以当第二笔相同信息的交易再次验证时，将不会通过。</p><a id="more"></a><h5 id="业务中处理"><a href="#业务中处理" class="headerlink" title="业务中处理"></a>业务中处理</h5><p>当一笔交易被广播后 3 秒后将被添加到不可逆的区块中，如果一笔交易在这段时间之后没有在链上被查询到，则可以认为这笔交易广播失败。具体原因请看下面 BFT-DPoS 共识机制。</p><h4 id="先来了解下这些"><a href="#先来了解下这些" class="headerlink" title="先来了解下这些"></a>先来了解下这些</h4><h5 id="BFT协议"><a href="#BFT协议" class="headerlink" title="BFT协议"></a>BFT协议</h5><p>N ≥ 3F + 1 的情況下一致性是可能解決，N为总计算机数，F为有问题的计算机总数。由此可以看出，拜占庭容错能够容纳将近1/3的错误节点误差。</p><p>在 EOS 中首先在一群数量有限的节点中通过轮换或者随机算法选出某个节点为主节点，该节点在此时具有出块的权利。当主节点将该时段的交易打包成区块后用自己的私钥对该区块签名，并将其广播到所有节点。其它节点对该区块进行验证和确认，若某个节点确认该区块后对该区块进行签名并发送给主节点。当主节点收到至少三分之二的不同节点的签名区块后，则该区块完成了所有节点的验证成为不可逆区块串联到区块链中。<br><img src="/images/bft.png" alt="image|549x495"></p><h5 id="DPoS算法"><a href="#DPoS算法" class="headerlink" title="DPoS算法"></a>DPoS算法</h5><p>DPoS在最小化网络成本的同时，赋予每个持股人一定的投票权，由他们投票产生“超级节点”代表。最后由获得票数最多的一定数量的超级节点轮流平等地产生区块。</p><p>EOS中选择了21个超级节点，主要有两方面原因：</p><ul><li>由于用户很难对较多数量的超级节点充分了解，所以过多的超级节点会降低用户投票的活跃度；</li><li>规模为21的节点数目可以在拜占庭问题中以更低的资源成本来获得高效的共识。</li></ul><h6 id="超级节点的主要职责"><a href="#超级节点的主要职责" class="headerlink" title="超级节点的主要职责"></a>超级节点的主要职责</h6><ol><li>提供相关计算资源和网络资源，保证节点的正常运行；</li><li>当轮到某超级节点拥有出块权时，超级节点收集该时段内的所有交易，并对交易验证后打包成区块广播至其他超级节点，其他节点验证后把区块添加到自己的数据库中。</li></ol><p>在EOS技术白皮书中，每个出块间隔定义为3秒，这主要是由于在当前的网络环境下，一个超级节点打包区块并将其广播，绝大多数其他节点收到该区块的过程耗时最多3秒。<code>只有下一个超级节点收到了上一个超级节点广播的区块时，再进行新区块的生成才不会造成对某个超级节点产生区块的忽略</code>。而一个区块要成为不可逆区块需要超过三分之二的超级节点进行确认，在 DPoS 中只有超级节点产生一个新区块，才表示它对之前收到的区块链进行了确认，所以一个区块产生后，其后续串联14个区块才表明该区块是不可逆区块，区块中的交易是不可逆交易，整个确认过程需要45秒。</p><h5 id="BFT-DPoS-共识机制"><a href="#BFT-DPoS-共识机制" class="headerlink" title="BFT-DPoS 共识机制"></a>BFT-DPoS 共识机制</h5><p>在最新版的EOS Dwan 3.0中为使区块链系统有更快的出块速度，EOS 采用了BFT-DPoS共识机制从而达到了500毫秒的出块间隔。</p><p>该机制的具体过程是：EOS的持有者通过投票系统对各个超级节点竞选者进行投票，选出21个节点为超级节点。然后这21个超级节点以自身的网络资源状况商议出一个出块权拥有顺序，在每个超级节点拥有出块权时，以间隔为500毫秒（500毫秒是EOS团队通过大量实验测试得出的当前网络状态下可达到的最小的稳定状态下的出块间隔）连续产生12个新区块，然后切换到下一个超级节点连续产生之后的12个区块。</p><p>当超级节点A产生第一个新区块后，A将该区块进行签名并广播给其他超级节点，其他超级节点对该区块进行验证后对其进行签名并返回给A节点，当A节点收到来自14个不同节点签名的区块后，该区块就成为不可逆区块串联到之前的区块链中（以500毫秒产生新区块的过程和对区块进行BFT协议共识的过程在超级节点中是同时进行的，即确认过程不影响超级节点产生新的区块）。</p><p>在当前的网络状况下，一个超级节点广播一个新区块并确认的过程可在1秒的时间内完成。因此，每个新区块的产生到成为不可逆区块最多需要1.5秒的时间。因为一个区块链在引入另一条区块链的交易状态时必须等待其成为不可逆交易，所以两个基于EOS的区块链在3秒钟以内就可以进行一次来回的通信。</p><h6 id="超级节点网络延迟造成的问题"><a href="#超级节点网络延迟造成的问题" class="headerlink" title="超级节点网络延迟造成的问题"></a>超级节点网络延迟造成的问题</h6><p>由于网络延迟使得上一节点产生的最后几个新区块有可能被该超级节点忽略。为解决此问题，EOS选用了确定顺序的超级节点轮流出块，比如以纽约（美国东海岸）、芝加哥（美国中部）、洛杉矶（美国西海岸）、日本东京、中国上海这样的顺序，该顺序使得上一节点产生的最后区块传播到下一节点时有最小的延迟，从而避免下一个超级节点忽略上一节点产生的区块。如果是随机定义出块权的超级节点，那么在现有的网络条件下，出块间隔只有控制在3 秒时才可保证下一节点较大概率上不会忽略上一节点产生的区块。</p>]]></content>
      
      
      <categories>
          
          <category> eos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> eos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bignumber.js快速上手</title>
      <link href="/2018/10/25/bignumber-js-kuai-su-shang-shou/"/>
      <url>/2018/10/25/bignumber-js-kuai-su-shang-shou/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>用于任意精度小数和非小数运算的JavaScript库。</p><p>解决某些小数相加出现意外情况</p><pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token operator">+</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0.30000000000000004</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考地址：<a href="https://www.npmjs.com/package/bignumber.js" target="_blank" rel="noopener">https://www.npmjs.com/package/bignumber.js</a></p><h3 id="安装和加载"><a href="#安装和加载" class="headerlink" title="安装和加载"></a>安装和加载</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save bignumber.jsconst BigNumber <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">'bignumber.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-js"><code class="language-js">x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigNumber</span><span class="token punctuation">(</span><span class="token number">123.4567</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token function">BigNumber</span><span class="token punctuation">(</span><span class="token string">'123456.7e-3'</span><span class="token punctuation">)</span>z <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigNumber</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>x<span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> y<span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>new BigNumber()参数接收Number，String或BigNumber类型，创建为十进制。可以通过如下设置其他基础进制。</p><pre class="line-numbers language-js"><code class="language-js">x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigNumber</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><a id="more"></a><h4 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h4><ul><li>minus()：减</li><li>plus()：加</li><li>times()：乘</li><li>dividedBy()：除</li><li>squareRoot(): 平方根</li><li>exponentiatedBy()：指数</li><li>还有其他请参考官方文档</li></ul><pre class="line-numbers language-js"><code class="language-js">x<span class="token punctuation">.</span><span class="token function">dividedBy</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 等于((x/y)+z)*9</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h4><ul><li>isFinite():是否超出精度</li><li>isNaN()：是否为NaN</li></ul><h4 id="取值方法"><a href="#取值方法" class="headerlink" title="取值方法"></a>取值方法</h4><ul><li>toNumber():获得 Number 类型的结果</li><li>toString([转换的进制]):获得 String 类型的结果</li><li>toFormat([保留的小数位数]):四舍五入保留指定位数小数，并且国际化输出带逗号// 1,234,567.83</li><li>toFixed([保留的小数位数])：返回 string 类型</li></ul><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><pre class="line-numbers language-js"><code class="language-js">BigNumber<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span> DECIMAL_PLACES<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> ROUNDING_MODE<span class="token punctuation">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 创建另一个BigNumber构造函数，可以选择传入一个配置对象</span>BN <span class="token operator">=</span> BigNumber<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">{</span> DECIMAL_PLACES<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>DECIMAL_PLACES:保留小数位数</li><li>ROUNDING_MODE：舍弃模式</li></ul>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> node_module </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mocha快速上手</title>
      <link href="/2018/10/21/mocha-kuai-su-shang-shou/"/>
      <url>/2018/10/21/mocha-kuai-su-shang-shou/</url>
      
        <content type="html"><![CDATA[<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120301.png" alt="image"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html" target="_blank" rel="noopener">mocha入门1</a></li><li><a href="https://www.jianshu.com/p/9c78548caffa" target="_blank" rel="noopener">mocha入门2</a></li><li><a href="https://www.jianshu.com/p/f200a75a15d2" target="_blank" rel="noopener">Chai.js断言库API中文文档</a></li></ul><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Mocha（发音”摩卡”）诞生于2011年，是现在最流行的JavaScript测试框架之一，在浏览器和Node环境都可以使用。</p><ul><li>验证代码的正确性</li><li>避免修改代码时出错</li><li>避免其他团队成员修改代码时出错</li><li>便于自动化测试与部署</li></ul><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><h5 id="supertest"><a href="#supertest" class="headerlink" title="supertest"></a>supertest</h5><p>支持调试本地 api 接口</p><h3 id="模块安装"><a href="#模块安装" class="headerlink" title="模块安装"></a>模块安装</h3><pre><code>//全局安装npm i -g mocha//项目内安装npm i mocha --save-dev</code></pre><a id="more"></a><h3 id="测试脚本编写"><a href="#测试脚本编写" class="headerlink" title="测试脚本编写"></a>测试脚本编写</h3><p>首先写一个需要测试的脚本</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// add.js</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> add<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码后缀名为.test.js（表示测试）或者.spec.js（表示规格）</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// add.test.js</span><span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./add.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> expect <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'chai'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>expect<span class="token punctuation">;</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'加法函数的测试'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'1 加 1 应该等于 2'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li>describe块称为”测试套件”（test suite），表示一组相关的测试。它是一个函数，第一个参数是测试套件的名称（”加法函数的测试”），第二个参数是一个实际执行的函数。</li><li>it块称为”测试用例”（test case），表示一个单独的测试，是测试的最小单位。它也是一个函数，第一个参数是测试用例的名称（”1 加 1 应该等于 2”），第二个参数是一个实际执行的函数。</li></ul><h3 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h3><pre class="line-numbers language-bash"><code class="language-bash">mocha add.test.js  加法函数的测试    ✓ 1 加 1 应该等于 2  1 passing <span class="token punctuation">(</span>8ms<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的运行结果表示，测试脚本通过了测试，一共只有1个测试用例，耗时是8毫秒。</p><h3 id="测试用例的钩子"><a href="#测试用例的钩子" class="headerlink" title="测试用例的钩子"></a>测试用例的钩子</h3><p>Mocha在describe块之中，提供测试用例的四个钩子：before()、after()、beforeEach()和afterEach()。它们会在指定时间执行。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'hooks'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在本区块的所有测试用例之前执行</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">after</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在本区块的所有测试用例之后执行</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在本区块的每个测试用例之前执行</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在本区块的每个测试用例之后执行</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// test cases</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><h4 id="–reporter-R"><a href="#–reporter-R" class="headerlink" title="–reporter, -R"></a>–reporter, -R</h4><p>使用mochawesome模块，可以生成漂亮的HTML格式的报告<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120303.png" alt="image"></p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> --save-dev mochawesome$ <span class="token punctuation">..</span>/node_modules/.bin/mocha --reporter mochawesome<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>测试结果报告就在mochaawesome-reports子目录生成</p><pre><code>//mocha.opts--timeout 30000--slow 1000--bail--recursive--reporter mochawesome--reporter-options overwrite=true,reportDir=report,inline=true,cdn=true,json=false,reportTitle=x-blockchain</code></pre><h5 id="测试报告工具详细设置"><a href="#测试报告工具详细设置" class="headerlink" title="测试报告工具详细设置"></a>测试报告工具详细设置</h5><ul><li>–reporter：指定测试报告工具</li><li>–reporter-options(-O)：测试报告工具详细设置</li></ul><h6 id="mochawesome参数配置"><a href="#mochawesome参数配置" class="headerlink" title="mochawesome参数配置"></a>mochawesome参数配置</h6><p>参考地址：<a href="https://github.com/adamgruber/mochawesome-report-generator#options" target="_blank" rel="noopener">https://github.com/adamgruber/mochawesome-report-generator#options</a></p><ul><li>html：测试输出HTML</li><li>json：测试输出JSON</li><li>reportDir：输出的文件地址</li><li>reportFilename：测试输出的文件名称</li></ul><hr><h4 id="–bail-b"><a href="#–bail-b" class="headerlink" title="–bail, -b"></a>–bail, -b</h4><p>–bail参数指定只要有一个测试用例没有通过，就停止执行后面的测试用例。这对持续集成很有用。</p><pre class="line-numbers language-basg"><code class="language-basg">mocha --bail<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="–grep-g"><a href="#–grep-g" class="headerlink" title="–grep, -g"></a>–grep, -g</h4><p>–grep参数用于搜索测试用例的名称（即it块的第一个参数），然后只执行匹配的测试用例。</p><pre class="line-numbers language-bash"><code class="language-bash">mocha --grep <span class="token string">"111"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="–invert-i"><a href="#–invert-i" class="headerlink" title="–invert, -i"></a>–invert, -i</h4><p>–invert参数表示只运行不符合条件的测试脚本，必须与–grep参数配合使用。</p><pre class="line-numbers language-bash"><code class="language-bash">mocha --grep <span class="token string">"1 加 1"</span> --invert<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="–timeout"><a href="#–timeout" class="headerlink" title="–timeout"></a>–timeout</h4><p>设置测试超时时间</p><h4 id="–slow"><a href="#–slow" class="headerlink" title="–slow"></a>–slow</h4><p>指定“慢”测试阈值，默认为75毫秒。Mocha用这个去高亮那些耗时过长的测试。</p><h4 id="–recursive"><a href="#–recursive" class="headerlink" title="–recursive"></a>–recursive</h4><p>包含子目录</p><hr><h4 id="配置文件mocha-opts"><a href="#配置文件mocha-opts" class="headerlink" title="配置文件mocha.opts"></a>配置文件mocha.opts</h4><p>Mocha允许在test目录下面，放置配置文件mocha.opts，把命令行参数写在里面。</p><pre class="line-numbers language-opts"><code class="language-opts">//mocha.opts--reporter tap--recursive--growl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后，执行mocha就能取得与第一行命令一样的效果。</p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ethersjs安装和Wallet-API介绍</title>
      <link href="/2018/09/20/ethersjs-an-zhuang-he-wallet-api-jie-shao/"/>
      <url>/2018/09/20/ethersjs-an-zhuang-he-wallet-api-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ethers.js库是以太坊的一个完整的JavaScript库。</p><p>参考网址：<a href="https://docs.ethers.io/ethers.js/html/getting-started.html" target="_blank" rel="noopener">https://docs.ethers.io/ethers.js/html/getting-started.html</a></p><h3 id="安装在Nodejs"><a href="#安装在Nodejs" class="headerlink" title="安装在Nodejs"></a>安装在Nodejs</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save ethers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>导入</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> ethers <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ethers'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>参考网址：<a href="https://docs.ethers.io/ethers.js/html/api-wallet.html" target="_blank" rel="noopener">https://docs.ethers.io/ethers.js/html/api-wallet.html</a></p><h3 id="wallet"><a href="#wallet" class="headerlink" title="wallet"></a>wallet</h3><p>一个钱包管理一个私有/公共密钥对，用于对事务进行加密签名并在Ethereum网络上证明所有权。</p><h4 id="创建wallet对象"><a href="#创建wallet对象" class="headerlink" title="创建wallet对象"></a>创建wallet对象</h4><h5 id="私钥创建"><a href="#私钥创建" class="headerlink" title="私钥创建"></a>私钥创建</h5><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> privateKey <span class="token operator">=</span> <span class="token string">"0x0123456789012345678901234567890123456789012345678901234567890123"</span><span class="token punctuation">;</span><span class="token keyword">var</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wallet</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Address: "</span> <span class="token operator">+</span> wallet<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "Address: 0x14791697260E4c9A71f18484C9f997B308e59325"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="随机创建"><a href="#随机创建" class="headerlink" title="随机创建"></a>随机创建</h5><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> wallet <span class="token operator">=</span> Wallet<span class="token punctuation">.</span><span class="token function">createRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Address: "</span> <span class="token operator">+</span> wallet<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "Address: ... this will be different every time ..."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><a id="more"></a><h5 id="加密钱包"><a href="#加密钱包" class="headerlink" title="加密钱包"></a>加密钱包</h5><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token string">"fb1280c0-d646-4e40-9550-7026b1be504a"</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">"88a5c2d9919e46f883eb62f7b8dd9d0cc45bc290"</span><span class="token punctuation">,</span>    Crypto<span class="token punctuation">:</span> <span class="token punctuation">{</span>        kdfparams<span class="token punctuation">:</span> <span class="token punctuation">{</span>            dklen<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span>            p<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            salt<span class="token punctuation">:</span> <span class="token string">"bbfa53547e3e3bfcc9786a2cbef8504a5031d82734ecef02153e29daeed658fd"</span><span class="token punctuation">,</span>            r<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span>            n<span class="token punctuation">:</span> <span class="token number">262144</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        kdf<span class="token punctuation">:</span> <span class="token string">"scrypt"</span><span class="token punctuation">,</span>        ciphertext<span class="token punctuation">:</span> <span class="token string">"10adcc8bcaf49474c6710460e0dc974331f71ee4c7baa7314b4a23d25fd6c406"</span><span class="token punctuation">,</span>        mac<span class="token punctuation">:</span> <span class="token string">"1cf53b5ae8d75f8c037b453e7c3c61b010225d916768a6b145adf5cf9cb3a703"</span><span class="token punctuation">,</span>        cipher<span class="token punctuation">:</span> <span class="token string">"aes-128-ctr"</span><span class="token punctuation">,</span>        cipherparams<span class="token punctuation">:</span> <span class="token punctuation">{</span>            iv<span class="token punctuation">:</span> <span class="token string">"1dcdf13e49cea706994ed38804f6d171"</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"version"</span> <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> password <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>Wallet<span class="token punctuation">.</span><span class="token function">fromEncryptedWallet</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>wallet<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Address: "</span> <span class="token operator">+</span> wallet<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// "Address: 0x88a5C2d9919e46F883EB62F7b8Dd9d0CC45bc290"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="助记词创建"><a href="#助记词创建" class="headerlink" title="助记词创建"></a>助记词创建</h5><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> mnemonic <span class="token operator">=</span> <span class="token string">"radar blur cabbage chef fix engine embark joy scheme fiction master release"</span><span class="token punctuation">;</span><span class="token keyword">var</span> wallet <span class="token operator">=</span> Wallet<span class="token punctuation">.</span><span class="token function">fromMnemonic</span><span class="token punctuation">(</span>mnemonic<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Address: "</span> <span class="token operator">+</span> wallet<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "Address: 0xaC39b311DCEb2A4b2f5d8461c1cdaF756F4F7Ae9"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="账号密码创建"><a href="#账号密码创建" class="headerlink" title="账号密码创建"></a>账号密码创建</h5><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string">"support@ethers.io"</span><span class="token punctuation">;</span><span class="token keyword">var</span> password <span class="token operator">=</span> <span class="token string">"password123"</span><span class="token punctuation">;</span>Wallet<span class="token punctuation">.</span><span class="token function">fromBrainWallet</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>wallet<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Address: "</span> <span class="token operator">+</span> wallet<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// "Address: 0x7Ee9AE2a2eAF3F0df8D323d555479be562ac4905"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="wallet属性"><a href="#wallet属性" class="headerlink" title="wallet属性"></a>wallet属性</h4><ul><li>address ：地址</li><li>privateKey ：私钥</li><li>provider ：连接的提供商，允许钱包连接到以太坊网络以查询其状态并发送事务</li><li>getAddress()：返回address</li><li>sign(transaction)：对事务进行签名并以十六进制字符串的形式返回已签名的事务</li><li>signMessage(message) ：签名消息并以十六进制字符串返回签名。</li><li>encrypt(password[ , options ] [ , progressCallback]) :返回Promise对象，将钱包加密为Secret Storage JSON Wallet;</li></ul><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><h6 id="签名事务，并且发送网络"><a href="#签名事务，并且发送网络" class="headerlink" title="签名事务，并且发送网络"></a>签名事务，并且发送网络</h6><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> ethers <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ethers'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Wallet <span class="token operator">=</span> ethers<span class="token punctuation">.</span>Wallet<span class="token punctuation">;</span><span class="token keyword">var</span> utils <span class="token operator">=</span> ethers<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">var</span> providers <span class="token operator">=</span> ethers<span class="token punctuation">.</span>providers<span class="token punctuation">;</span><span class="token keyword">var</span> privateKey <span class="token operator">=</span> <span class="token string">"0x0123456789012345678901234567890123456789012345678901234567890123"</span><span class="token punctuation">;</span><span class="token keyword">var</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wallet</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Address: '</span> <span class="token operator">+</span> wallet<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "Address: 0x14791697260E4c9A71f18484C9f997B308e59325".</span><span class="token keyword">var</span> transaction <span class="token operator">=</span> <span class="token punctuation">{</span>    nonce<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    gasLimit<span class="token punctuation">:</span> <span class="token number">21000</span><span class="token punctuation">,</span>    gasPrice<span class="token punctuation">:</span> utils<span class="token punctuation">.</span><span class="token function">bigNumberify</span><span class="token punctuation">(</span><span class="token string">"20000000000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    to<span class="token punctuation">:</span> <span class="token string">"0x88a5C2d9919e46F883EB62F7b8Dd9d0CC45bc290"</span><span class="token punctuation">,</span>    value<span class="token punctuation">:</span> utils<span class="token punctuation">.</span><span class="token function">parseEther</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token string">"0x"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//这确保了事务不能在不同的网络上重播</span>    chainId<span class="token punctuation">:</span> providers<span class="token punctuation">.</span>networks<span class="token punctuation">.</span>homestead<span class="token punctuation">.</span>chainId<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> signedTransaction <span class="token operator">=</span> wallet<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>signedTransaction<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "0xf86c808504a817c8008252089488a5c2d9919e46f883eb62f7b8dd9d0cc45bc2" +</span><span class="token comment" spellcheck="true">//   "90880de0b6b3a7640000801ca0d7b10eee694f7fd9acaa0baf51e91da5c3d324" +</span><span class="token comment" spellcheck="true">//   "f67ad827fbe4410a32967cbc32a06ffb0b4ac0855f146ff82bef010f6f2729b4" +</span><span class="token comment" spellcheck="true">//   "24c57b3be967e2074220fca13e79"</span><span class="token comment" spellcheck="true">// 这现在可以发送到Ethereum网络</span><span class="token keyword">var</span> provider <span class="token operator">=</span> providers<span class="token punctuation">.</span><span class="token function">getDefaultProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>provider<span class="token punctuation">.</span><span class="token function">sendTransaction</span><span class="token punctuation">(</span>signedTransaction<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hash: '</span> <span class="token operator">+</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Hash:</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h6><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> password <span class="token operator">=</span> <span class="token string">"password123"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span>percent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Encrypting: "</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>percent <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"% complete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> encryptPromise <span class="token operator">=</span> wallet<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>encryptPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="区块链操作"><a href="#区块链操作" class="headerlink" title="区块链操作"></a>区块链操作</h4><p>这些操作要求钱包附加一个网络提供者。</p><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><ul><li>getBalance([ blockTag ]) ：在blockTag中返回一个带有钱包余额（作为一个BigNumber，在wei中）的Promise。默认值：blockTag =“最新”</li><li>getTransactionCount( [blockTag]) ：返回一个Promise，其中包含此帐户在blockTag上发送的事务数（也称为nonce）。默认值：blockTag =“最新”</li><li>estimateGas(transaction ) ：返回一个Promise，其中包含事务的估计成本（in gas, as a BigNumber）</li><li>sendTransaction(transaction ) ：将事务发送到网络并返回带有事务详细信息的Promise。 强烈建议省略transaction.chainId，它将由提供者填写。</li><li>send ( addressOrName, amountWei [ , options ] ) ：将金额发送到网络上的地址或名称，并返回带有交易详细信息的承诺。</li></ul><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><h6 id="查询网络"><a href="#查询网络" class="headerlink" title="查询网络"></a>查询网络</h6><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> privateKey <span class="token operator">=</span> <span class="token string">'0x0123456789012345678901234567890123456789012345678901234567890123'</span><span class="token punctuation">;</span><span class="token keyword">var</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers<span class="token punctuation">.</span>Wallet</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>wallet<span class="token punctuation">.</span>provider <span class="token operator">=</span> ethers<span class="token punctuation">.</span>providers<span class="token punctuation">.</span><span class="token function">getDefaultProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> balancePromise <span class="token operator">=</span> wallet<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>balancePromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> transactionCountPromise <span class="token operator">=</span> wallet<span class="token punctuation">.</span><span class="token function">getTransactionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>transactionCountPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>transactionCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>transactionCount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h6><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> privateKey <span class="token operator">=</span> <span class="token string">'0x0123456789012345678901234567890123456789012345678901234567890123'</span><span class="token punctuation">;</span><span class="token keyword">var</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers<span class="token punctuation">.</span>Wallet</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>wallet<span class="token punctuation">.</span>provider <span class="token operator">=</span> ethers<span class="token punctuation">.</span>providers<span class="token punctuation">.</span><span class="token function">getDefaultProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 必须先将金额转换为最小单位 wei</span><span class="token comment" spellcheck="true">// parseEther 可以将 ether 转换成 wei</span><span class="token keyword">var</span> amount <span class="token operator">=</span> ethers<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">parseEther</span><span class="token punctuation">(</span><span class="token string">'1.0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> address <span class="token operator">=</span> <span class="token string">'0x88a5c2d9919e46f883eb62f7b8dd9d0cc45bc290'</span><span class="token punctuation">;</span><span class="token keyword">var</span> sendPromise <span class="token operator">=</span> wallet<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>sendPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>transactionHash<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>transactionHash<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// These will query the network for appropriate values</span><span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//gasLimit: 21000</span>    <span class="token comment" spellcheck="true">//gasPrice: utils.bigNumberify("20000000000")</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> promiseSend <span class="token operator">=</span> wallet<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> amount<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>promiseSend<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="发送复杂交易"><a href="#发送复杂交易" class="headerlink" title="发送复杂交易"></a>发送复杂交易</h6><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> privateKey <span class="token operator">=</span> <span class="token string">'0x0123456789012345678901234567890123456789012345678901234567890123'</span><span class="token punctuation">;</span><span class="token keyword">var</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers<span class="token punctuation">.</span>Wallet</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>wallet<span class="token punctuation">.</span>provider <span class="token operator">=</span> ethers<span class="token punctuation">.</span>providers<span class="token punctuation">.</span><span class="token function">getDefaultProvider</span><span class="token punctuation">(</span><span class="token string">'ropsten'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> transaction <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Recommendation: omit nonce; the provider will query the network</span>    <span class="token comment" spellcheck="true">// nonce: 0,</span>    <span class="token comment" spellcheck="true">// Gas Limit; 21000 will send ether to another use, but to execute contracts</span>    <span class="token comment" spellcheck="true">// larger limits are required. The provider.estimateGas can be used for this.</span>    gasLimit<span class="token punctuation">:</span> <span class="token number">1000000</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Recommendations: omit gasPrice; the provider will query the network</span>    <span class="token comment" spellcheck="true">//gasPrice: utils.bigNumberify("20000000000"),</span>    <span class="token comment" spellcheck="true">// Required; unless deploying a contract (in which case omit)</span>    to<span class="token punctuation">:</span> <span class="token string">"0x88a5C2d9919e46F883EB62F7b8Dd9d0CC45bc290"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Optional</span>    data<span class="token punctuation">:</span> <span class="token string">"0x"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Optional</span>    value<span class="token punctuation">:</span> ethers<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">parseEther</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Recommendation: omit chainId; the provider will populate this</span>    <span class="token comment" spellcheck="true">// chaindId: providers.networks.homestead.chainId</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Estimate the gas cost for the transaction</span><span class="token comment" spellcheck="true">//var estimateGasPromise = wallet.estimateGas(transaction);</span><span class="token comment" spellcheck="true">//estimateGasPromise.then(function(gasEstimate) {</span><span class="token comment" spellcheck="true">//    console.log(gasEstimate);</span><span class="token comment" spellcheck="true">//});</span><span class="token comment" spellcheck="true">// Send the transaction</span><span class="token keyword">var</span> sendTransactionPromise <span class="token operator">=</span> wallet<span class="token punctuation">.</span><span class="token function">sendTransaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>sendTransactionPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>transactionHash<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>transactionHash<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="解析签名后的交易"><a href="#解析签名后的交易" class="headerlink" title="解析签名后的交易"></a>解析签名后的交易</h5><ul><li>parseTransaction ( hexStringOrArrayish )： 将原始hexStringOrArrayish解析为Transaction。</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Mainnet:</span><span class="token keyword">var</span> ethers <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ethers'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Wallet <span class="token operator">=</span> ethers<span class="token punctuation">.</span>Wallet<span class="token punctuation">;</span><span class="token keyword">var</span> utils <span class="token operator">=</span> ethers<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">var</span> privateKey <span class="token operator">=</span> <span class="token string">'0x0123456789012345678901234567890123456789012345678901234567890123'</span><span class="token punctuation">;</span><span class="token keyword">var</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers<span class="token punctuation">.</span>Wallet</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> raw <span class="token operator">=</span> <span class="token string">"0xf87083154262850500cf6e0083015f9094c149be1bcdfa69a94384b46a1f913"</span> <span class="token operator">+</span>            <span class="token string">"50e5f81c1ab880de6c75de74c236c8025a05b13ef45ce3faf69d1f40f9d15b007"</span> <span class="token operator">+</span>            <span class="token string">"0cc9e2c92f"</span><span class="token keyword">var</span> transaction <span class="token operator">=</span> <span class="token punctuation">{</span>    nonce<span class="token punctuation">:</span> <span class="token number">1393250</span><span class="token punctuation">,</span>    gasLimit<span class="token punctuation">:</span> <span class="token number">21000</span><span class="token punctuation">,</span>    gasPrice<span class="token punctuation">:</span> utils<span class="token punctuation">.</span><span class="token function">bigNumberify</span><span class="token punctuation">(</span><span class="token string">"20000000000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    to<span class="token punctuation">:</span> <span class="token string">"0xc149Be1bcDFa69a94384b46A1F91350E5f81c1AB"</span><span class="token punctuation">,</span>    value<span class="token punctuation">:</span> utils<span class="token punctuation">.</span><span class="token function">parseEther</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token string">"0x"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// This ensures the transaction cannot be replayed on different networks</span>    chainId<span class="token punctuation">:</span> ethers<span class="token punctuation">.</span>providers<span class="token punctuation">.</span>networks<span class="token punctuation">.</span>homestead<span class="token punctuation">.</span>chainId<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> signedTransaction <span class="token operator">=</span> wallet<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> transaction <span class="token operator">=</span> Wallet<span class="token punctuation">.</span><span class="token function">parseTransaction</span><span class="token punctuation">(</span>signedTransaction<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// { nonce: 1393250,</span><span class="token comment" spellcheck="true">//   gasPrice: BigNumber { _bn: &lt;BN: 4a817c800> },</span><span class="token comment" spellcheck="true">//   gasLimit: BigNumber { _bn: &lt;BN: 5208> },</span><span class="token comment" spellcheck="true">//   to: '0xc149Be1bcDFa69a94384b46A1F91350E5f81c1AB',</span><span class="token comment" spellcheck="true">//   value: BigNumber { _bn: &lt;BN: de0b6b3a7640000> },</span><span class="token comment" spellcheck="true">//   data: '0x',</span><span class="token comment" spellcheck="true">//   v: 38,</span><span class="token comment" spellcheck="true">//   r: '0x3cf1f5af8bd11963193451096d86635aed589572c184ac8696dd99c9c044ded3',</span><span class="token comment" spellcheck="true">//   s: '0x08c52dbf1383492c72598511bb135179ec93b062032d2a0d002214644ba39a2c',</span><span class="token comment" spellcheck="true">//   chainId: 1,</span><span class="token comment" spellcheck="true">//   from: '0x14791697260E4c9A71f18484C9f997B308e59325' }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="验证消息"><a href="#验证消息" class="headerlink" title="验证消息"></a>验证消息</h5><ul><li>verifyMessage ( message , signature )：返回带有签名的消息的地址。<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> signature <span class="token operator">=</span> <span class="token string">"0xddd0a7290af9526056b4e35a077b9a11b513aa0028ec6c9880948544508f3c63"</span> <span class="token operator">+</span>                <span class="token string">"265e99e47ad31bb2cab9646c504576b3abc6939a1710afc08cbf3034d73214b8"</span> <span class="token operator">+</span>                <span class="token string">"1c"</span><span class="token punctuation">;</span><span class="token keyword">var</span> address <span class="token operator">=</span> Wallet<span class="token punctuation">.</span><span class="token function">verifyMessage</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">,</span> signature<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// '0x14791697260E4c9A71f18484C9f997B308e59325'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> ETH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> ETH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用指令</title>
      <link href="/2018/09/14/linux-chang-yong-zhi-ling/"/>
      <url>/2018/09/14/linux-chang-yong-zhi-ling/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-sh"><code class="language-sh"># 树状图输出文件夹结构，需要安装 yum install -y treetree -L 2# 输出内容到控制台echo "hello word"# 在 a.txt 结尾添加 abcdecho "abcd" >> a.txt# 替换文本内容，如果不存在则创建文件echo "hello" > a.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><pre class="line-numbers language-sh"><code class="language-sh"># 查看隐藏文件ls -a# 文件按时间排序：l：显示完整信息，t：按照时间排序，r：倒序ls -lrt# 查看所有.js结尾的文件ls *.js# 在当前目录下查找名字为 java 的文件夹find ./ -name "stellar-core.cfg" | xargs file# 在档期那目录下查找名字为 index 开头的文件或者文件夹find ./ -iname "index*"# 分页查看内容more index.js# 带行号的分页查看cat -n index.js | more# 查看2个文件的不同diff index.js  index2.js# 查找index.js 是否包含2  并且输出行号cat -n index.js | egrep -0 "2"  |  egrep -n "2"  index.js# 创建硬链接ln cc abc# 创建软链接ln -s cc abc# 找出不包含2的内容,v：不包含，i：忽略大小写，n：显示行号，# -A:显示匹配到的字符串所在行的后几行，-B：显示匹配到的字符串所在行的前几行，-C：显示匹配到的字符串所在行的前后几行egrep -v 2 index.js# 包含两个关键字egrep -in "aaa|bbb" abc.txt# 替换文本内容sed -i 's#1#2#g' index2.js# 列出当前文件夹下所有文件大小du -sh `ls`# 打包文件，没有压缩   c打包  v 显示进度   f 使用文件tar -cvf index.tar index.js# 压缩文件,最后文件名称问index.tar.gzgzip index.tar# 解压gunzip index.tar.gz# 解开打包 x 解包tar -xvf index.tar# 查看所有 docker 进程pgrep -l docker# 查看端口占用状态lsfo -i:3306#  查看指定进程打开的文件lsof -p 3326# 查看所有TCP网络连接信息lsof -i tcp# 显示资源使用情况  M 按照占用内存排序显示 P按照CPU使用情况排序显示  i 不现实闲置进程top# 查看指定进程资源使用情况top -p [pid]# 显示完整进程信息，包括启动命令top -c# 查看内存使用情况free -m# 查看cpu使用率 idle空闲的CPU  user  CPU使用率sar -u 2 2#  查看所有端口netstate -a#  查看所有TCP接口netstate -at# 给所有用户授权执行index.js r读，w写chmod a+x index.js#chown username dirOrFilechown -R weber server/# 修改环境变量vim ~/.bash_profilesource ~/.bash_profile# 查看test依赖的所有环境ldd test# 显示所有进程信息，包括命令行ps -ef# 显示所有在内存中的程序ps aux# 显示所有信息crontab -l# 编辑添加crontab -e# 重启crontab/etc/init.d/crond restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yarn快速上手</title>
      <link href="/2018/09/13/yarn-kuai-su-shang-shou/"/>
      <url>/2018/09/13/yarn-kuai-su-shang-shou/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>与 npm 相同的依赖包管理工具</p><p>官网：<a href="https://yarnpkg.com/zh-Hans/" target="_blank" rel="noopener">https://yarnpkg.com/zh-Hans/</a></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>离线模式：如果你之前安装过某个包，你就可以在没有网络连接的情况下再次安装它。</li><li>确定性：不管是什么顺序，在不同的机器上的依赖会以同一方式安装。</li><li>相同软件包：从 npm 安装软件包并使用相同的包管理流程。</li><li>网络性能：Yarn可以高效地队列化请求并且避免请求瀑布化，使网络利用率最大化。</li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>参考网址：<a href="https://yarnpkg.com/zh-Hans/docs/install#windows-stable" target="_blank" rel="noopener">https://yarnpkg.com/zh-Hans/docs/install#windows-stable</a></p><p>用 Chocolatey 安装</p><pre class="line-numbers language-bash"><code class="language-bash">choco <span class="token function">install</span> yarn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h5><pre class="line-numbers language-bash"><code class="language-bash">yarn --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><a id="more"></a><h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><pre class="line-numbers language-bash"><code class="language-bash">//初始化项目yarn init//添加依赖包yarn add <span class="token punctuation">[</span>package<span class="token punctuation">]</span>yarn add <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>version<span class="token punctuation">]</span>yarn add <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>tag<span class="token punctuation">]</span>//将依赖项添加到不同依赖项类别yarn add <span class="token punctuation">[</span>package<span class="token punctuation">]</span> --dev //开发环境yarn add <span class="token punctuation">[</span>package<span class="token punctuation">]</span> --peeryarn add <span class="token punctuation">[</span>package<span class="token punctuation">]</span> --optional//升级依赖包yarn upgrade <span class="token punctuation">[</span>package<span class="token punctuation">]</span>yarn upgrade <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>version<span class="token punctuation">]</span>yarn upgrade <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>tag<span class="token punctuation">]</span>//移除yarn remove <span class="token punctuation">[</span>package<span class="token punctuation">]</span>//安装全部yarnyarn <span class="token function">install</span>//全局安装yarn global <span class="token operator">&lt;</span>add/bin/list/remove/upgrade<span class="token operator">></span> <span class="token punctuation">[</span>--prefix<span class="token punctuation">]</span>//显示安装包列表yarn list//显示全局安装列表yarn global list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="yarn-run"><a href="#yarn-run" class="headerlink" title="yarn run"></a>yarn run</h4><pre class="line-numbers language-bash"><code class="language-bash">//运行用户自定义脚本yarn run <span class="token punctuation">[</span>script<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>args<span class="token operator">></span><span class="token punctuation">]</span>//显示所有可运行的脚本yarn run//执行该命令将会会列出脚本运行时可用的环境变量yarn run <span class="token function">env</span>//快捷指令yarn <span class="token punctuation">[</span>script<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>args<span class="token operator">></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更换镜像源"><a href="#更换镜像源" class="headerlink" title="更换镜像源"></a>更换镜像源</h3><pre class="line-numbers language-bash"><code class="language-bash">yarn config <span class="token keyword">set</span> registry https://registry.npm.taobao.org --globalyarn config <span class="token keyword">set</span> disturl https://npm.taobao.org/dist --global<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="管理镜像源工具"><a href="#管理镜像源工具" class="headerlink" title="管理镜像源工具"></a>管理镜像源工具</h3><p>yarm的注册管理平台</p><p>yrm可以帮助您轻松快速地在不同的npm注册表之间切换，现在包括：npm，cnpm，taobao，nj（nodejitsu），rednpm，yarn。</p><p>github地址：<a href="https://github.com/i5ting/yrm" target="_blank" rel="noopener">https://github.com/i5ting/yrm</a></p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> node_module </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ionic,react-native,native对比</title>
      <link href="/2018/09/10/ionic-react-native-native-dui-bi/"/>
      <url>/2018/09/10/ionic-react-native-native-dui-bi/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文从三者的跨平台性，开发方式，系统功能支持，性能对比，实现原理和优劣势分析三者的差异，并不能说明某个框架有着绝对意义的优势，选择使用哪个框架往往取决于项目的大小，开发人员所具备的技能，开发时间的长短,对性能的要求等。</p><p><strong>umijs为 一个可插拔的企业级 react 应用框架 ，界面渲染使用的是React DOM，暂时不支持react native</strong></p><p>weex 由于使用人员和文档较少，暂不加入对比</p><h4 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h4><h5 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h5><p>由于react-native 模块提供的 android 和 ios UI 组件和系统 API 上的使用方法不同，需要使用 jsx 各自编写 1 套 IOS 和 android 代码</p><h5 id="Ionic"><a href="#Ionic" class="headerlink" title="Ionic"></a>Ionic</h5><p>不涉及到特殊的系统 API 开发(IOS 支持 android 不支持)，一套代码可以支持 IOS 和 android。</p><p>绝大多数 UI 组件和系统 API 都适配两个系统。</p><h5 id="native"><a href="#native" class="headerlink" title="native"></a>native</h5><p>用 java 开发android</p><p>用 oc 开发 ios</p><hr><a id="more"></a><h4 id="开发方式"><a href="#开发方式" class="headerlink" title="开发方式"></a>开发方式</h4><h5 id="React-Native：jsx-react-native"><a href="#React-Native：jsx-react-native" class="headerlink" title="React Native：jsx + react-native"></a>React Native：jsx + react-native</h5><p>JS语言中嵌入了HTML和CSS的元素，这种被扩展了的JavaScript语言称为jsx。通过 jsx 调用 react-native 模块内的组件和API，实现页面搭建和系统功能实现。</p><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Text<span class="token punctuation">,</span> View <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldApp</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span><span class="token punctuation">></span></span>Hello world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h6><p>参考地址：<a href="https://reactnative.cn/docs/activityindicator/" target="_blank" rel="noopener">https://reactnative.cn/docs/activityindicator/</a></p><ul><li>react-native提供了三种组件和API：基础组件，IOS特有组件，Android特有组件，绝大多数需要分别调用</li><li>可用 flexbox 布局</li></ul><h5 id="Ionic：html-angularjs-css-cordova"><a href="#Ionic：html-angularjs-css-cordova" class="headerlink" title="Ionic：html + angularjs + css + cordova"></a>Ionic：html + angularjs + css + cordova</h5><p>css + html 实现页面搭建，angularjs 实现数据动态更新，cordova 提供系统 API 给JS调用</p><h6 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ion-menu</span> <span class="token attr-name">[content]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ion-header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ion-toolbar</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ion-title</span><span class="token punctuation">></span></span>Pages<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ion-title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ion-toolbar</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ion-header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ion-content</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ion-list</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">ion-item</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let p of pages<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>openPage(p)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{p.title}}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ion-list</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ion-content</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ion-menu</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ion-nav</span> <span class="token attr-name">[root]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rootPage<span class="token punctuation">"</span></span> <span class="token attr-name">#content</span> <span class="token attr-name">swipeBackEnabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ion-nav</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="UI-1"><a href="#UI-1" class="headerlink" title="UI"></a>UI</h6><p>参考地址：<a href="http://www.ionic.wang/css_doc-v3.html" target="_blank" rel="noopener">http://www.ionic.wang/css_doc-v3.html</a></p><ul><li>提供丰富的 UI 组件，绝大多数适配2种平台</li><li>可用 flexbox 布局</li></ul><h5 id="Native：java-oc-swift"><a href="#Native：java-oc-swift" class="headerlink" title="Native：java + oc|swift"></a>Native：java + oc|swift</h5><p>iOS android 不同语言开发以及适配</p><h6 id="UI-2"><a href="#UI-2" class="headerlink" title="UI"></a>UI</h6><p>UI效果最好</p><hr><h4 id="系统-API-支持性"><a href="#系统-API-支持性" class="headerlink" title="系统 API 支持性"></a>系统 API 支持性</h4><h5 id="React-Native-1"><a href="#React-Native-1" class="headerlink" title="React Native"></a>React Native</h5><p>可以通过原生代码编写 API 注册到 react-native 中实现全部支持</p><h5 id="ionic"><a href="#ionic" class="headerlink" title="ionic"></a>ionic</h5><p>可以通过原生代码编写 cordova 实现全部支持</p><h5 id="native-1"><a href="#native-1" class="headerlink" title="native"></a>native</h5><p>全部支持</p><hr><h4 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h4><h5 id="React-Native-2"><a href="#React-Native-2" class="headerlink" title="React Native"></a>React Native</h5><p>接近原生性能</p><h5 id="Ionic-1"><a href="#Ionic-1" class="headerlink" title="Ionic"></a>Ionic</h5><p>更新到ionic4 版本在 ios 上基本可以达到原生性能，android 添加 crosswalk 插件体验会大幅度提升，但是会增加 APP 安装包大小</p><h5 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h5><p>最好</p><hr><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><h5 id="React-Native-3"><a href="#React-Native-3" class="headerlink" title="React Native"></a>React Native</h5><p>eact Native将JavaScript代码转化成Object-C或者Java语言，并且处理好了各种回调问题</p><h5 id="Ionic-2"><a href="#Ionic-2" class="headerlink" title="Ionic"></a>Ionic</h5><p>首先设备加载cordova应用封装器，然后cordova应用封装器加载webview，webview加载index.html文件，最后angular加载并确定默认视图，ionic渲染ionic组件作为UI</p><h5 id="Native-1"><a href="#Native-1" class="headerlink" title="Native"></a>Native</h5><p>直接调用原生插件</p><hr><h4 id="优劣势"><a href="#优劣势" class="headerlink" title="优劣势"></a>优劣势</h4><h5 id="React-Native-4"><a href="#React-Native-4" class="headerlink" title="React Native"></a>React Native</h5><h6 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h6><ol><li>基本接近原生性能</li><li>native 混编，可以达到系统 API 全部支持</li><li>自带的调试插件，调试容易</li><li>使用 jsx 语法编写 ios 和 android 两套代码，支持跨平台</li><li>支持热更新</li><li>可用 flexbox 布局</li><li>UI 效果仅次于原生</li></ol><h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><ol><li>需要学习 jsx 语法</li><li>api无法满足需求时需要使用 native 混编去扩展，增加插件难度较大</li><li>发展还不成熟，文档少。目前很多 ui 组件只有ios的实现，android的需要自己实现</li><li>UI 组件和系统 API 相对较少，使用较难</li></ol><h5 id="Ionic-3"><a href="#Ionic-3" class="headerlink" title="Ionic"></a>Ionic</h5><h6 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h6><ol><li>内存较高的手机可以达到原始性能</li><li>编写 cordova 插件，可以达到系统 API 全部支持</li><li>UI 组件和系统 API 丰富，可以实现绝大多数效果并且使用容易</li><li>可以浏览器调试</li><li>ios 和 android 基本上可以共用代码，支持跨平台</li><li>支持热更新</li><li>发展较成熟，已经更新到第四版本，资料较全。</li><li>可用 flexbox 布局</li></ol><h6 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h6><ol><li>需要学习 angularjs</li><li>api无法满足需求时需要使用 native 去扩展</li><li>原生编写 cordova 插件难度大</li><li>app包比较大，需要加入 cordova 插件</li><li>占用内存高一些(需要加载 webview 和 cordova )</li><li>web技术无法解决一切问题</li><li>增加插件难度较大</li></ol><h5 id="native-2"><a href="#native-2" class="headerlink" title="native"></a>native</h5><h6 id="优势-2"><a href="#优势-2" class="headerlink" title="优势"></a>优势</h6><ol><li>最好的体验以及功能实现</li><li>完善成熟的开发文档</li></ol><h6 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h6><ol><li>无法跨平台。需要具备iOS,android双平台开发技能</li><li>需要通过编译后才能调试，耗时较长</li><li>开发成本高，开发周期长</li></ol>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx快速上手</title>
      <link href="/2018/09/03/nginx-kuai-su-shang-shou/"/>
      <url>/2018/09/03/nginx-kuai-su-shang-shou/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Nginx是一款使用C语言开发的高性能的http 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，官方测试nginx能够支支撑5万并发链接，并且cpu、内存等资源消耗却非常低，运行非常稳定。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li>网页静态服务器。</li><li>反向代理，负载均衡。</li></ol><a id="more"></a><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre class="line-numbers language-bash"><code class="language-bash">//安装Nginxyum <span class="token function">install</span> -y nginx//启动<span class="token function">service</span> nginx start//设置开机自启<span class="token function">service</span> <span class="token function">enable</span> nginx.service//重新加载<span class="token function">service</span> nginx reload//查看状态<span class="token function">service</span> nginx status//重启<span class="token function">service</span> nginx restart//卸载yum remove nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认安装最新版本，如果安装其他版本可能造成配置文件失效。</p><h5 id="Nginx全局配置"><a href="#Nginx全局配置" class="headerlink" title="Nginx全局配置"></a>Nginx全局配置</h5><p>/etc/nginx/nginx.conf</p><h5 id="自定义Nginx站点配置文件存放目录"><a href="#自定义Nginx站点配置文件存放目录" class="headerlink" title="自定义Nginx站点配置文件存放目录"></a>自定义Nginx站点配置文件存放目录</h5><p>/etc/nginx/conf.d/</p><h3 id="nginx-设置静态目录"><a href="#nginx-设置静态目录" class="headerlink" title="nginx 设置静态目录"></a>nginx 设置静态目录</h3><p>step1 修改 nginx.conf 文件</p><pre class="line-numbers language-json"><code class="language-json">server <span class="token punctuation">{</span>        listen       <span class="token number">80</span><span class="token punctuation">;</span>        #listen       <span class="token punctuation">[</span><span class="token operator">:</span><span class="token operator">:</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">80</span><span class="token punctuation">;</span>        server_name  zmscode.cn<span class="token punctuation">;</span>        root   /data/blog/public/<span class="token punctuation">;</span>        index  index.html index.htm<span class="token punctuation">;</span>       # location /<span class="token punctuation">{</span>            #root   /home/vsftpd/blog/public/<span class="token punctuation">;</span>           #index  index.html index.htm<span class="token punctuation">;</span>       # <span class="token punctuation">}</span>        error_page <span class="token number">404</span> /<span class="token number">404</span>.html<span class="token punctuation">;</span>            location = /40x.html <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        error_page <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html<span class="token punctuation">;</span>            location = /50x.html <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>listen：监听端口</li><li>server_name：配置域名</li><li>root：文件夹路径</li><li>index默认文件</li></ul><p>修改配置文件后，需要重启 nginx 服务</p><hr><h3 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h3><p>Q：问题</p><pre><code>nginx 403 forbidden</code></pre><p>A:解决办法</p><ol><li>网站禁止特定的用户访问所有内容，例：网站屏蔽某个ip访问。</li><li>访问禁止目录浏览的目录，例：设置autoindex off后访问目录。</li><li>用户访问只能被内网访问的文件。</li><li>不存在的index文件导致</li></ol>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ionic添加Android指纹验证页面</title>
      <link href="/2018/08/31/ionic-tian-jia-android-zhi-wen-yan-zheng-ye-mian/"/>
      <url>/2018/08/31/ionic-tian-jia-android-zhi-wen-yan-zheng-ye-mian/</url>
      
        <content type="html"><![CDATA[<h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><pre class="line-numbers language-bash"><code class="language-bash">ionic cordova plugin add cordova-plugin-android-fingerprint-auth<span class="token function">npm</span> <span class="token function">install</span> --save @ionic-native/android-fingerprint-auth<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h4><p>在项目中下运行,添加 fingerprint 页面</p><pre class="line-numbers language-bash"><code class="language-bash">ionic generate fingerprint<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建文件夹fingerprint,包含以下文件</p><pre class="line-numbers language-bash"><code class="language-bash">fingerprint.html ---页面模板fingerprint.module.ts ---页面入口fingerprint.scss ---样式fingerprint.ts ---配置选择器和模板文件，写js代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><h4 id="在文件主入口添加声明和实例"><a href="#在文件主入口添加声明和实例" class="headerlink" title="在文件主入口添加声明和实例"></a>在文件主入口添加声明和实例</h4><p>app.module.ts部分代码</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> FingerprintPage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../pages/fingerprint/fingerprint'</span><span class="token punctuation">;</span>@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  declarations<span class="token punctuation">:</span> <span class="token punctuation">[</span>    MyApp<span class="token punctuation">,</span>    HelloIonicPage<span class="token punctuation">,</span>    ItemDetailsPage<span class="token punctuation">,</span>    ListPage<span class="token punctuation">,</span>    FingerprintPage  <span class="token punctuation">]</span><span class="token punctuation">,</span>  imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>    BrowserModule<span class="token punctuation">,</span>    IonicModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span>MyApp<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  bootstrap<span class="token punctuation">:</span> <span class="token punctuation">[</span>IonicApp<span class="token punctuation">]</span><span class="token punctuation">,</span>  entryComponents<span class="token punctuation">:</span> <span class="token punctuation">[</span>    MyApp<span class="token punctuation">,</span>    HelloIonicPage<span class="token punctuation">,</span>    ItemDetailsPage<span class="token punctuation">,</span>    ListPage<span class="token punctuation">,</span>    FingerprintPage  <span class="token punctuation">]</span><span class="token punctuation">,</span>  providers<span class="token punctuation">:</span> <span class="token punctuation">[</span>    StatusBar<span class="token punctuation">,</span>    SplashScreen<span class="token punctuation">,</span>    AndroidFingerprintAuth<span class="token punctuation">,</span>    <span class="token punctuation">{</span>provide<span class="token punctuation">:</span> ErrorHandler<span class="token punctuation">,</span> useClass<span class="token punctuation">:</span> IonicErrorHandler<span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="添加跳转代码"><a href="#添加跳转代码" class="headerlink" title="添加跳转代码"></a>添加跳转代码</h4><p>list.ts 源码修改部分</p><pre class="line-numbers language-js"><code class="language-js">items<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> string<span class="token punctuation">,</span> note<span class="token punctuation">:</span> string<span class="token punctuation">,</span> icon<span class="token punctuation">:</span> string<span class="token punctuation">,</span> id<span class="token punctuation">:</span> Number <span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'指纹识别'</span><span class="token punctuation">,</span>      note<span class="token punctuation">:</span> <span class="token string">'指纹识别页面'</span><span class="token punctuation">,</span>      icon<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>icons<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>icons<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      id<span class="token punctuation">:</span> <span class="token number">11</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">itemTapped</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>navCtrl<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>FingerprintPage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>navCtrl<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ItemDetailsPage<span class="token punctuation">,</span> <span class="token punctuation">{</span>        item<span class="token punctuation">:</span> item      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="添加指纹功能"><a href="#添加指纹功能" class="headerlink" title="添加指纹功能"></a>添加指纹功能</h4><p>fingerprint.ts 源码添加指纹功能</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> AndroidFingerprintAuth <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@ionic-native/android-fingerprint-auth'</span><span class="token punctuation">;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> androidFingerprintAuth<span class="token punctuation">:</span> AndroidFingerprintAuth<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>androidFingerprintAuth<span class="token punctuation">.</span><span class="token function">isAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>isAvailable<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>androidFingerprintAuth<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token punctuation">{</span> clientId<span class="token punctuation">:</span> <span class="token string">'myAppName'</span><span class="token punctuation">,</span> username<span class="token punctuation">:</span> <span class="token string">'myUsername'</span><span class="token punctuation">,</span> password<span class="token punctuation">:</span> <span class="token string">'myPassword'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>withFingerprint<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Successfully encrypted credentials.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Encrypted credentials: '</span> <span class="token operator">+</span> result<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>withBackup<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Successfully authenticated with backup password!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Didn\'t authenticate!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>androidFingerprintAuth<span class="token punctuation">.</span>ERRORS<span class="token punctuation">.</span>FINGERPRINT_CANCELLED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Fingerprint authentication cancelled'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'不支持'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成</p>]]></content>
      
      
      <categories>
          
          <category> ionic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ionic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ionic项目结构</title>
      <link href="/2018/08/31/ionic-xiang-mu-jie-gou/"/>
      <url>/2018/08/31/ionic-xiang-mu-jie-gou/</url>
      
        <content type="html"><![CDATA[<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><pre class="line-numbers language-bash"><code class="language-bash">//创建基础项目ionic start MyIonicProject tutorial<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="根目录"><a href="#根目录" class="headerlink" title="根目录"></a>根目录</h4><pre class="line-numbers language-bash"><code class="language-bash">.sourcemapsnode_module ---node 依赖包platforms ---生成android和ios安装包位置plugins  ---Cordova安装的插件resources  ---android/ios资源<span class="token punctuation">(</span>更换图标和启动动画<span class="token punctuation">)</span>src  ---开发工作目录<span class="token punctuation">(</span>最主要<span class="token punctuation">)</span>www ---静态文件.editorconfig ---ide编码风格配置文件.gitignore  ---git忽略文件config.xml  ---配置文件ionic.config.jsonpackage-lock.jsonpackage.json  ---项目信息tsconfig.json ---TypeScript 配置信息tslint.json  ---格式化和校验 TypeScript<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><h4 id="src"><a href="#src" class="headerlink" title="src"></a>src</h4><pre class="line-numbers language-bash"><code class="language-bash">│  declarations.d.ts│  index.html ---应用程序的主要入口,加载js,css和引导程序│  manifest.json ---APP配置文件,如配置启动文件,icons│  service-worker.js│├─app ---应用根目录│      app.component.ts ---逻辑│      app.html  ---模版│      app.module.ts ---应用程序根模块│      app.scss ---选择器│      main.ts ---设置根模块│ ├─assets ---资源目录（静态文件（图片，js 框架等）│  ├─icon│  │      favicon.ico│  ││  └─imgs│          logo.png│├─pages ---页面文件，放置编写的页面文件│  ├─hello-ionic│  │      hello-ionic.html│  │      hello-ionic.scss│  │      hello-ionic.ts│  ││  ├─item-details│  │      item-details.html│  │      item-details.scss│  │      item-details.ts│  ││  ├─list│  │      list.html│  │      list.scss│  │      list.ts│  ││  └─login│          login.html│          login.module.ts│          login.scss│          login.ts│└─theme        variables.scss ---主题配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ionic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ionic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pm2快速上手</title>
      <link href="/2018/08/30/pm2-kuai-su-shang-shou/"/>
      <url>/2018/08/30/pm2-kuai-su-shang-shou/</url>
      
        <content type="html"><![CDATA[<p>参考文档：<a href="https://www.npmjs.com/package/pm2" target="_blank" rel="noopener">https://www.npmjs.com/package/pm2</a></p><p>测试demo: <a href="https://github.com/ddzyan/node-module-example/tree/master/pm2" target="_blank" rel="noopener">https://github.com/ddzyan/node-module-example/tree/master/pm2</a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>pm2 是node进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash"><code class="language-bash">//全局安装<span class="token function">npm</span> i pm2 -g//更新pm2 update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="管理应用程序"><a href="#管理应用程序" class="headerlink" title="管理应用程序"></a>管理应用程序</h4><pre class="line-numbers language-bash"><code class="language-bash">//查看所有服务信息pm2 list//监控所有服务详细信息包括日志pm2 monitpm2 start    <span class="token operator">&lt;</span>file.js<span class="token operator">|</span>json_conf<span class="token operator">></span>pm2 <span class="token punctuation">[</span>stop/restart/reload/delete<span class="token punctuation">]</span>  <span class="token operator">&lt;</span>app_name<span class="token operator">|</span><span class="token function">id</span><span class="token operator">|</span><span class="token string">'all'</span><span class="token operator">|</span>json_conf<span class="token operator">></span>pm2 <span class="token punctuation">[</span>start/stop/restart/reload/delete<span class="token punctuation">]</span> ecosystem.config.js --only worker-app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul><li>file.js - 服务启动文件</li><li>json_conf - pm2 配置文件</li><li>app_name - 指定 pm2 服务名称</li><li>id - 指定 pm2 id</li><li>all 全部服务</li><li>json_conf 配置文件中的全部服务</li><li>–only - 只操作配置文件中的指定服务</li></ul><h4 id="添加自启"><a href="#添加自启" class="headerlink" title="添加自启"></a>添加自启</h4><pre><code>//添加系统启动pm2 startup centos//保存pm2 save</code></pre><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><pre><code>//查看全部服务pm2 logs //查看指定 APP-NAME  服务日志pm2 logs APP-NAME //重新加载日志pm2 reloadLogs//清空全部日志pm2 flush</code></pre><hr><h3 id="配置文件模版"><a href="#配置文件模版" class="headerlink" title="配置文件模版"></a>配置文件模版</h3><p>参考文档：<a href="http://pm2.keymetrics.io/docs/usage/cluster-mode/" target="_blank" rel="noopener">http://pm2.keymetrics.io/docs/usage/cluster-mode/</a></p><p>在项目根目录下，初始化配置文件</p><pre class="line-numbers language-bash"><code class="language-bash">pm2 init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ecosystem.config.js</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  apps<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//进程名称</span>    script<span class="token punctuation">:</span> <span class="token string">'index.js'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//启动脚本</span>    watch<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认关闭watch 可替换为 ['src']</span>    log_date_format<span class="token punctuation">:</span> <span class="token string">'YYYY-MM-DD HH:mm Z'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//日志格式</span>    ignore_watch<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'node_modules'</span><span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">,</span> <span class="token string">'logs'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    out_file<span class="token punctuation">:</span> <span class="token string">'./pm2-server-out.log'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 日志输出地址</span>    error_file<span class="token punctuation">:</span> <span class="token string">'./pm2-server-error.log'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 错误日志地址</span>    max_memory_restart<span class="token punctuation">:</span> <span class="token string">'1G'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 超过多大内存自动重启，仅防止内存泄露有意义，需要根据自己的业务设置</span>    env<span class="token punctuation">:</span> <span class="token punctuation">{</span>      NODE_ENV<span class="token punctuation">:</span> <span class="token string">'production'</span><span class="token comment" spellcheck="true">//环境变量,在服务中通过 process.env.NODE_ENV 获取</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    exec_mode<span class="token punctuation">:</span> <span class="token string">'fork'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 开启多线程模式，用于负载均衡</span>    instances<span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 启用多少个实例，可用于负载均衡</span>    autorestart<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 程序崩溃后自动重启</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  deploy<span class="token punctuation">:</span> <span class="token punctuation">{</span>    production<span class="token punctuation">:</span> <span class="token punctuation">{</span>      user<span class="token punctuation">:</span> <span class="token string">'node'</span><span class="token punctuation">,</span>      host<span class="token punctuation">:</span> <span class="token string">'212.83.163.1'</span><span class="token punctuation">,</span>      ref<span class="token punctuation">:</span> <span class="token string">'origin/master'</span><span class="token punctuation">,</span>      repo<span class="token punctuation">:</span> <span class="token string">'git@github.com:repo.git'</span><span class="token punctuation">,</span>      path<span class="token punctuation">:</span> <span class="token string">'/var/www/production'</span><span class="token punctuation">,</span>      <span class="token string">'post-deploy'</span><span class="token punctuation">:</span> <span class="token string">'npm install &amp;&amp; pm2 reload ecosystem.config.js --env production'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><p>绝大部分参数已经在模版中注释</p><ul><li>apps - 服务配置信息</li><li>deploy - 同步信息，可以将pm2配置文件同步到指定服务器</li></ul><p>日志文件监控，根据文件大小或者日期进行切割或者回滚，请参考：<a href="http://www.zmscode.cn/2018/08/17/pm2日志管理pm2-logrotat/" target="_blank" rel="noopener">http://www.zmscode.cn/2018/08/17/pm2日志管理pm2-logrotat/</a></p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> node_module </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ionic简介</title>
      <link href="/2018/08/30/ionic-jian-jie/"/>
      <url>/2018/08/30/ionic-jian-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h4><ul><li>Angular4.0</li><li>TypeScript</li><li>HTML</li><li>CSS</li></ul><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>ionic主要职责是作为 app 的前端UI框架，提供基本的样式以及各种UI组件。</p><p>结合Cordova / PhoneGap插件和TypeScript扩展，支持120多种本机设备功能，如蓝牙，HealthKit，指纹识别等。</p><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>用户打开一个ionic应用，首先设备加载cordova应用封装器，然后cordova应用封装器加载webview，webview加载index.html文件，最后angular加载并确定默认视图，ionic渲染ionic组件作为UI。</p><p><img src="/images/ionic-yl.png" alt="image|694x204"></p><p>其中cordova的任务是实现浏览器窗口和原生API间的通信。</p><p>这个过程是Angular控制器使用Cordova JavaScript API调用Cordova，Cordova使用原生SDK和设备通信。</p><a id="more"></a><h6 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h6><p>WebView(网络视图)能加载显示网页，可以将其视为一个浏览器。它使用了WebKit渲染引擎加载显示网页。</p><h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><p>它一次开发，多个平台部署，能够最小化开发成本，它使用web技术开发，又能访问原生API。</p><h5 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h5><p>性能上由于依赖于webview所以性能比不上原生应用，原生功能的访问也取决于相应的插件有没有被开发出来或者其他方法。</p><p>Cordova 封装的控件UI，需要通过 java 或者 Obj-C进行修改。<br><strong>性能：native app &gt;react native app&gt; hybrid app</strong></p><hr><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre><code>npm install -g cordova ionic//检测安装版本ionic -v3.19.1</code></pre>]]></content>
      
      
      <categories>
          
          <category> ionic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ionic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node项目产品化</title>
      <link href="/2018/08/28/node-xiang-mu-chan-pin-hua/"/>
      <url>/2018/08/28/node-xiang-mu-chan-pin-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在阅读《nodejs深入浅出》中“产品化”章节后，在项目编写时所考虑的各个方面有了更加全面的理解，并且了解到项目从开始编写到最终部署服务器需要注意的地方。但是文中未对其中的技术进行拓展性的讲解，我将在未来的几篇文章对其中的技术难点进行解析，欢迎大家阅读。</p><p>本篇为入门，使大家了解到“产品化”章节所讲解的内容。</p><p>文档参考：《nodejs深入浅出》“产品化”章节。</p><h3 id="项目工程化"><a href="#项目工程化" class="headerlink" title="项目工程化"></a>项目工程化</h3><p>将各种功能文件分门别类地归类到指定目录中。</p><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p>使用脚手架生成项目结构，了解每个初始文件夹和文件的作用，做到归类。</p><h4 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h4><p>自动化处理重复动作，例如：合并静态文件，压缩文件大小，打包应用，编译模块，代码测试等</p><h5 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h5><h6 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h6><p>linux系统下的最常用的构建工具</p><h5 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h5><p>gulp是前端开发过程中一种基于流的代码构建工具，是自动化项目的构建利器，支持跨平台。</p><a id="more"></a><h4 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h4><p>多人编辑代码的时候需要统一编码规范，常用的有 ESLint。</p><p>ESLint快速上手：<a href="http://www.zmscode.cn/2018/08/25/ESLint快速上手/" target="_blank" rel="noopener">http://www.zmscode.cn/2018/08/25/ESLint快速上手/</a></p><h4 id="代码审查"><a href="#代码审查" class="headerlink" title="代码审查"></a>代码审查</h4><p>通过gitlab等开源工具搭建内部的代码托管平台。新功能开发单独开一个分支分出，每次都单独提交到分支，等全部功能开发完后合并到主干，进行代码审核。</p><h5 id="审核内容"><a href="#审核内容" class="headerlink" title="审核内容"></a>审核内容</h5><ul><li>功能是否正确完成</li><li>编码风格是否符合规范</li><li>是否具有单元测试</li></ul><h3 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h3><h4 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h4><p>代码—&gt;stage(测试环境)—&gt;pre-release(预发环境)—&gt;product(线上环境)</p><ol><li>本地开发完成，并且单元测试全部完成</li><li>准备测试环境提供测试人员验证代码正确</li><li>准备更接近线上真实数据，部署预发环境进行测试</li><li>部署线上环境</li></ol><h4 id="部署操作"><a href="#部署操作" class="headerlink" title="部署操作"></a>部署操作</h4><p>pm2快速上手：<a href="http://www.zmscode.cn/2018/08/30/pm2快速上手/" target="_blank" rel="noopener">http://www.zmscode.cn/2018/08/30/pm2快速上手/</a></p><p>pm2日志管理pm2-logrotat: <a href="http://www.zmscode.cn/2018/08/17/pm2日志管理pm2-logrotat/" target="_blank" rel="noopener">http://www.zmscode.cn/2018/08/17/pm2日志管理pm2-logrotat/</a></p><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><h4 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h4><p>静态文件通过 Nginx 部署，使服务更加专注于动态服务。</p><p>Nginx快速上手：<a href="http://www.zmscode.cn/2018/09/03/nginx快速上手/" target="_blank" rel="noopener">http://www.zmscode.cn/2018/09/03/nginx快速上手/</a></p><h4 id="启用缓存"><a href="#启用缓存" class="headerlink" title="启用缓存"></a>启用缓存</h4><p>redis</p><h4 id="多进程架构"><a href="#多进程架构" class="headerlink" title="多进程架构"></a>多进程架构</h4><p>pm2 cluster模式</p><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><p>数据库读写分离配置，避免数据写入时候的操作，导致读取的速度受到影响。</p><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><h4 id="访问日志"><a href="#访问日志" class="headerlink" title="访问日志"></a>访问日志</h4><p>记录每次请求的url,method,参数,header,ip等</p><h4 id="异常日志"><a href="#异常日志" class="headerlink" title="异常日志"></a>异常日志</h4><p>异常日志单独输出，通过日志文件可以确定BUG出现位置。</p><h4 id="分割日志"><a href="#分割日志" class="headerlink" title="分割日志"></a>分割日志</h4><p>避免单个日志过大，影响查询效率。可以根据文件大小或者文件日期对日志进行切割或者回滚。</p><hr><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><strong>以下部分一般由运维人员提供支持，不需要太深入的了解。</strong></p><h3 id="监控报警"><a href="#监控报警" class="headerlink" title="监控报警"></a>监控报警</h3><h4 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h4><ul><li>进程</li><li>磁盘</li><li>内存</li><li>响应时间</li><li>日志(主要检测异常报警)</li><li>cpu占用</li><li>I/O负载</li><li>网络</li><li>应用状态(提供API让监控程序访问)</li></ul><h4 id="报警实现"><a href="#报警实现" class="headerlink" title="报警实现"></a>报警实现</h4><ul><li>邮件报警</li></ul><h3 id="稳定性-负载均衡"><a href="#稳定性-负载均衡" class="headerlink" title="稳定性,负载均衡"></a>稳定性,负载均衡</h3><ul><li>多机器</li><li>多机房</li><li>容灾备份</li></ul>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node常用日志模块简介</title>
      <link href="/2018/08/28/node-chang-yong-ri-zhi-mo-kuai-jian-jie/"/>
      <url>/2018/08/28/node-chang-yong-ri-zhi-mo-kuai-jian-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文介绍了在 nodejs 服务中常用的日志模块，方便大家选择和快速上手。</p><h3 id="log4js"><a href="#log4js" class="headerlink" title="log4js"></a>log4js</h3><p>下载量：1168793</p><p>包含的功能：</p><ul><li>能在控制台彩色输出stdout和stderr</li><li>file appender 可以根据文件大小或者日期时间来配置日志的回滚</li><li>自定义日志消息布局/模式</li><li>日志作为电子邮件发送</li><li>多台服务器日志设置发送到服务器集中记录</li><li>可以设置不同级别的日志</li><li>可以自定义日志文件名称</li></ul><p>参考文档地址：<a href="https://log4js-node.github.io/log4js-node/" target="_blank" rel="noopener">https://log4js-node.github.io/log4js-node/</a></p><a id="more"></a><h3 id="winston"><a href="#winston" class="headerlink" title="winston"></a>winston</h3><p>下载量：2661692</p><p>包含的功能：</p><ul><li>多台服务器日志设置发送到服务器集中记录</li><li>自定义日志消息</li><li>可以自定义日志文件名称</li><li>可配置插件进行拓展</li></ul><p>常用插件：</p><ul><li>winston-mongodb：日志输出到mongodb数据库</li><li>winston-mail：日志作为电子邮件发送</li><li>winston-daily-rotate-file：日志根据日期回滚</li></ul><p>快速上手：<a href="https://github.com/ddzyan/node-module-example/tree/master/winston" target="_blank" rel="noopener">https://github.com/ddzyan/node-module-example/tree/master/winston</a></p><p>参考文档地址：<a href="https://github.com/winstonjs/winston#readme" target="_blank" rel="noopener">https://github.com/winstonjs/winston#readme</a></p><h3 id="pm2"><a href="#pm2" class="headerlink" title="pm2"></a>pm2</h3><p>下载量：213473</p><p>包含的功能：</p><ul><li>可以将程序的的 console.error,console.info 输出到指定日志文件中</li><li>可以自定义日志文件名称</li><li>可以通过安装：pm2-logrotat 实现根据文件大小或者日期时间回滚日志</li></ul><p>参考文档地址：<a href="http://pm2.keymetrics.io/" target="_blank" rel="noopener">http://pm2.keymetrics.io/</a></p><hr><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>三者该有的功能的功能都有，可根据具体需求选取。比如对日志文件名称有特殊要求的可以选择log4js，因为log4js过期日期名称可以选择为日期或者其他格式，但是正在写入的文件可以单独命名。</p><h4 id="日志回滚"><a href="#日志回滚" class="headerlink" title="日志回滚"></a>日志回滚</h4><p>pm2：功能最差，需要启动 pm2-logrotat 服务，根据设置的检查时间，每隔一段时间去检测日志文件信息，达到指定要求则新建文件进行写入。</p><p>winston：需要下载安装 winston-daily-rotate-file 插件实现日志回滚。</p><p>log4js：无需下载安装插件，自带日志回滚功能。</p><h4 id="自定义日志信息"><a href="#自定义日志信息" class="headerlink" title="自定义日志信息"></a>自定义日志信息</h4><p>pm2：只能通过 console 方式，使用起来比较麻烦</p><p>winston：通过自定义返回值和参数配置组合模式，方便简洁</p><p>log4js：采用 layout 模版模式，使用起来也非常简单。</p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> node_module </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker部署stellar</title>
      <link href="/2018/08/27/docker-bu-shu-stellar/"/>
      <url>/2018/08/27/docker-bu-shu-stellar/</url>
      
        <content type="html"><![CDATA[<p>参考文档：<a href="https://github.com/stellar/docker-stellar-core-horizon" target="_blank" rel="noopener">https://github.com/stellar/docker-stellar-core-horizon</a></p><h4 id="下载镜像，构建容器"><a href="#下载镜像，构建容器" class="headerlink" title="下载镜像，构建容器"></a>下载镜像，构建容器</h4><pre class="line-numbers language-bash"><code class="language-bash">//拉取 images ，根据配置启动 containerdocker run --rm -it -p “ 8000：8000 ” -v “ / home / scott / stellar：/ opt / stellar ” - name stellar stellar / quickstart --testnet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="启动参数"><a href="#启动参数" class="headerlink" title="启动参数"></a>启动参数</h4><ul><li>–pubnet:  正式网络</li><li>–testnet:  测试网络</li><li>–standalone:  私有网络</li></ul><h4 id="访问正在运行的stellar容器"><a href="#访问正在运行的stellar容器" class="headerlink" title="访问正在运行的stellar容器"></a>访问正在运行的stellar容器</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> docker <span class="token function">exec</span> -it stellar /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><a id="more"></a><h4 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h4><p>在 container (容器)中，可以使用 supervisord 来管理三个服务。</p><pre class="line-numbers language-bash"><code class="language-bash">//前提已经进入对应的容器中，命令在上面root@79e50b56739e:/<span class="token comment" spellcheck="true"># supervisorctl</span>horizon                          RUNNING   pid 22, <span class="token function">uptime</span> 3:19:32postgresql                       RUNNING   pid 20, <span class="token function">uptime</span> 3:19:32stellar-core                     RUNNING   pid 751, <span class="token function">uptime</span> 3:12:11//停止supervisor<span class="token operator">></span> stop stellar-core  //重启supervisor<span class="token operator">></span> restart horizon //开始supervisor<span class="token operator">></span> start horizon <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><pre class="line-numbers language-bash"><code class="language-bash">//进入对应的容器中，存放在如下路径/var/log/supervisor/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>supervisord管理的进程输出的stdout和stderr分别保留中2个文件中。</p><h4 id="访问postgreSql数据库"><a href="#访问postgreSql数据库" class="headerlink" title="访问postgreSql数据库"></a>访问postgreSql数据库</h4><ul><li>账号：stellar</li><li>密码：第一次运行输入的密码</li><li>端口：5432</li></ul><hr><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Q：</p><pre class="line-numbers language-bash"><code class="language-bash">$ docker run -d -v <span class="token string">"/str:/opt/stellar"</span> -p <span class="token string">"8000:8000"</span> --name stellar stellar/quickstart --pubnet$ docker container <span class="token function">ls</span> -alCONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS                     PORTS               NAMES7bda77b07a53        stellar/quickstart   <span class="token string">"/init -- /start -..."</span>   5 seconds ago       Exited <span class="token punctuation">(</span>0<span class="token punctuation">)</span> 4 seconds ago                       stellar$ docker logs stellarrunning `/start --pubnet'pids are <span class="token punctuation">[</span>5<span class="token punctuation">]</span>Starting Stellar Quickstartmode: persistentnetwork: pubnet <span class="token punctuation">(</span>Public Global Stellar Network <span class="token punctuation">;</span> September 2015<span class="token punctuation">)</span>postgres: config directory exists, skipping copysupervisor: config directory exists, skipping copystellar-core: config directory exists, skipping copyhorizon: config directory exists, skipping copypostgres user: stellarexited 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A:</p><p>删除启动时候映射的文件夹，再次启动。例如-v “/data/home/admin/stellar:/opt/stellar” 中的/data/home/admin/stellar。</p><p>Q：</p><pre class="line-numbers language-bash"><code class="language-bash">winpty docker run --rm -it -p <span class="token string">"15432:5432"</span> -p <span class="token string">"18000:8000"</span> -p <span class="token string">"11626:11626"</span> - <span class="token string">"c:/some/local/path:/opt/stellar"</span> --name stellar tellar/quickstart --testnetrunning `/start --testnet'pids are <span class="token punctuation">[</span>5<span class="token punctuation">]</span>Starting Stellar Quickstartmode: persistentnetwork: testnet <span class="token punctuation">(</span>Test SDF Network <span class="token punctuation">;</span> September 2015<span class="token punctuation">)</span>postgres user: stellarEnter New Postgresql Password:Confirm:init-postgres: <span class="token function">yes</span>okWaiting <span class="token keyword">for</span> postgres to be available<span class="token punctuation">..</span>.Waiting <span class="token keyword">for</span> postgres to be available<span class="token punctuation">..</span>.Waiting <span class="token keyword">for</span> postgres to be available<span class="token punctuation">..</span>.Waiting <span class="token keyword">for</span> postgres to be available<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A:<br>将docker 升级到最新版本。</p>]]></content>
      
      
      <categories>
          
          <category> stellar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> docker </tag>
            
            <tag> stellar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EOS-多索引表使用例子</title>
      <link href="/2018/08/25/eos-duo-suo-yin-biao-shi-yong-li-zi/"/>
      <url>/2018/08/25/eos-duo-suo-yin-biao-shi-yong-li-zi/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>阅读本文前，请先阅读：<a href="http://111.231.215.55/posts/eos_multi-index.html" target="_blank" rel="noopener">http://111.231.215.55/posts/eos_multi-index.html</a></p><p>将完成一个任务清单计划的智能合约，功能有：</p><ol><li>发布任务</li><li>完成任务</li><li>获得全部任务</li></ol><p>所有代码将在博文底部展示</p><h4 id="定义表结构"><a href="#定义表结构" class="headerlink" title="定义表结构"></a>定义表结构</h4><pre class="line-numbers language-c++"><code class="language-c++">// @abi table todos i64struct todo    {        uint64_t id;        std::string description;        uint64_t completed;        uint64_t primary_key() const { return id; }        EOSLIB_SERIALIZE(todo, (id)(description)(completed))    };<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>// @abi table</p><p>编译器eosiocpp 通过识别 //@abi 公开此表，并使其在智能契约之外可见。</p><p>结构名称少于12个字符，全部为小写。</p><a id="more"></a><h4 id="typedef多索引表并定义索引"><a href="#typedef多索引表并定义索引" class="headerlink" title="typedef多索引表并定义索引"></a>typedef多索引表并定义索引</h4><pre class="line-numbers language-c++"><code class="language-c++">typedef eosio::multi_index<N(todos), todo> todo_table;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>定义一个表名是 N(todos) ，结构体是 todo 的多索引表。N(mystruct)执行struct name到uint64_t的编译转换，这个uint64_t用于标识属于多索引表的数据。</p><h4 id="创建局部变量"><a href="#创建局部变量" class="headerlink" title="创建局部变量"></a>创建局部变量</h4><pre><code>todo_table todos;</code></pre><p>现在已经定义了一个多索引表，名称为 todos ，我们可以在接下来的智能合约中使用它。</p><h4 id="定义操作方法"><a href="#定义操作方法" class="headerlink" title="定义操作方法"></a>定义操作方法</h4><pre class="line-numbers language-c++"><code class="language-c++">todo_contract(account_name self) : eosio::contract(self), todos(_self, _self) {}    void create(account_name author, const uint32_t id, const std::string &description);    void destroy(account_name author, const uint32_t id);    void complete(account_name author, const uint32_t id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>create -创建任务表</li><li>destroy -删除任务表</li><li>complete - 更新任务表</li></ul><h4 id="全部源码"><a href="#全部源码" class="headerlink" title="全部源码"></a>全部源码</h4><p>doit.cpp</p><pre class="line-numbers language-c++"><code class="language-c++">#include "doit.hpp"void todo_contract::create(account_name author, const uint32_t id, const std::string &description){  todos.emplace(author, [&](auto &new_todo) {    new_todo.id = id;    new_todo.description = description;    new_todo.completed = 0;  });  eosio::print("todo#", id, " created");}void todo_contract::destroy(account_name author, const uint32_t id){  auto todo_lookup = todos.find(id);  todos.erase(todo_lookup);  eosio::print("todo#", id, " destroyed");}void todo_contract::complete(account_name author, const uint32_t id){  auto todo_lookup = todos.find(id);  eosio_assert(todo_lookup != todos.end(), "Todo does not exist");  todos.modify(todo_lookup, author, [&](auto &modifiable_todo) {    modifiable_todo.completed = 1;  });  eosio::print("todo#", id, " marked as complete");}EOSIO_ABI(todo_contract, (create)(complete)(destroy))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>doit.hpp</p><pre class="line-numbers language-c++"><code class="language-c++">#include <eosiolib/eosio.hpp>#include <eosiolib/print.hpp>class todo_contract : public eosio::contract{  public:    todo_contract(account_name self) : eosio::contract(self), todos(_self, _self) {}    void create(account_name author, const uint32_t id, const std::string &description);    void destroy(account_name author, const uint32_t id);    void complete(account_name author, const uint32_t id);  private:    // @abi table todos i64    struct todo    {        uint64_t id;        std::string description;        uint64_t completed;        uint64_t primary_key() const { return id; }        EOSLIB_SERIALIZE(todo, (id)(description)(completed))    };    typedef eosio::multi_index<N(todos), todo> todo_table;    todo_table todos;};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用和调试"><a href="#使用和调试" class="headerlink" title="使用和调试"></a>使用和调试</h4><p>参考博文：<a href="http://111.231.215.55/posts/eos_contract_build.html" target="_blank" rel="noopener">http://111.231.215.55/posts/eos_contract_build.html</a></p>]]></content>
      
      
      <categories>
          
          <category> eos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> eos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESLint快速上手</title>
      <link href="/2018/08/25/eslint-kuai-su-shang-shou/"/>
      <url>/2018/08/25/eslint-kuai-su-shang-shou/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>可以统一配置工程代码规范标准，并且可以进行自动修复。</p><p>eslint 规则参考文档：<a href="https://eslint.org/docs/rules/" target="_blank" rel="noopener">https://eslint.org/docs/rules/</a></p><p>git demo地址：<a href="https://github.com/ddzyan/node-module-example/tree/master/eslint" target="_blank" rel="noopener">https://github.com/ddzyan/node-module-example/tree/master/eslint</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>全局安装</p><pre class="line-numbers language-bash"><code class="language-bash">//全局安装 eslint<span class="token function">npm</span> <span class="token function">install</span> -g eslint//初始化配置文件eslint --init//检测某文件eslint yourfile.js//自动修复某文件eslint yourfile.js --fix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><p>本地安装</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> eslint --save-dev./node_modules/.bin/eslint --init./node_modules/.bin/eslint yourfile.js./node_modules/.bin/eslint yourfile.js --fix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文档：<a href="http://eslint.cn/docs/user-guide/getting-started" target="_blank" rel="noopener">http://eslint.cn/docs/user-guide/getting-started</a></p><h3 id="基础模板"><a href="#基础模板" class="headerlink" title="基础模板"></a>基础模板</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//.eslintrc.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"extends"</span><span class="token punctuation">:</span> <span class="token string">"airbnb-base"</span><span class="token punctuation">,</span>    <span class="token string">"env"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"node"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"rules"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"linebreak-style"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"windows"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"no-console"</span><span class="token punctuation">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>        <span class="token string">"quotes"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"single"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"no-plusplus"</span><span class="token punctuation">:</span> <span class="token string">"off"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-bash"><code class="language-bash">//使用前先安装必要模块，这里采用的是全局安装<span class="token function">npm</span> <span class="token function">install</span> -g eslint-config-airbnb-base<span class="token function">npm</span> <span class="token function">install</span> -g eslint-plugin-import//检测eslint index.js//自动修复eslint index.js --fix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继承于 eslint-config-airbnb 规则，规则具体内容参考 <a href="https://github.com/yuche/javascript" target="_blank" rel="noopener">https://github.com/yuche/javascript</a></p><p>在继承规则后，再修改属性将覆盖继承的规则属性。</p><h3 id="vsCode-中使用"><a href="#vsCode-中使用" class="headerlink" title="vsCode 中使用"></a>vsCode 中使用</h3><p>下载安装ESLint插件，可以在命令面板中输入命令操作：</p><ul><li>Create ‘.eslintrc.json’ file：创建一个新.eslintrc.json文件。</li><li>Fix all auto-fixable problems：将ESLint自动修复解决方案应用于所有可修复的问题。</li><li>Disable ESLint for this Workspace：禁用此工作空间的ESLint扩展。</li><li>Enable ESLint for this Workspace：为此工作空间启用ESLint扩展。</li></ul><p>在项目中启动后，会实时检测代码，不需要再执行ESLint指令检测。</p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> node_module </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>prototype与__proto__区别</title>
      <link href="/2018/08/24/prototype-yu-proto-qu-bie/"/>
      <url>/2018/08/24/prototype-yu-proto-qu-bie/</url>
      
        <content type="html"><![CDATA[<h3 id="prototype（原型属性）"><a href="#prototype（原型属性）" class="headerlink" title="prototype（原型属性）"></a>prototype（原型属性）</h3><p>只有函数才具有 prototype 属性。prototype 是一个对象，默认有一个属性 constructor 指向原型对象的构造函数。</p><h3 id="proto"><a href="#proto" class="headerlink" title="__ proto __"></a>__ proto __</h3><p>所有对象都具有的 __ proto __ 属性，可称为隐式原型对象。一个对象的隐式原型对象指向原型对象的 prototype 属性，这也保证了实例化对象能共享原型对象中 prototype 属性的方法和属性。</p><a id="more"></a><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>apple <span class="token operator">=</span> <span class="token string">'d'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Demo<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>Demo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>writeTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>demo<span class="token punctuation">.</span>apple <span class="token operator">=</span> <span class="token string">'c'</span><span class="token comment" spellcheck="true">//判断对象自身是否具有该属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'writeTest'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span><span class="token comment" spellcheck="true">//判断对象和原型对象是否具有该属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'apple'</span> <span class="token keyword">in</span> demo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//判断原型对象是否具有该属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hasPrototypeProperty</span><span class="token punctuation">(</span>demo<span class="token punctuation">,</span><span class="token string">'writeTest'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span>apple<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// c</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> Demo<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Demo<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">//是否为原型对象属性</span><span class="token keyword">function</span> <span class="token function">hasPrototypeProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> name <span class="token keyword">in</span> obj <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Demo 是原型对象，demo 是Demo实例化的对象。在实例化的过程中，值传递如下：</p><ol><li>demo 对象传入 Demo 的构造函数中,构造函数中的赋值将添加到 demo 属性上。</li><li>demo 的 __ proto __ 等于 Demo.prototype </li></ol><p>由于 __ proto __ 对象为引用类型，所以修改 Demo.prototype 上的属性或者方法，将影响所有实例化对象。</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果要取 demo 上的属性，解析器的查找顺序如下：</p><ol><li>检查 demo 对象是否具有该属性</li><li>检查 demo 的 __ proto __ 是否具有该属性</li></ol><p>如果实例化对象和原型对象的 prototype 具有相同属性或者方法，则只会取到实例化对象的值。</p><h4 id="检查方法"><a href="#检查方法" class="headerlink" title="检查方法"></a>检查方法</h4><p>hasOwnProperty() 判断指定属性是否为自有属性；in操作符对原型属性和自有属性都返回true。 结合两者可以判断属性实在实例化对象上，还是在原型对象上。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EOS-多索引表使用指南</title>
      <link href="/2018/08/20/eos-duo-suo-yin-biao-shi-yong-zhi-nan/"/>
      <url>/2018/08/20/eos-duo-suo-yin-biao-shi-yong-zhi-nan/</url>
      
        <content type="html"><![CDATA[<p>参考网址：<a href="https://developers.eos.io/eosio-cpp/docs/multi-index-table-tutorial" target="_blank" rel="noopener">https://developers.eos.io/eosio-cpp/docs/multi-index-table-tutorial</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>EOSIO Multi-Index API为EOSIO数据库提供C ++接口。</li><li>源码文件路径：eos/contracts/eosiolib/multi_index.hpp</li><li>其内部使用的是 C 的 Ddatabase_api 来操作数据库，文件路径：eos/contracts/eosiolib/wasm_interface.cpp</li><li>表对象的创建和修改都需要花费RAM，删除则会返回RAM到账户中。</li></ul><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><h4 id="合约帐号名称"><a href="#合约帐号名称" class="headerlink" title="合约帐号名称"></a>合约帐号名称</h4><ul><li>只能包含字符.abcdefghijklmnopqrstuvwxyz12345。a-z（小写）1-5和.（期间）</li><li>必须是12个字符</li></ul><h4 id="表名"><a href="#表名" class="headerlink" title="表名"></a>表名</h4><ul><li>最多只能包含12个字母字符</li></ul><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><ul><li>最多只能包含12个字母字符</li></ul><h4 id="代币符号"><a href="#代币符号" class="headerlink" title="代币符号"></a>代币符号</h4><ul><li>必须是A和Z之间的大写字母字符</li><li>必须是7个字符或更少</li></ul><hr><a id="more"></a><h3 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h3><h4 id="定义存储结构"><a href="#定义存储结构" class="headerlink" title="定义存储结构"></a>定义存储结构</h4><p>创建一个 EOSIO Multi-Index 表必需要一个uint64_t 主键。为了使表能够检索主键，存储在表中的对象需要具有名为 primary_key() 的 const 成员函数，该函数返回 uint64_t 。EOSIO Multi-Index表还支持最多16个二级索引.索引支持的格式如下：</p><ul><li>uint64_t</li><li>uint128_t</li><li>uint256_t</li><li>double</li><li>long double</li></ul><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><pre class="line-numbers language-c++"><code class="language-c++">typedef eosio::multi_index<N(TableName), T,...Indices> table_name(code,scope);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul><li>TableName - 表的名称</li><li>T - 表中存储的数据类型</li><li>Indices - 表的二级索引，此处支持最多16个索引</li><li>code - 拥有表的帐户</li><li>scope - 数据所属的账户</li><li>table_name  - 存在在内存中的表名称</li></ul><p>scope 负责新对象的存储使用，如果必须创建表（和二级索引表），则 scope 支付表创建的 RAM 开销。</p><h4 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h4><h5 id="按二级索引排序"><a href="#按二级索引排序" class="headerlink" title="按二级索引排序"></a>按二级索引排序</h5><pre class="line-numbers language-c++"><code class="language-c++">auto expidx = orders.get_index<N(byexp)>();print("Items sorted by expiration:\n");for( const auto& item : expidx ) {  print(" ID=", item.id, ", expiration=", item.expiration, ", owner=", name{item.owner}, "\n");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="添加多索引表-emplace"><a href="#添加多索引表-emplace" class="headerlink" title="添加多索引表(emplace)"></a>添加多索引表(emplace)</h5><p>添加一个新的对象到表中</p><pre class="line-numbers language-c++"><code class="language-c++">orders.emplace( payer, [&]( auto& o ) {  o.id = 1;  o.expiration = 300;  o.owner = N(dan);});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h6><ul><li>payer - 付款账号消耗RAM</li><li>constructor - 用于对要在表中创建的对象进行就地初始化</li></ul><h6 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h6><p>新创建的对象的主键迭代器</p><h6 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h6><ul><li>在Multi-Index表中创建一个新对象，该对象具有唯一的主键（在对象中指定）。该对象被序列化并写入表中。如果该表不存在，则创建该表。</li><li>付款人负责新对象的存储使用，如果必须创建表（和二级索引表），则为表创建的开销。</li><li>更新辅助索引以引用新添加的对象。如果辅助索引表不存在，则创建它们。</li></ul><h5 id="更新多索引表-modify"><a href="#更新多索引表-modify" class="headerlink" title="更新多索引表(modify)"></a>更新多索引表(modify)</h5><p>在表中修改一个已经存在的对象</p><pre class="line-numbers language-c++"><code class="language-c++">print("Modifying expiration of order with ID=2 to 400.\n");orders.modify( order2, payer, [&]( auto& o ) {  o.expiration = 400;});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h6><ul><li>order2 - 指向要更新的对象的迭代器</li><li>payer - 更新行的存储使用情况的付款人的帐户名称</li><li>updater - 更新目标对象的 lambda 函数</li></ul><h6 id="重点-1"><a href="#重点-1" class="headerlink" title="重点"></a>重点</h6><ul><li>已修改的对象已序列化，然后替换表中的现有对象。</li><li>付款人需要为更新对象的存储使用付费。</li><li>如果付款人与现有付款人相同，则付款人仅支付现有和更新对象之间的使用差异（如果此差异为负，则退款）。</li><li>如果付款人与现有付款人不同，则现有付款人将退还现有对象的存储使用情况。</li></ul><h5 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h5><p>无返回值</p><h4 id="erase-删"><a href="#erase-删" class="headerlink" title="erase(删)"></a>erase(删)</h4><p>使用主键删除一个表中已经存在的对象</p><pre class="line-numbers language-c++"><code class="language-c++">addresses.erase(itr);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h5><ul><li>itr - 指向要删除的对象的迭代器</li></ul><h5 id="重点-2"><a href="#重点-2" class="headerlink" title="重点"></a>重点</h5><ul><li>该对象将从表中删除，并回收所有关联的存储。</li><li>对于对象的存储使用的现有支付者，删除的对象的表和二级索引使用，以及如果移除表和索引，相关的开销将退还。</li><li>在删除所有行后，表将自动删除。</li></ul><h5 id="返回-1"><a href="#返回-1" class="headerlink" title="返回"></a>返回</h5><p>返回指向删除对象后面的对象的指针。</p><h5 id="find-查"><a href="#find-查" class="headerlink" title="find(查)"></a>find(查)</h5><p>在表中根据主键查找已经存在的对象</p><pre class="line-numbers language-c++"><code class="language-c++">auto itr = addresses.find(N(dan));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h6><ul><li>primary -对象的主键值</li></ul><h6 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h6><p>返回一个查询到的对象的迭代器；</p><p>如果没有查询到指定对象，返回一个end迭代器。</p><h3 id="以上所有方法的例子"><a href="#以上所有方法的例子" class="headerlink" title="以上所有方法的例子"></a>以上所有方法的例子</h3><pre><code>##### 例子```c++#include &lt;eosiolib/eosio.hpp&gt;#include &lt;eosiolib/dispatcher.hpp&gt;#include &lt;eosiolib/multi_index.hpp&gt;using namespace eosio;namespace limit_order_table {    //定义结构体    struct limit_order {        uint64_t     id;        uint128_t    price;        uint64_t     expiration;        account_name owner;        auto primary_key() const { return id; }        uint64_t get_expiration() const { return expiration; }        uint128_t get_price() const { return price; }        EOSLIB_SERIALIZE( limit_order, ( id )( price )( expiration )( owner ) )    };    class limit_order_table {        public:        ACTION( N( limitorders ), issue_limit_order ) {            EOSLIB_SERIALIZE( issue_limit_order )        };        //定义合同方法        static void on( const issue_limit_order&amp; ilm ) {            //获得表的归属者            auto payer = ilm.get_account();            print(&quot;Creating multi index table &#39;orders&#39;.\n&quot;);            //实例化表            eosio::multi_index&lt; N( orders ), limit_order,                 indexed_by&lt; N( byexp ),   const_mem_fun&lt; limit_order, uint64_t, &amp;limit_order::get_expiration&gt; &gt;,                indexed_by&lt; N( byprice ), const_mem_fun&lt; limit_order, uint128_t, &amp;limit_order::get_price&gt; &gt;                &gt; orders( N( limitorders ), N( limitorders ) );            //添加多索引表            orders.emplace( payer, [&amp;]( auto&amp; o ) {                o.id = 1;                o.expiration = 300;                o.owner = N(dan);            });            auto order2 = orders.emplace( payer, [&amp;]( auto&amp; o ) {                o.id = 2;                o.expiration = 200;                o.owner = N(thomas);            });            //主键排序            print(&quot;Items sorted by primary key:\n&quot;);            for( const auto&amp; item : orders ) {                print(&quot; ID=&quot;, item.id, &quot;, expiration=&quot;, item.expiration, &quot;, owner=&quot;, name{item.owner}, &quot;\n&quot;);            }            auto expidx = orders.get_index&lt;N(byexp)&gt;();            //索引排序            print(&quot;Items sorted by expiration:\n&quot;);            for( const auto&amp; item : expidx ) {                print(&quot; ID=&quot;, item.id, &quot;, expiration=&quot;, item.expiration, &quot;, owner=&quot;, name{item.owner}, &quot;\n&quot;);            }            auto pridx = orders.get_index&lt;N(byprice)&gt;();            print(&quot;Items sorted by price:\n&quot;);            for( const auto&amp; item : pridx ) {                print(&quot; ID=&quot;, item.id, &quot;, expiration=&quot;, item.expiration, &quot;, owner=&quot;, name{item.owner}, &quot;\n&quot;);            }            print(&quot;Modifying expiration of order with ID=2 to 400.\n&quot;);            //修改            orders.modify( order2, payer, [&amp;]( auto&amp; o ) {                o.expiration = 400;            });            //获得主键大于100的实例            auto lower = expidx.lower_bound(100);            print(&quot;First order with an expiration of at least 100 has ID=&quot;, lower-&gt;id, &quot; and expiration=&quot;, lower-&gt;get_expiration(), &quot;\n&quot;);   };} /// limit_order_tablenamespace limit_order_table {   extern &quot;C&quot; {      /// 执行合同下任何方法都需要先经过此方法      void apply( uint64_t code, uint64_t action ) {         require_auth( code );         eosio_assert( eosio::dispatch&lt; limit_order_table, limit_order_table::issue_limit_order &gt;( code, action ), &quot;Could not dispatch&quot; );      }   }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> eos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> eos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pm2日志管理pm2-logrotat</title>
      <link href="/2018/08/17/pm2-ri-zhi-guan-li-pm2-logrotat/"/>
      <url>/2018/08/17/pm2-ri-zhi-guan-li-pm2-logrotat/</url>
      
        <content type="html"><![CDATA[<p>参考网址：<a href="https://github.com/keymetrics/pm2-logrotate" target="_blank" rel="noopener">https://github.com/keymetrics/pm2-logrotate</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>就是开个线程对pm2的日志进行监控和操作。</p><p>以下测试版本为:</p><ul><li>pm2:3.0.3</li><li>pm2-logrotate:2.6.0</li></ul><p>请确保版本对应，否则不保证操作顺利，欢迎留言解决。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>pm2 install pm2-logrotate//安装指定版本pm2 install pm2-logrotate@2.6.0</code></pre><a id="more"></a><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><pre><code>//带参数pm2 set pm2-logrotate:&lt;param&gt; &lt;value&gt;pm2 set pm2-logrotate:compress true</code></pre><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul><li>max_size（默认为10M）：日志文件大小，超过指定大小将重头写入</li><li>retain（默认为30个文件日志）：日志文件数量</li><li>compress（默认为false）：是否进行压缩</li><li>dateFormat（默认为YYYY-MM-DD_HH-mm-ss）：文件格式</li><li>rotateModule（默认为true）：重复写日志</li><li>workerInterval（默认为30秒）检查时间间隔</li><li>TZ（默认为系统时间）：记录的时间</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>每次只能设置一个选项</li><li>可以通过pm2 set 修改配置文件达到一次修改多个属性</li><li>一次设定将对所有pm2监听的服务起效</li></ul><p>pm2 配置文件路径 ~/.pm2/module_conf.json</p><pre><code>{    &quot;module-db-v2&quot;: {        &quot;pm2-logrotate&quot;: {}    },    &quot;pm2-logrotate&quot;: {        &quot;workerInterval&quot;: &quot;3600&quot;,        &quot;max_size&quot;: &quot;100M&quot;,        &quot;retain&quot;: &quot;5&quot;    }}</code></pre><hr><h1 id="以下未验证"><a href="#以下未验证" class="headerlink" title="以下未验证"></a>以下未验证</h1><h2 id="对系统进行统一设置"><a href="#对系统进行统一设置" class="headerlink" title="对系统进行统一设置"></a>对系统进行统一设置</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> pm2 logrotate -u user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>文件路径：/etc/logrotate.d/pm2-user</p><p>添加如下配置, /home/user/.pm2/pm2.log 为监控的日志路径</p><pre class="line-numbers language-bash"><code class="language-bash">/home/user/.pm2/pm2.log /home/user/.pm2/logs/*.log <span class="token punctuation">{</span>        rotate 10        daily        missingok        notifempty        compress        delaycompress        copytruncate        create 0640 admin admin        size 1024M<span class="token punctuation">}</span>//修改完配置文件后，需要重启对应pm2服务//实现的功能有保留10个文件每日保存一份空文件不转存压缩旧日志转存的日志到下一次转存再压缩文件超过1024M就备份一份<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考网址：<a href="http://www.ttlsa.com/linux/logrotate-log-management-tools/" target="_blank" rel="noopener">http://www.ttlsa.com/linux/logrotate-log-management-tools/</a></p><p>参数：</p><ul><li>compress：通过gzip 压缩转储旧的日志</li><li>nocompress：不需要压缩时，用这个参数</li><li>copytruncate：用于还在打开中的日志文件，把当前日志备份并截断</li><li>nocopytruncate：备份日志文件但是不截断</li><li>create mode owner group：使用指定的文件模式创建新的日志文件</li><li>nocreate：不建立新的日志文件</li><li>delaycompress：和 compress 一起使用时，转储的日志文件到下一次转储时才压缩</li><li>nodelaycompress：覆盖 delaycompress 选项，转储同时压缩。</li><li>errors address：专储时的错误信息发送到指定的Email 地址</li><li>ifempty：即使是空文件也转储，这个是 logrotate 的缺省选项。</li><li>notifempty：如果是空文件的话，不转储</li><li>mail address：把转储的日志文件发送到指定的E-mail 地址</li><li>nomail：转储时不发送日志文件</li><li>olddir directory：转储后的日志文件放入指定的目录，必须和当前日志文件在同一个文件系统</li><li>noolddir：转储后的日志文件和当前日志文件放在同一个目录下</li><li>prerotate/endscript：在转储以前需要执行的命令可以放入这个对，这两个关键字必须单独成行</li><li>postrotate/endscript：在转储以后需要执行的命令可以放入这个对，这两个关键字必须单独成行</li><li>sharedscripts：所有的日志文件都轮转完毕后统一执行一次脚本</li><li>daily：指定转储周期为每天</li><li>weekly：指定转储周期为每周</li><li>monthly：指定转储周期为每月</li><li>rotate count：指定日志文件删除之前转储的次数，0 指没有备份，5 指保留5 个备份</li><li>size size：当日志文件到达指定的大小时才转储，Size 可以指定 bytes (缺省)以及KB (sizek)或者MB</li></ul>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> node_module </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker部署mysql 5.7版本</title>
      <link href="/2018/08/15/docker-bu-shu-mysql-zui-xin-ban-ben/"/>
      <url>/2018/08/15/docker-bu-shu-mysql-zui-xin-ban-ben/</url>
      
        <content type="html"><![CDATA[<h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><p>目录结构</p><pre class="line-numbers language-shell"><code class="language-shell">── mysql    ├── conf    │   └── my.cnf    └── init        └── init.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><h5 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h5><pre class="line-numbers language-shell"><code class="language-shell">vim ./mysql/conf/my.cnf[mysqld]pid-file    = /var/run/mysqld/mysqld.pidsocket      = /var/run/mysqld/mysqld.sockdatadir     = /var/lib/mysql#log-error  = /var/log/mysql/error.log# By default we only accept connections from localhostbind-address   = 0.0.0.0# Disabling symbolic-links is recommended to prevent assorted security risks#symbolic-links=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化 init.sql ，在容器创建完成后将执行</p><pre class="line-numbers language-sql"><code class="language-sql">vim <span class="token punctuation">.</span><span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token operator">/</span>init<span class="token punctuation">.</span>sql<span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'test'</span>@'<span class="token operator">%</span><span class="token string">' IDENTIFIED WITH mysql_native_password BY '</span><span class="token number">123456</span><span class="token string">';GRANT ALL PRIVILEGES ON *.* TO '</span>test<span class="token string">'@'</span><span class="token operator">%</span>'<span class="token punctuation">;</span>FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加远程账号</li><li>创建基础数据库</li></ul><p>docker-compose.yml</p><pre class="line-numbers language-yml"><code class="language-yml">version: '3'services:  mysql:    container_name: mysql    environment:      MYSQL_ROOT_PASSWORD: 123456    image: mysql:5.7    ports:      - '3306:3306'    volumes:      - './mysql/conf/my.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf'      - './mysql/logs:/logs'      - './mysql/data:/var/lib/mysql'      - './mysql/init:/docker-entrypoint-initdb.d/'    restart: always<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stellar资料</title>
      <link href="/2018/08/14/stellar-zi-liao/"/>
      <url>/2018/08/14/stellar-zi-liao/</url>
      
        <content type="html"><![CDATA[<p>stellar测试链浏览器：<a href="http://testnet.stellarchain.io/" target="_blank" rel="noopener">http://testnet.stellarchain.io/</a></p><p>stellar正式链浏览器：<a href="https://stellarchain.io/" target="_blank" rel="noopener">https://stellarchain.io/</a></p><p>stellar-core(节点)源码地址：<a href="https://github.com/stellar/stellar-core/blob/master/INSTALL.md" target="_blank" rel="noopener">https://github.com/stellar/stellar-core/blob/master/INSTALL.md</a></p><a id="more"></a><p>stellar-core源码编译文档：<a href="https://github.com/stellar/stellar-core" target="_blank" rel="noopener">https://github.com/stellar/stellar-core</a></p><p>stellar-core Docker部署文档：<a href="https://github.com/stellar/docker-stellar-core-horizon" target="_blank" rel="noopener">https://github.com/stellar/docker-stellar-core-horizon</a></p><p>stellar软件安装文档：<a href="https://www.stellar.org/developers/stellar-core/software/admin.html#interaction-with-other-internal-systems" target="_blank" rel="noopener">https://www.stellar.org/developers/stellar-core/software/admin.html#interaction-with-other-internal-systems</a></p><p>stellar API：<a href="https://www.stellar.org/developers/reference/" target="_blank" rel="noopener">https://www.stellar.org/developers/reference/</a></p><p>stellar 开发中心：<a href="https://www.stellar.org/developers/" target="_blank" rel="noopener">https://www.stellar.org/developers/</a></p><p>stellar 问答网址：<a href="https://stellar.stackexchange.com/" target="_blank" rel="noopener">https://stellar.stackexchange.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> stellar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> eos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EOS的Unlinkable_block问题解决</title>
      <link href="/2018/08/09/eos-de-unlinkable-block-wen-ti-jie-jue/"/>
      <url>/2018/08/09/eos-de-unlinkable-block-wen-ti-jie-jue/</url>
      
        <content type="html"><![CDATA[<p>eos版本：v1.1.1<br>操作系统：centos 7 </p><p>参考地址：</p><ul><li><a href="https://github.com/EOSIO/eos/issues/4986" target="_blank" rel="noopener">https://github.com/EOSIO/eos/issues/4986</a></li><li><a href="https://github.com/EOSIO/eos/pull/5001" target="_blank" rel="noopener">https://github.com/EOSIO/eos/pull/5001</a></li></ul><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>区块同步停止，查看nodeos输出如下</p><pre><code>2018-08-05T04:07:34.613 thread-0   producer_plugin.cpp:310       on_incoming_block    ] 3030001 unlinkable_block_exception: Unlinkable blockunlinkable block    {&quot;id&quot;:&quot;0088f55a6f0609ced742278dbc1a0c9bd2660d211187384c63d19ea10d3b65b1&quot;,&quot;previous&quot;:&quot;0088f5596c6ce2d0797beb3306969c9276f5b86fd7c785af778d120201d6ae5b&quot;}    thread-0  fork_database.cpp:151 addrethrow    {}    thread-0  controller.cpp:924 push_block2018-08-05T04:07:34.614 thread-0   controller.cpp:924            push_block           ] 3030001 unlinkable_block_exception: Unlinkable blockunlinkable block    {&quot;id&quot;:&quot;0088f55b290b9bf807736545a1818989243505db569b5546a7890c27f761aab6&quot;,&quot;previous&quot;:&quot;0088f55a6f0609ced742278dbc1a0c9bd2660d211187384c63d19ea10d3b65b1&quot;}    thread-0  fork_database.cpp:151 add2018-08-05T04:07:34.614 thread-0   producer_plugin.cpp:310       on_incoming_block    ] 3030001 unlinkable_block_exception: Unlinkable blockunlinkable block    {&quot;id&quot;:&quot;0088f55b290b9bf807736545a1818989243505db569b5546a7890c27f761aab6&quot;,&quot;previous&quot;:&quot;0088f55a6f0609ced742278dbc1a0c9bd2660d211187384c63d19ea10d3b65b1&quot;}    thread-0  fork_database.cpp:151 addrethrow    {}    thread-0  controller.cpp:924 push_block2018-08-05T04:07:34.614 thread-0   controller.cpp:924            push_block           ] 3030001 unlinkable_block_exception: Unlinkable block</code></pre><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>将eosio升级到1.1.2，此版本已解决此问题。</p><p>修改内容：</p><ol><li>transaction_context包含新的布尔字段explicit_billed_cpu_time，如果billed_cpu_time_us显式设置，则为true （在验证块时始终发生）。如果为真，transaction_context将永远不会更改billed_cpu_time_us字段的值explicit_billed_cpu_time。</li><li>在soft_fail的情况下，节点现在将始终尝试在执行原始延迟事务的可计费CPU时间之上正确计算错误处理程序执行的可计费CPU时间，该时间已失败并导致错误处理程序运行首先。</li><li>在hard_fail的情况下，节点将始终尝试计算适当的金额（到目前为止可用的可计费CPU时间），但正确地受到协议规则允许其充电的最大值的限制。这可以防止控制器add_transaction_usage以不适当的高额调用，这会导致它抛出一个传播的异常，直到它导致块的生成失败。</li></ol>]]></content>
      
      
      <categories>
          
          <category> eos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> eos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EOS权限系统</title>
      <link href="/2018/08/09/eos-quan-xian-xi-tong/"/>
      <url>/2018/08/09/eos-quan-xian-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>参考资料：<a href="https://hiblock.net/topics/222" target="_blank" rel="noopener">https://hiblock.net/topics/222</a></p><h3 id="权限作用"><a href="#权限作用" class="headerlink" title="权限作用"></a>权限作用</h3><ol><li>向EOS区块链发起一些事务，比如说转账，需要得到 <strong>账户</strong> 的授权。</li><li>账号交易可以通过权限转移做到。</li><li>新权限和action的绑定关系，可增加了eos网络权限的灵活性，通过单个权限的绑定，可将一个账户的权限分层管理，甚至一个公司的所有人都可以使用一个EOS账户来进行权限分离。</li></ol><p><strong>账户</strong> 的授权是如何授权的？账户的权限里 有一个阈值属性，当你的解锁状态的钱包中的有一把私钥能对应到那个权限所绑定的公钥上，而且权重刚好大于等于阈值时，那么就能成功签名，向区块链发送事务。</p><a id="more"></a><h3 id="权限配置"><a href="#权限配置" class="headerlink" title="权限配置"></a>权限配置</h3><p>首先当一个账户创建的时候，具备了两种基本权限。每个权限绑定到一个公钥上（单签名账户）或多个公钥上（多签名账户），除了绑定公钥也可以绑定到另一个有效的账户上：</p><ul><li><strong>owner</strong> ： 账号主权限, 声明的这个账号的归属。只有极少数事务需要使用到 owner权限。 建议把拥有这个权限的私钥进行<strong>冷存储</strong>。不要分享给任何人。 owner 可以用来恢复其他权限。</li><li><strong>active</strong>： 活动权限，顾名思议，这个权限 ，一般用来做一些转账、投票、发起事务等常规操作。</li></ul><p>除了以上两种默认权限，还可以对账户自定义新的权限（计划在未来的账户管理软件中加入支持）。 这种权限的可扩展性，非常灵活，给软件开发者提供了很多可能的使用场景。</p><h3 id="权限的权重（weight）与阈值（threshold）"><a href="#权限的权重（weight）与阈值（threshold）" class="headerlink" title="权限的权重（weight）与阈值（threshold）"></a>权限的权重（weight）与阈值（threshold）</h3><h4 id="单签名账户-（默认权限配置的账户）"><a href="#单签名账户-（默认权限配置的账户）" class="headerlink" title="单签名账户 （默认权限配置的账户）"></a>单签名账户 （默认权限配置的账户）</h4><p>owner 和 active 权限分别有一个值为1的阈值。</p><p>owner 和 active 所绑定的公钥,则分别有一个值为1的权重。</p><h4 id="怎么理解阈值和权重"><a href="#怎么理解阈值和权重" class="headerlink" title="怎么理解阈值和权重"></a>怎么理解阈值和权重</h4><p>举个例子来讲吧，把 <strong>owner</strong> 这个权限比作一扇门，打开这扇门需要一把正确的钥匙。 而 <strong>owner</strong> 所绑定的那个公钥 对应的那把 <strong>私钥</strong> 就是正确的钥匙。</p><p>因此 <strong>单签名账户</strong> 就是 <strong>权限的阈值</strong> 和 <strong>钥匙的权重</strong>  都为1的一种账户类型。使用某个权限，只需要一把对应的私钥就行了</p><h4 id="多重签名账户"><a href="#多重签名账户" class="headerlink" title="多重签名账户"></a>多重签名账户</h4><p>顾名思义，就是一个权限绑定了多个账户或公钥，权重之和大于等于owner权限的阈值，才能使用这个权限。</p><p>使用一个权限，可能需要不只一个公钥的签名了，也可能是两个、三个、五个。</p><h2 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作"></a>命令操作</h2><p>EOS版本号：v1.0.6</p><p>环境：私有链</p><p>操作系统：centos 7 </p><p>参考资料：<a href="https://developers.eos.io/eosio-cleos/reference#cleos-set-account" target="_blank" rel="noopener">https://developers.eos.io/eosio-cleos/reference#cleos-set-account</a></p><h4 id="查看账号权限"><a href="#查看账号权限" class="headerlink" title="查看账号权限"></a>查看账号权限</h4><pre><code>cleos get account eosioddztestpermissions:      owner     1:    1 EOS8Lbyk31K78BaMGuP8WHiC1tL8tphrQjRir8pGccxxbg9zVA4f9        active     1:    1 EOS8Lbyk31K78BaMGuP8WHiC1tL8tphrQjRir8pGccxxbg9zVA4f9memory:      quota:       unlimited  used:      2.66 KiB  net bandwidth:      used:               unlimited     available:          unlimited     limit:              unlimitedcpu bandwidth:     used:               unlimited     available:          unlimited     limit:              unlimited</code></pre><h4 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h4><pre><code>//修改权限cleos set account permission $ACCOUNT_NAME $PERMISSION_NAME $PUBKEY_OR_ACCOUNT_NAME active -p sandwichfarm@active</code></pre><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul><li>account TEXT - 为其设置/删除权限授权的帐户</li><li>permission TEXT - 设置/删除权限的权限名称</li><li>authority TEXT - [delete] NULL，[create / update]公钥，JSON字符串或定义权限的文件名</li><li>parent TEXT - [创建]此父母权限的权限名称（默认为：”active”）</li></ul><h5 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h5><ul><li>-h,–help 打印此帮助信息并退出</li><li>-x,–expiration TEXT - 设置交易到期之前的秒数，默认为30秒</li><li>-s,–skip-sign 指定是否应使用解锁的钱包密钥来签署交易</li><li>-d,–dont-broadcast - 不要向网络广播交易（只需打印到标准输出）</li><li>-p,–permission TEXT - 要授权的帐户和权限级别，如’account @ permission’（默认为’account @ active’）</li><li>–max-cpu-usage-ms UINT - 设置CPU使用预算的毫秒数上限，用于执行交易（默认为0，表示无限制）</li><li>–max-net-usage UINT - 为交易设置净使用预算的上限（以字节为单位）（默认为0，表示无限制）</li></ul><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><p>要修改帐户的权限，您必须拥有该帐户的权限和您正在修改的权限。</p><pre><code>//example //修改权限cleos set account permission eosioddztest active EOS69bTRDpiVr9wymPY3uKK9K28N1kh7kxR1wn6ynhbpWAasJKW1K owner -p eosioddztest@active//再次查看eosioddztest权限，发现active已经改变cleos get account eosioddztestpermissions:      owner     1:    1 EOS8Lbyk31K78BaMGuP8WHiC1tL8tphrQjRir8pGccxxbg9zVA4f9        active     1:    1 EOS69bTRDpiVr9wymPY3uKK9K28N1kh7kxR1wn6ynhbpWAasJKW1Kmemory:      quota:       unlimited  used:      2.66 KiB  net bandwidth:      used:               unlimited     available:          unlimited     limit:              unlimitedcpu bandwidth:     used:               unlimited     available:          unlimited     limit:              unlimited</code></pre><h5 id="权重和阈值模式"><a href="#权重和阈值模式" class="headerlink" title="权重和阈值模式"></a>权重和阈值模式</h5><pre><code>//修改权限 cleos set account permission eosioddztest active &#39;{&quot;threshold&quot; : 1, &quot;keys&quot; : [], &quot;accounts&quot; : [{&quot;permission&quot;:{&quot;actor&quot;:&quot;trustwallets&quot;,&quot;permission&quot;:&quot;active&quot;},&quot;weight&quot;:1}]}&#39; owner -p eosioddztest@active</code></pre><pre><code>查看权限，发现action已经改变为权重模式，如看详情可以-j，使用json方式cleos get account eosioddztestpermissions:      owner     1:    1 EOS8Lbyk31K78BaMGuP8WHiC1tL8tphrQjRir8pGccxxbg9zVA4f9        active     1:    1 trustwallets@active, memory:      quota:       unlimited  used:     2.643 KiB  net bandwidth:      used:               unlimited     available:          unlimited     limit:              unlimitedcpu bandwidth:     used:               unlimited     available:          unlimited     limit:              unlimited</code></pre><h6 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h6><p>accounts</p><pre><code>{  &quot;threshold&quot;       : 100,    /*签名需要权重值达到多少的一个整数*/  &quot;keys&quot;            : [],     /*包含eos风格的公约和权重*/  &quot;accounts&quot;        : []      /*包含eos账号和权限，权重*/}</code></pre><p>keys</p><pre><code>{  &quot;permission&quot; : {    &quot;actor&quot;       : &quot;sandwich&quot;,    &quot;permission&quot;  : &quot;active&quot;  },  &quot;weight&quot;      : 75}</code></pre><h5 id="添加权限"><a href="#添加权限" class="headerlink" title="添加权限"></a>添加权限</h5><pre><code>cleos set account permission eosioddztest test &#39;{&quot;threshold&quot;:1,&quot;keys&quot;:[{&quot;key&quot;:&quot;EOS8Lbyk31K78BaMGuP8WHiC1tL8tphrQjRir8pGccxxbg9zVA4f9&quot;,&quot;weight&quot;:1}],&quot;accounts&quot;:[]}&#39; active</code></pre><pre><code>查看权限多了一个testcleos get account eosioddztestpermissions:      owner     1:    1 EOS8Lbyk31K78BaMGuP8WHiC1tL8tphrQjRir8pGccxxbg9zVA4f9        active     1:    1 EOS8Lbyk31K78BaMGuP8WHiC1tL8tphrQjRir8pGccxxbg9zVA4f9           test     1:    1 EOS8Lbyk31K78BaMGuP8WHiC1tL8tphrQjRir8pGccxxbg9zVA4f9memory:      quota:       unlimited  used:      2.99 KiB  net bandwidth:      used:               unlimited     available:          unlimited     limit:              unlimitedcpu bandwidth:     used:               unlimited     available:          unlimited     limit:              unlimited</code></pre><h5 id="删除权限"><a href="#删除权限" class="headerlink" title="删除权限"></a>删除权限</h5><pre><code>//删除权限cleos set account permission eosioddztest test &#39;NULL&#39; active</code></pre><pre><code>cleos get account eosioddztestpermissions:      owner     1:    1 EOS8Lbyk31K78BaMGuP8WHiC1tL8tphrQjRir8pGccxxbg9zVA4f9        active     1:    1 EOS8Lbyk31K78BaMGuP8WHiC1tL8tphrQjRir8pGccxxbg9zVA4f9memory:      quota:       unlimited  used:      2.99 KiB  net bandwidth:      used:               unlimited     available:          unlimited     limit:              unlimitedcpu bandwidth:     used:               unlimited     available:          unlimited     limit:              unlimited</code></pre><h5 id="权限绑定action"><a href="#权限绑定action" class="headerlink" title="权限绑定action"></a>权限绑定action</h5><pre><code>//将之前创建的test权限绑定交易事件cleos set action permission eosioddztest eosio.token transfer test//使用test权限进行交易cleos push action eosio.token transfer &#39;[&quot;eosioddztest&quot;,&quot;trustwallets&quot;,&quot;100.0000 EOS&quot;,&quot;transfer&quot;]&#39; -p eosioddztest@hello</code></pre>]]></content>
      
      
      <categories>
          
          <category> eos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> eos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建EOS智能合约</title>
      <link href="/2018/08/09/chuang-jian-eos-zhi-neng-he-yue/"/>
      <url>/2018/08/09/chuang-jian-eos-zhi-neng-he-yue/</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>首先请先了解智能合约相关概念，智能合约介绍。</p><p>在开始之前以下信息。</p><ol><li>eos-version:v.1.5</li><li>os:centos 7</li><li>必须在build文件夹中执行sudo make isntall，否在在执行编译wast文件时，将找不到相关模块。</li><li>参考文档：<a href="https://developers.eos.io/eosio-cpp/docs/hello-world" target="_blank" rel="noopener">https://developers.eos.io/eosio-cpp/docs/hello-world</a></li></ol><h2 id="创建智能合约"><a href="#创建智能合约" class="headerlink" title="创建智能合约"></a>创建智能合约</h2><h3 id="初始化合约结构"><a href="#初始化合约结构" class="headerlink" title="初始化合约结构"></a>初始化合约结构</h3><p>这里采用最简单的方式，用eosiocpp命令创建合约基础架构。</p><pre><code>eosiocpp -n hello</code></pre><p>此时在eos/build/tools/文件夹下将产生一个hello文件夹，文件夹内包含hello.cpp  hello.hpp两个最基础的智能合约文件。</p><a id="more"></a><h4 id="查看hello-cpp"><a href="#查看hello-cpp" class="headerlink" title="查看hello.cpp"></a>查看hello.cpp</h4><pre><code>#include &lt;eosiolib/eosio.hpp&gt;#include &lt;eosiolib/print.hpp&gt;using namespace eosio;class hello : public eosio::contract {  public:      using contract::contract;      /// @abi action       void hi( account_name user ) {         print( &quot;Hello, &quot;, name{user} );      }};EOSIO_ABI( hello, (hi) )</code></pre><p>可以看出合约中定义了一个hi的方法，并且包含了一个user参数。方法在执行之后将输出Hello ${user}。</p><h3 id="编译wast文件"><a href="#编译wast文件" class="headerlink" title="编译wast文件"></a>编译wast文件</h3><pre><code>eosiocpp -o hello.wast hello.cpp</code></pre><p>任何要部署到EOSIO区块链的程序都必须编译成wast格式。这是区块链接受的唯一格式。</p><h3 id="编译abi文件"><a href="#编译abi文件" class="headerlink" title="编译abi文件"></a>编译abi文件</h3><pre><code>eosiocpp -o hello.abi hello.hpp</code></pre><p>abi文件定义接口数据结构，使开发人员和用户将能够通过JSON无缝地与智能合约进行交互。</p><h3 id="部署合约"><a href="#部署合约" class="headerlink" title="部署合约"></a>部署合约</h3><h4 id="创建部署的合约账户"><a href="#创建部署的合约账户" class="headerlink" title="创建部署的合约账户"></a>创建部署的合约账户</h4><pre><code>cleos create account eosio hello.code EOS69bTRDpiVr9wymPY3uKK9K28N1kh7kxR1wn6ynhbpWAasJKW1K EOS69bTRDpiVr9wymPY3uKK9K28N1kh7kxR1wn6ynhbpWAasJKW1K</code></pre><h4 id="部署智能合约"><a href="#部署智能合约" class="headerlink" title="部署智能合约"></a>部署智能合约</h4><pre><code>cleos set contract hello.code ../hello -p trustwallets</code></pre><h3 id="调试合约"><a href="#调试合约" class="headerlink" title="调试合约"></a>调试合约</h3><pre><code>cleos push action hello.code hi &#39;[&quot;user&quot;]&#39; -p  trustwallets</code></pre><p>将在nodeos中输出Hello user。<br>由于合约中并未添加身份验证，此时合同允许任何人授权。</p><pre><code>cleos push action hello.code hi &#39;[&quot;user&quot;]&#39; -p  eosio</code></pre><p>可在hi函数中添加验证require_auth()方法。</p><pre><code>#include &lt;eosiolib/eosio.hpp&gt;#include &lt;eosiolib/print.hpp&gt;using namespace eosio;class hello : public eosio::contract {  public:      using contract::contract;      /// @abi action       void hi( account_name user ) {         require_auth(user)         print( &quot;Hello, &quot;, name{user} );      }};EOSIO_ABI( hello, (hi) )</code></pre><p>重复新编译wast文件并生成abi，然后再次部署更新合同。此时只有trustwallets授权才能进行访问此方法。</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>EOS 合约是由一个EOS账户来部署合约，之后该EOS账户名就是合约的标识，并且EOS账户名和合约是一一对应的。如果EOS账户重新部署了一个新的合约，则会导致旧合约失效，并且从主网消失。<br>此方法可以用来删除旧智能合约，部署新合约。</p>]]></content>
      
      
      <categories>
          
          <category> eos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> eos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EOS智能合约介绍</title>
      <link href="/2018/08/09/eos-zhi-neng-he-yue-jie-shao/"/>
      <url>/2018/08/09/eos-zhi-neng-he-yue-jie-shao/</url>
      
        <content type="html"><![CDATA[<ul><li>文章参考：<a href="https://developers.eos.io/eosio-cpp/docs/introduction" target="_blank" rel="noopener">https://developers.eos.io/eosio-cpp/docs/introduction</a></li><li>eosiocpp文件地址：/eos/build/tools/eosiocpp</li></ul><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>EOSIO智能合约是在区块链上注册并在EOSIO节点上执行的软件，它实现了“合同”的语义，其合约行动请求的分类账存储在区块链中。智能合约定义了接口（操作，参数，数据结构）和实现接口的代码。代码被编译成规范的字节码格式，节点可以检索和执行。区块链存储合同的交易。每份智能合约都必须附有一份Ricardian Contract，该合同定义了合同中具有法律约束力的条款和条件。</p><a id="more"></a><h1 id="通信模式"><a href="#通信模式" class="headerlink" title="通信模式"></a>通信模式</h1><p>EOSIO智能合约由一组action和type定义组成。action定义指定并实现合同的行为,type定义指定所需的内容和结构。EOSIO操作主要在基于消息的通信体系结构中运行。客户端通过发送（推送）消息来调用操作nodeos。这可以使用cleos命令完成。它也可以使用EOSIO send方法之一（例如eosio::action::send）完成。nodeos将操作请求分派给实现合同的WASM代码。该代码完整运行，然后继续处理下一个操作。</p><p>EOSIO智能合约可以彼此通信，例如让另一个合同执行一些与当前事务完成相关的操作，或者在当前事务范围之外触发未来的事务。彼此之间以Action和共享内存数据库访问的形式进行通信；</p><p>EOSIO支持两种基本的通信模型，内联和延迟。</p><h2 id="Inline（内联）"><a href="#Inline（内联）" class="headerlink" title="Inline（内联）"></a>Inline（内联）</h2><ul><li>内联通信模型立即执行当前的事务；</li><li>内联通信模型无论执行成功或失败都不会收到通知；</li><li>内联通信模型只会在原始事务的权限和操作范围内进行操作。</li></ul><h2 id="Deferred（延期）"><a href="#Deferred（延期）" class="headerlink" title="Deferred（延期）"></a>Deferred（延期）</h2><ul><li>延期通信模型，根据生产者的决定，将事务延期执行；</li><li>延期通信模型可以传达通信结果，允许简单的超时；</li><li>延期通信模型可以延伸到不同的范围。</li></ul><h2 id="Transactions和action"><a href="#Transactions和action" class="headerlink" title="Transactions和action"></a>Transactions和action</h2><ul><li>action表示单个操作，而transactions则由一个或者多个action组成。</li><li>合约和帐号以actions的方式进行通信。</li><li>action可以单独发送，如果打算把多个action作为一个整体执行，则可以以transactions形式发送。</li></ul><h3 id="Action-名称限制"><a href="#Action-名称限制" class="headerlink" title="Action 名称限制"></a>Action 名称限制</h3><ul><li>action类型实际上是base32编码的64位整数。 表示仅限于字符a-z，1-5和’.’ 对于前12个字符。</li><li>如果有第13个字符，则它被限制为前16个字符（’.’和a-p）。</li></ul><h3 id="Transaction-确认"><a href="#Transaction-确认" class="headerlink" title="Transaction 确认"></a>Transaction 确认</h3><p>transaction完成后将返回transactionHash，如果在区块中找到包含此transactionHash的区块，则表示transaction已经被确认。</p><h1 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h1><table><thead><tr><th>后缀</th><th>用途</th></tr></thead><tbody><tr><td>hpp</td><td>类及其成员声明</td></tr><tr><td>cpp</td><td>业务逻辑</td></tr><tr><td>abi</td><td>定义接口数据结构</td></tr><tr><td>wast</td><td>部署智能合约的指定文件</td></tr></tbody></table><h2 id="hpp"><a href="#hpp" class="headerlink" title="hpp"></a>hpp</h2><p>$ {contract} .hpp是头文件，包含.cpp文件引用的变量，常量和函数。</p><h2 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h2><p>${contract}.cpp 实现合约功能的逻辑都写在这里。</p><pre><code>//创建合约基本架构，里面包含cpp和hpp两个文件eosiocpp -n ${contract}</code></pre><h2 id="abi"><a href="#abi" class="headerlink" title="abi"></a>abi</h2><ul><li>应用程序二进制接口（ABI）是一个基于JSON的描述，介绍如何在JSON和二进制表示之间转换用户操作。 ABI还描述了如何将数据库状态转换为JSON或从JSON转换。</li><li>文件格式类似JSON，用来定义智能合约与EOS系统外部交互的数据接口。</li></ul><pre><code>//eosiocpp工具将cpp编译为abieosiocpp -g ${contract}.abi ${contract}.hpp</code></pre><h2 id="wast"><a href="#wast" class="headerlink" title="wast"></a>wast</h2><ul><li>任何要部署到EOSIO区块链的程序都必须编译成WASM格式。这是区块链接受的唯一格式。</li><li>.wast是.wasm的文本格式；</li></ul><pre><code>//eosiocpp工具将cpp编译为WASM(.wast)eosiocpp -o ${contract}.wast ${contract}.cpp</code></pre><h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><p>包含了项目所需要的类库的位置，使用的EOS默认安装的位置。</p>]]></content>
      
      
      <categories>
          
          <category> eos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> eos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eosio.bios合约分析(一)</title>
      <link href="/2018/08/09/eosio-bios-he-yue-fen-xi-yi/"/>
      <url>/2018/08/09/eosio-bios-he-yue-fen-xi-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>从基础的智能合约中分析代码结构，了解调用方式和合约的作用。</p><h2 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h2><ul><li>eos版本：v1.1.1</li><li>操作系统：centos 7</li></ul><p>建议阅读前先了解：<a href="https://blockflow.net/t/topic/663" target="_blank" rel="noopener">https://blockflow.net/t/topic/663</a></p><a id="more"></a><h1 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h1><ul><li><a href="https://developers.eos.io/eosio-cpp/reference" target="_blank" rel="noopener">C/C++ API参考</a></li><li><a href="https://developers.eos.io/eosio-cpp/docs" target="_blank" rel="noopener">智能合约介绍</a></li></ul><p>EOSIO提供了一组服务和接口，使合同开发人员能够<br>跨action保持状态。其中包括：</p><ol><li>提供在数据库中保持状态的服务</li><li>增强查询功能以查找和检索数据库内容 </li><li>针对以上功能提供C ++ API，供合同开发人员使用 /eos/contracts/eosiolib/<em>.hpp,</em>.cpp 文件</li><li>访问核心服务的C API，对库和系统开发人员有用 /eos/contracts/eosiolib/*.h 文件</li></ol><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>bios全称是：Basic Input/Output System（基本输入/输出系统）。</p><h3 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h3><pre><code>cloes set contract eosio ./contracts/eosio.bios/ -p eosio</code></pre><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><pre><code>├── CMakeLists.txt 产生Makefile文件，通过make命令编译和链接所需要程序。├── eosio.bios.abi 数据结构和接口├── eosio.bios.cpp 核心逻辑代码└── eosio.bios.hpp 头文件类及其成员声明</code></pre><h4 id="核心eosio-bios-hpp"><a href="#核心eosio-bios-hpp" class="headerlink" title="核心eosio.bios.hpp"></a>核心eosio.bios.hpp</h4><pre><code>#pragma once#include &lt;eosiolib/eosio.hpp&gt;#include &lt;eosiolib/privileged.hpp&gt;namespace eosio {   class bios : public contract {      public:         bios( action_name self ):contract(self){}         //设置账号权限         void setpriv( account_name account, uint8_t ispriv ) {            require_auth( _self );            set_privileged( account, ispriv );         }         //限制账号资源         void setalimits( account_name account, int64_t ram_bytes, int64_t net_weight, int64_t cpu_weight ) {            require_auth( _self );            set_resource_limits( account, ram_bytes, net_weight, cpu_weight );         }         //设置区块链资源,无任何操作，暂时无效         void setglimits( uint64_t ram, uint64_t net, uint64_t cpu ) {            (void)ram; (void)net; (void)cpu;            require_auth( _self );         }         //设置生产节点         void setprods( std::vector&lt;eosio::producer_key&gt; schedule ) {            (void)schedule; // schedule argument just forces the deserialization of the action data into vector&lt;producer_key&gt; (necessary check)            require_auth( _self );            constexpr size_t max_stack_buffer_size = 512;            size_t size = action_data_size();            char* buffer = (char*)( max_stack_buffer_size &lt; size ? malloc(size) : alloca(size) );            read_action_data( buffer, size );            set_proposed_producers(buffer, size);         }         //检查账户权限         void reqauth( action_name from ) {            require_auth( from );         }      private:   };} /// namespace eosio</code></pre><p>所有方法通过eosio.bios.cpp中的EOSIO_ABI宏进行封装，映射给开发者使用。<br>require_auth(),通过C/C++ API参考查询得知，此方法定义在action.h中，作用为验证提供的身份验证集中是否存在指定的帐户。</p><p>eosio.bios中所有具体的操作，都定义在privileged.h中，在此都为调用。</p><p>privileged.h包含的具体方法的作用和参数定义可以结合 <a href="https://developers.eos.io/eosio-cpp/reference#privileged" target="_blank" rel="noopener">https://developers.eos.io/eosio-cpp/reference#privileged</a> 和源码一起看。 </p>]]></content>
      
      
      <categories>
          
          <category> eos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> eos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EOS资源系统</title>
      <link href="/2018/08/09/eos-zi-yuan-xi-tong/"/>
      <url>/2018/08/09/eos-zi-yuan-xi-tong/</url>
      
        <content type="html"><![CDATA[<h3 id="EOS资源系统"><a href="#EOS资源系统" class="headerlink" title="EOS资源系统"></a>EOS资源系统</h3><ol><li>一类是RAM购买型；另一类是CPU和网络带宽抵押型。</li><li>把EOS理解为区块链操作系统，CPU和NET带宽是跟时间相关。一定时间内你可使用的CPU和NET带宽是有限的，可使用量和你抵押的EOS数量相关。随着时间的流逝，CPU和NET带宽会慢慢恢复，而抵押的EOS在不用时可以全部退回。</li><li>ram是EOS唯一消耗性资源，用完需要再购买，设计目的为减少无意义的交易，消耗整个的ram资源。</li></ol><a id="more"></a><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>一个EOS账号创建的时候可以通过购买和抵押来获取资源，费用由主账号支付。如果创建账号时并未购买资源，则需要通过其他账号购买或者进行抵押，因为购买和抵押本身就是一种交易行为需要消耗资源。</p><h4 id="RAM"><a href="#RAM" class="headerlink" title="RAM"></a>RAM</h4><p>RAM是运行时的内存。在EOSIO系统中，数据存储在区块链中要消耗该资源，是DApp开发时必须的资源。</p><h5 id="RAM的交易方式"><a href="#RAM的交易方式" class="headerlink" title="RAM的交易方式"></a>RAM的交易方式</h5><ol><li>RAM 的买卖，实质上是抵押 eos 到系统账户，而不是买方和卖方直接的交易。</li><li>不论是购买ram(即抵押eos，获取ram)，还是卖出ram(即取回抵押的eos，释放ram)，都是参与者与系统账户之间的交互，该过程将会收取0.5%的手续费。</li><li>买入RAM有两种计价方式： 买多少字节的RAM；买多少EOS的RAM。</li><li>卖出RAM只有一种方式：多少字节的RAM。</li></ol><h5 id="RAM相关网站"><a href="#RAM相关网站" class="headerlink" title="RAM相关网站"></a>RAM相关网站</h5><ol><li>RMA价格实时查询：<a href="https://bloks.io/" target="_blank" rel="noopener">https://bloks.io/</a></li><li>RAM购买：<a href="https://eostoolkit.io/account/undelegate" target="_blank" rel="noopener">https://eostoolkit.io/account/undelegate</a></li></ol><h4 id="NET-带宽"><a href="#NET-带宽" class="headerlink" title="NET 带宽"></a>NET 带宽</h4><p>网络带宽以过去3天的平均消耗量为单位进行测量，单位是字节如KB。每次发送操作或事务时都会暂时消耗网络带宽，但随着时间的推移会减少到0。抵押的EOS越多，网络带宽可以使用得越多。 可以随时赎回EOS，但是有三天左右的赎回期。</p><h4 id="CPU-带宽"><a href="#CPU-带宽" class="headerlink" title="CPU 带宽"></a>CPU 带宽</h4><p>CPU带宽以过去3天的平均消耗（以微秒ms为单位）来衡量。 当您发送操作或事务时，CPU带宽会暂时消耗，但随着时间的推移会减少到0。事务运行时间越长，它将消耗的CPU带宽就越多。 可以随时赎回EOS，但是有三天左右的赎回期。</p><h4 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h4><ol><li>RAM是自由市场买卖模式，由市场价格来决定。CPU、NET是抵押模式，抵押多少取消多少。</li><li>RAM是随时可以交易，但CPU、NET有三天等待期。</li><li>CPU和NET可用于出租给其他账户，取消抵押后，EOS可以回到自己的账户。RAM可帮助其他账户购买，但卖出时的EOS归其他账户所有。</li></ol><p>资源操作</p><pre><code>//账号资源查看cleos get account ${account}//${account1}为支付账号，${account2}获得账号//ram购买cleos system buyram ${account1} ${account2}  &quot;0.0001 EOS&quot; //ram销售，最多能售出的数量limit - usedcleos system sellram ${account1} 68718 -p ${account1}//抵押EOS，获得CPU带宽和NET带宽cleos system delegatebw ${account1} ${account2} &#39;0.1000 EOS&#39;  &#39;0.1000 EOS&#39;  -p ${account1}//取消抵押cleos system undelegatebw ${account1} ${account2} &#39;1 EOS&#39; &#39;1 EOS&#39; -p ${account1}</code></pre>]]></content>
      
      
      <categories>
          
          <category> eos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> eos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EOS常见问题</title>
      <link href="/2018/08/09/eos-chang-jian-wen-ti/"/>
      <url>/2018/08/09/eos-chang-jian-wen-ti/</url>
      
        <content type="html"><![CDATA[<h5 id="运行nodeos时候报错"><a href="#运行nodeos时候报错" class="headerlink" title="运行nodeos时候报错"></a>运行nodeos时候报错</h5><p>Q：下边代码是用于异常停止服务的恢复</p><p>A：</p><pre><code>nodeos --data-dir /opt/eosio/bin/data-dir --hard-replay-blockchain --truncate-at-block [有问题的区块编号] -e</code></pre><hr><a id="more"></a><p>Q：</p><pre><code>：std::exception::what: unrecognised option &#39;--resync-blockchain&#39;</code></pre><p>A：</p><pre><code> nodeos --replay-blockchain --hard-replay-blockchain --delete-all-blocks</code></pre><hr><p>Q：</p><pre><code>std::exception::what: unable to find plugin: eosio::account_history_api_plugin</code></pre><p>A:</p><pre><code>plugin = eosio::account_history_api_plugin替换为plugin = history_api_plugin</code></pre><hr><p>Q：get_actions和get_transaction接口使用后没有返回值？</p><p>A：启动的时候添加–filter-on “*”</p><hr><p>Q:</p><pre><code>Error 3090003: provided keys, permissions, and delays do not satisfy declared authorizations</code></pre><p>A：将私钥导入钱包中或者私钥错误</p><hr><p>Q：公网同步区块失败，报错如下图</p><p>A：修改genesis.json,将这个修改为”initial_key”: “EOS7EarnUhcyYqmdnPon8rm7mBCTnBoot6o7fE2WzjvEX2TdggbL3”,保证genesis.json文件中的公钥和主网一致。</p><hr><p>Q：</p><pre><code>Error 3040005: Expired TransactionPlease increase the expiration time of your transaction!</code></pre><p>A：注意服务器系统时间是否准确，并且可以修改config.ini中max-transaction-time = 30000 </p><hr><p>Q：</p><pre><code>Beginning build version: 1.2Thu Jul 12 06:33:42 UTC 2018User: rootgit head id: f947a6daa6fac1891bd5bb5b2c88a08025c6e740Current branch: HEADARCHITECTURE: LinuxOS name: CentOS LinuxOS Version: 7CPU speed: 2397MhzCPU cores: 4Physical Memory: 16048 MgbDisk install: /dev/mapper/rootvg-rootDisk space total: 62GDisk space available: 57GChecking Yum installationYum installation found at /bin/yum.Checking installation of Centos Software Collections Repository.Centos Software Collections Repository found.Enabling Centos devtoolset-7.Unable to enable Centos devtoolset-7 at this time.Exiting now</code></pre><p>A：<br>参考网址：<a href="https://blog.csdn.net/lizhengjava/article/details/80269484" target="_blank" rel="noopener">https://blog.csdn.net/lizhengjava/article/details/80269484</a></p><pre><code>//现在依赖sudo yum -y --enablerepo=extras install centos-release-sclsudo yum install -y devtoolset-7sudo yum install -y python33.x86_64//配置系统环境source /opt/rh/devtoolset-7/enable </code></pre>]]></content>
      
      
      <categories>
          
          <category> eos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> eos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EOS正式链部署</title>
      <link href="/2018/08/09/eos-zheng-shi-lian-bu-shu/"/>
      <url>/2018/08/09/eos-zheng-shi-lian-bu-shu/</url>
      
        <content type="html"><![CDATA[<p>参考网址：<a href="https://github.com/CryptoLions/EOS-MainNet" target="_blank" rel="noopener">https://github.com/CryptoLions/EOS-MainNet</a></p><h1 id="安装Eos"><a href="#安装Eos" class="headerlink" title="安装Eos"></a>安装Eos</h1><h2 id="step1：下载源码进行安装"><a href="#step1：下载源码进行安装" class="headerlink" title="step1：下载源码进行安装"></a>step1：下载源码进行安装</h2><pre><code>mkdir /home/eos-sources  cd /home/eos-sources  git clone https://github.com/EOS-Mainnet/eos.git --recursive    cd eos  git checkout mainnet-1.0.6  git submodule update --init --recursive   ./eosio_build.sh   </code></pre><a id="more"></a><h2 id="step2：配置node"><a href="#step2：配置node" class="headerlink" title="step2：配置node"></a>step2：配置node</h2><pre><code>mkdir /opt/EOSmainNet cd /opt/EOSmainNetgit clone https://github.com/CryptoLions/EOS-MainNet.git ./ chmod -R 777 ./*.sh   chmod -R 777 ./Wallet/*.sh </code></pre><h2 id="step3：修改config-ini文件"><a href="#step3：修改config-ini文件" class="headerlink" title="step3：修改config.ini文件"></a>step3：修改config.ini文件</h2><p>添加：filter-on = * 增加过滤器选项，可以查询账户相关交易。不建议开启，会造成内存溢出。</p><p><a href="：https：//eosnodes.privex.io/？config=1">查询最新p2p地址</a>，进行添加</p><h1 id="step4：检查genesis-json"><a href="#step4：检查genesis-json" class="headerlink" title="step4：检查genesis.json"></a>step4：检查genesis.json</h1><p>initial_key：”EOS7EarnUhcyYqmdnPon8rm7mBCTnBoot6o7fE2WzjvEX2TdggbL3”</p><p>不相同则无法进行同步区块</p><h2 id="step5：操作指令"><a href="#step5：操作指令" class="headerlink" title="step5：操作指令"></a>step5：操作指令</h2><pre><code>//第一次运行则运行，删除区块和配置genesis.json./start.sh --delete-all-blocks --genesis-json genesis.json//启动节点./start.sh  //启动钱包./Wallet/start_wallet.sh  </code></pre><h2 id="step6：验证是否安装成功"><a href="#step6：验证是否安装成功" class="headerlink" title="step6：验证是否安装成功"></a>step6：验证是否安装成功</h2><pre><code>//其中chain_id等于：aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906./cleos get info {  &quot;server_version&quot;: &quot;c9b7a247&quot;,  &quot;chain_id&quot;: &quot;aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906&quot;,  &quot;head_block_num&quot;: 4113455,  &quot;last_irreversible_block_num&quot;: 4113128,  &quot;last_irreversible_block_id&quot;: &quot;003ec2e8a76b9b219ce53eb854c11024e6d2d17c66c603ecbbdbb4232ed3578e&quot;,  &quot;head_block_id&quot;: &quot;003ec42fa45fb82eee5dc532213c396aa5ed8a114e382387a05d79b8e699e7aa&quot;,  &quot;head_block_time&quot;: &quot;2018-07-04T11:47:07.000&quot;,  &quot;head_block_producer&quot;: &quot;eosnewyorkio&quot;,  &quot;virtual_block_cpu_limit&quot;: 200000000,  &quot;virtual_block_net_limit&quot;: 1048576000,  &quot;block_cpu_limit&quot;: 199900,  &quot;block_net_limit&quot;: 1048576}</code></pre><h1 id="更新EOS"><a href="#更新EOS" class="headerlink" title="更新EOS"></a>更新EOS</h1><pre><code>cd /opt/EOSmainNet ./stop.shcd /home/eos-sources/eos  rm -rf build///第一种git checkout mainnet-1.0.6git submodule update --init --recursive   ./eosio_build.sh //第二种下载最新zip安装包unzip -o eos-1.0.8.zip./eosio_build.sh </code></pre>]]></content>
      
      
      <categories>
          
          <category> eos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> eos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EOS自动化部署,搭建私有环境</title>
      <link href="/2018/08/09/eos-zi-dong-hua-bu-shu-da-jian-si-you-huan-jing/"/>
      <url>/2018/08/09/eos-zi-dong-hua-bu-shu-da-jian-si-you-huan-jing/</url>
      
        <content type="html"><![CDATA[<ul><li>eosio版本：v1.0.5</li><li>操作系统：centos 7</li><li>参考网址为：<a href="https://developers.eos.io/eosio-nodeos/docs/local-single-node-testnet" target="_blank" rel="noopener">https://developers.eos.io/eosio-nodeos/docs/local-single-node-testnet</a></li></ul><h4 id="step1-编译代码"><a href="#step1-编译代码" class="headerlink" title="step1 编译代码"></a>step1 编译代码</h4><ol><li>获取git代码</li></ol><pre><code>git clone https://github.com/EOSIO/eos --recursive</code></pre><p>如果未添加 –recursive，则在拉完代码后，运行</p><a id="more"></a><pre><code>cd eosgit submodule update --init --recursive</code></pre><ol start="2"><li>切换分支</li></ol><pre><code>cd eos git checkout v1.0.5</code></pre><ol start="3"><li>编译</li></ol><pre><code>sudo ./eosio_build.sh -s &quot;EOS&quot; </code></pre><p>得到如下结果，则为成功</p><pre><code>(  ____ \(  ___  )(  ____ \\__   __/(  ___  )    | (    \/| (   ) || (    \/   ) (   | (   ) |    | (__    | |   | || (_____    | |   | |   | |    |  __)   | |   | |(_____  )   | |   | |   | |    | (      | |   | |      ) |   | |   | |   | |    | (____/\| (___) |/\____) |___) (___| (___) |    (_______/(_______)\_______)\_______/(_______)    EOSIO has been successfully built. 00:08:30    To verify your installation run the following commands:    /root/opt/mongodb/bin/mongod -f /root/opt/mongodb/mongod.conf &amp;    source /opt/rh/python33/enable    export PATH=${HOME}/opt/mongodb/bin:$PATH    cd /data/home/admin/eos-private/eos/build; make test    For more information:    EOSIO website: https://eos.io    EOSIO Telegram channel @ https://t.me/EOSProject    EOSIO resources: https://eos.io/resources/    EOSIO Stack Exchange: https://eosio.stackexchange.com    EOSIO wiki: https://github.com/EOSIO/eos/wiki</code></pre><p>启动节点</p><pre><code>[项目路径]/eos/build/programs/nodeos/nodeos</code></pre><p>你也可以设置全局，随时随地启动</p><pre><code>cd eos/buildsudo make install</code></pre><h4 id="step2-配置环境（本地单节点）"><a href="#step2-配置环境（本地单节点）" class="headerlink" title="step2 配置环境（本地单节点）"></a>step2 配置环境（本地单节点）</h4><p>配置文件所在位置</p><pre><code>~/.local/share/eosio/nodeos/config</code></pre><p>配置文件修改内容</p><pre><code>#设置可以访问节点的ip，0.0.0.0为所有IP都可以http-server-address = 0.0.0.0:8888#设置是否可以生产块enable-stale-production = true#设置生产者名称producer-name = eosio#是否启动过滤filter-on = *#生产者密钥private-key = [&quot;EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;,&quot;5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3&quot;]#插件列表plugin = eosio::chain_api_pluginplugin = eosio::chain_pluginplugin= eosio::producer_pluginplugin = eosio::http_pluginplugin = eosio::history_api_plugin</code></pre><p>重新启动节点nodeos</p><pre><code>ps -A|grep nodeoskill [pid]</code></pre><p>节点配置</p><pre><code>创建钱包cleos wallet create -n kgbp返回钱包密码PW5Ki8SMwkxfuvtXWy7fgj9FcGWdWfKQ6kfoq9KGHUvPoUfW6M8fx记下密码，以后解锁要用1.打开钱包cleos wallet open -n kgbp2.解锁钱包cleos wallet unlock -n kgbp3.生成密钥对cleos create key4.创建eosio.token账号cleos create account eosio eosio.token PublicKey PublicKey5.密钥导入钱包cleos wallet import PrivateKey -n kgbp6.发布eosio.token合约cleos set contract eosio.token ./contracts/eosio.token/7.创建和发布代币cleos  push action eosio.token create &#39;[&quot;eosio&quot;,&quot;1000000000.0000 EOS&quot;,0,0,0]&#39; -p eosio.tokencleos  push action eosio.token issue &#39;[&quot;eosio&quot;,&quot;1000000000.0000 EOS&quot;,&quot;issue&quot;]&#39; -p eosio8.在通过3,4,5创建一个自己的账号测试转账9.进行转账cleos  push action eosio.token transfer &#39;[&quot;eosio&quot;,&quot;eosioddztest&quot;,&quot;100.0000 EOS&quot;,&quot;58tsncxlb7nq0&quot;]&#39; -p eosio10.查看余额cleos transfer eosio ddzcash &quot;1.0000 EOS&quot; &quot;issue&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> eos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> eos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RAM结合eosio.system合约详解</title>
      <link href="/2018/08/09/ram-jie-he-eosio-system-he-yue-xiang-jie/"/>
      <url>/2018/08/09/ram-jie-he-eosio-system-he-yue-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="eosio-system-cpp"><a href="#eosio-system-cpp" class="headerlink" title="eosio.system.cpp"></a>eosio.system.cpp</h4><pre><code>// native.hpp (newaccount definition is actually in eosio.system.cpp)(newaccount)(updateauth)(deleteauth)(linkauth)(unlinkauth)(canceldelay)(onerror)// eosio.system.cpp(setram)(setparams)(setpriv)(rmvproducer)(bidname)// delegate_bandwidth.cpp(buyrambytes)(buyram)(sellram)(delegatebw)(undelegatebw)(refund)// voting.cpp(regproducer)(unregprod)(voteproducer)(regproxy)// producer_pay.cpp(onblock)(claimrewards)</code></pre><p>ram,cpu和net操作相关方法的都定义在 <strong>delegate_bandwidth.cpp</strong> ，其中和 RAM 相关的是 buyrambytes (通过指定字节数购买ram), buyram (通过指定货币购买ram)和 sellram (销售ram)。</p><h4 id="delegate-bandwidth-cpp"><a href="#delegate-bandwidth-cpp" class="headerlink" title="delegate_bandwidth.cpp"></a>delegate_bandwidth.cpp</h4><pre><code>//根据当前市场的份额，将需要购买的字节数转化为指定的EOS进行购买void system_contract::buyrambytes( account_name payer, account_name receiver, uint32_t bytes ) {      //在数据库中查询RAMCORE发行量，默认为100000000000000      auto itr = _rammarket.find(S(4,RAMCORE));      auto tmp = *itr;      auto eosout = tmp.convert( asset(bytes,S(0,RAM)), CORE_SYMBOL );      //通过转化后，调用buyram使用EOS购买      buyram( payer, receiver, eosout );   }</code></pre><h5 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h5><p>RAM的交易机制采用Bancor算法，使每字节的价格保持不变，通过中间代币(RAMCORE)来保证EOS和RAM之间的交易流通性。从上源码看首先获得RAMCORE的发行量，再通过tmp.convert方法RAM-&gt;RAMCORE，RAMCORE-&gt;EOS(CORE_SYMBOL)再调用 buyram 进行购买。这里的CORE_SYMBOL不一定是指EOS，查看core_symbol.hpp，发现源码内定义为SYS，也就是说在没有修改的前提下，需要提前发行SYS代币，才能进行RAM购买。</p><a id="more"></a><h4 id="core-symbol-hpp"><a href="#core-symbol-hpp" class="headerlink" title="core_symbol.hpp"></a>core_symbol.hpp</h4><pre><code>#define CORE_SYMBOL S(4,SYS)</code></pre><h4 id="delegate-bandwidth-cpp-1"><a href="#delegate-bandwidth-cpp-1" class="headerlink" title="delegate_bandwidth.cpp"></a>delegate_bandwidth.cpp</h4><pre><code>void system_contract::buyram(account_name payer, account_name receiver, asset quant){      //验证权限      require_auth(payer);      //不能为0      eosio_assert(quant.amount &gt; 0, &quot;must purchase a positive amount&quot;);      auto fee = quant;      //手续费为0.5%，如果amoun为1则手续费为1，如果小于1，则手续费在amoun&lt;free&lt;1 quant.amount.      //扣除手续费后的金额，也就是实际用于购买RAM的金额。如果扣除手续费后，金额为0，则会引起下面的操作失败。      auto quant_after_fee = quant;      quant_after_fee.amount -= fee.amount; the next inline transfer will fail causing the buyram action to fail.      INLINE_ACTION_SENDER(eosio::token, transfer)      (N(eosio.token), {payer, N(active)},       {payer, N(eosio.ram), quant_after_fee, std::string(&quot;buy ram&quot;)});      //如果手续费大于0，则将手续费使用eosio.token合约中的transfer，将金额转移给eosio.ramfee，备注为ram fee      if (fee.amount &gt; 0)      {            INLINE_ACTION_SENDER(eosio::token, transfer)            (N(eosio.token), {payer, N(active)},             {payer, N(eosio.ramfee), fee, std::string(&quot;ram fee&quot;)});      }      int64_t bytes_out;      //根据ram市场里的EOS和RAM实时汇率计算出能够购买的RAM总量      const auto &amp;market = _rammarket.get(S(4, RAMCORE), &quot;ram market does not exist&quot;);      _rammarket.modify(market, 0, [&amp;](auto &amp;es) {            //转化方法请参考下半部分            bytes_out = es.convert(quant_after_fee, S(0, RAM)).amount;      });      //剩余总量大于0判断      eosio_assert(bytes_out &gt; 0, &quot;must reserve a positive amount&quot;);      //更新全局变量，总共可以使用的内存大小      _gstate.total_ram_bytes_reserved += uint64_t(bytes_out);      //更新全局变量，购买RAM冻结总金额      _gstate.total_ram_stake += quant_after_fee.amount;      user_resources_table userres(_self, receiver);      auto res_itr = userres.find(receiver);      if (res_itr == userres.end())      {            //在userres表中添加ram相关记录            res_itr = userres.emplace(receiver, [&amp;](auto &amp;res) {                  res.owner = receiver;                  res.ram_bytes = bytes_out;            });      }      else      {            //在userres表中修改ram相关记录            userres.modify(res_itr, receiver, [&amp;](auto &amp;res) {                  res.ram_bytes += bytes_out;            });      }      //更新账号的RAM拥有量      set_resource_limits(res_itr-&gt;owner, res_itr-&gt;ram_bytes, res_itr-&gt;net_weight.amount, res_itr-&gt;cpu_weight.amount);}</code></pre><h5 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h5><pre class="line-numbers language-c++"><code class="language-c++">INLINE_ACTION_SENDER(eosio::token, transfer)            (N(eosio.token), {payer, N(active)},             {payer, N(eosio.ramfee), fee, std::string("ram fee")});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>INLINE_ACTION_SENDER为内联调用其他合约交易的方法，这里 transfer 参数对应为：合约名称，交易行为，合约账号，授权账号，支付账号，接收账号，金额，备注。具体的参数根据调用的合约交易方法而定。</p><pre class="line-numbers language-c++"><code class="language-c++">user_resources_table  userres( _self, receiver );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>user_resources_table 为 typedef eosio::multi_index&lt; N(userres), user_resources&gt; 的重命名，这个方法是引用 multi_index.hpp ,这里定义对DB的所有操作，后续会专门分析。通过查询获取账号在DB中是否有值，进行操作。</p><pre class="line-numbers language-c++"><code class="language-c++"> set_resource_limits( res_itr->owner, res_itr->ram_bytes, res_itr->net_weight.amount, res_itr->cpu_weight.amount );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更新账号的限制资源，此方法最终执行的为到 pending_limits 表中一条购买的资源数据。</p><p>参数：</p><ul><li>ram_bytes - ram limit</li><li>net_weight - net limit</li><li>cpu_weight - cput limit</li></ul><p>相关注释已经在代码中，这里还会用到一个比较重要的内容，那就是代币转化为RAM的公式，此方法请参考下面。</p><h4 id="exchange-state-cpp"><a href="#exchange-state-cpp" class="headerlink" title="exchange_state.cpp"></a>exchange_state.cpp</h4><pre><code>asset exchange_state::convert_to_exchange( connector&amp; c, asset in ) {      real_type R(supply.amount);   //RAM已经售出的总量      real_type C(c.balance.amount+in.amount);  //RAM总购买金额+本次购买的量      real_type F(c.weight/1000.0);      real_type T(in.amount);      real_type ONE(1.0);      real_type E = -R * (ONE - std::pow( ONE + T / C, F) );//换算出EOS对应的RAM量      //print( &quot;E: &quot;, E, &quot;\n&quot;);      int64_t issued = int64_t(E);      supply.amount += issued;//更新RAM已经售出的总量      c.balance.amount += in.amount;//更新RAM总购买金额      return asset( issued, supply.symbol );   }asset exchange_state::convert( asset from, symbol_type to ) {      auto sell_symbol  = from.symbol;        auto ex_symbol    = supply.symbol;       auto base_symbol  = base.balance.symbol;        auto quote_symbol = quote.balance.symbol;     //根据币种转化可以购买的RAM量      if( sell_symbol != ex_symbol ) {         if( sell_symbol == base_symbol ) {            from = convert_to_exchange( base, from );         } else if( sell_symbol == quote_symbol ) {            from = convert_to_exchange( quote, from );         } else {             eosio_assert( false, &quot;invalid sell&quot; );         }      } else {         if( to == base_symbol ) {            from = convert_from_exchange( base, from );          } else if( to == quote_symbol ) {            from = convert_from_exchange( quote, from );          } else {            eosio_assert( false, &quot;invalid conversion&quot; );         }      }      if( to != from.symbol )         return convert( from, to );      return from;   }</code></pre><p>convert_to_exchange的转化公式如下：<br><img src="/images/ram-gs.jpg" alt="image|432x98"></p><p>ram购买的量是一个绝对值，是根据购买EOS的金额和当前市场内ram的数量计算出来的。一般来说在ram总量不增加的情况下，一样金额的EOS，所能获得的ram会越来越少。所以如果早期你购买了ram，然后过段时间后通过sellram卖掉ram可能还能挣钱。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="ram购买流程图"><a href="#ram购买流程图" class="headerlink" title="ram购买流程图"></a>ram购买流程图</h4><p><img src="/images/ram-step.png" alt="image|690x488"></p><p>购买RAM最终将以添加到数据库里的值为准，也就是说明每次的查询可用量都将根据本地数据库同步到的数据为准。接下来将主要分析multi_index请参考：<a href="http://111.231.215.55/posts/eos_multi-index.html" target="_blank" rel="noopener">http://111.231.215.55/posts/eos_multi-index.html</a></p>]]></content>
      
      
      <categories>
          
          <category> eos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> eos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EOS核心介绍</title>
      <link href="/2018/08/04/eos-he-xin-jie-shao/"/>
      <url>/2018/08/04/eos-he-xin-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="account"><a href="#account" class="headerlink" title="account"></a>account</h2><h3 id="账号规则"><a href="#账号规则" class="headerlink" title="账号规则"></a>账号规则</h3><p><a href="https://developers.eos.io/eosio-nodeos/docs/learn-about-wallets-keys-and-accounts-with-cleos" target="_blank" rel="noopener">账号命名规则</a></p><ol><li>Must be less than 13 characters</li><li>Can only contain the following symbols: .12345abcdefghijklmnopqrstuvwxyz</li></ol><a id="more"></a><h2 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h2><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>eos/build/programs</p><h3 id="nodeos"><a href="#nodeos" class="headerlink" title="nodeos"></a>nodeos</h3><ul><li>nodeos是EOS的核心守护进程，可以通过它运行一个节点；</li><li>nodeos常见用途是生产区块、作为API端点、本地开发等；</li><li>nodeos可以理解为EOS区块链的服务端，可以通过添加插件（plugin）的方式为客户端提供API。</li></ul><h3 id="cleos"><a href="#cleos" class="headerlink" title="cleos"></a>cleos</h3><ul><li>cleos是“client eos”的缩写，可以理解为访问EOS区块链的客户端；</li><li>cleos访问nodeos暴露的API，需要nodeos的IP地址和端口号；可以通过修改config.ini文件中http-server-address属性修改默认连接服务地址。</li></ul><h3 id="keosd"><a href="#keosd" class="headerlink" title="keosd"></a>keosd</h3><ul><li>keosd用于存储交易签名的私钥;</li><li>keosd在本地节点上运行，并将私钥保存在本地节点上，是一个eos钱包守护进程；</li><li>keosd位于 eos/build/programs/keosd 路径下;</li><li>与keosd交互使用的工具是cleos。</li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>除了使用keosd来管理你的钱包外，还能使用nodeos来管理钱包。不建议同时使用keosd和nodeos来管理钱包，虽然不会出现什么问题，但很容易引起混淆。</p><p>使用方法，在config.ini文件中添加插件，重启nodeos。</p><pre><code>plugin = eosio::wallet_api_plugin</code></pre><p>注意：当使用nodeos来管理钱包时，如果nodeos关闭，钱包将会被加锁。重新启动nodeos后，需要使用unlock命令解锁钱包。<br>如果同时运行nodeos和keosd，cleos会优先访问nodeos。</p><h2 id="基础智能合约"><a href="#基础智能合约" class="headerlink" title="基础智能合约"></a>基础智能合约</h2><h3 id="eosio-bios"><a href="#eosio-bios" class="headerlink" title="eosio.bios"></a>eosio.bios</h3><ul><li>检测、设置指定账户的权限；</li><li>限制指定账户或全局的资源使用；</li><li>设置区块生产者。</li></ul><h4 id="部署方法"><a href="#部署方法" class="headerlink" title="部署方法"></a>部署方法</h4><pre><code>./cleos.sh set contract eosio  ../eos/build/contracts/eosio.bios/ -p eosio</code></pre><h3 id="eosio-token"><a href="#eosio-token" class="headerlink" title="eosio.token"></a>eosio.token</h3><ul><li>创建代币</li><li>发布代币</li><li>转账</li></ul><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><pre><code>./cleos.sh set contract eosio.token  ../eos/build/contracts/eosio.token/ -p eosio.token </code></pre><h3 id="eosio-system"><a href="#eosio-system" class="headerlink" title="eosio.system"></a>eosio.system</h3><p>创建账号，更新权限，删除权限，关联权限，取消关联权限，canceldelay，onerror<br>设置内存大小，setparams，setpriv，rmvproducer，bidname<br>购买指定字节内存，用EOS购买内存，销售内存，抵押，取消抵押，refund<br>注册生产者，取消注册生产者，投票，设置成为投票代理<br>更新指定生产者的区块信息，（生产者）获取回报</p><h4 id="部署-1"><a href="#部署-1" class="headerlink" title="部署"></a>部署</h4><p>请参考eosio.system部署</p><h3 id="eosio-msig"><a href="#eosio-msig" class="headerlink" title="eosio.msig"></a>eosio.msig</h3><p>msig”是“multiple signature”（多重签名）的简写，顾名思义，就是让多个账户对一起事务进行签名。可以异步提出、批准、发布经过多方同意的事务。</p><h4 id="部署-2"><a href="#部署-2" class="headerlink" title="部署"></a>部署</h4><pre><code>cleos set contract eosio.msig eosio.msig -p eosio.msig</code></pre>]]></content>
      
      
      <categories>
          
          <category> eos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> eos </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
